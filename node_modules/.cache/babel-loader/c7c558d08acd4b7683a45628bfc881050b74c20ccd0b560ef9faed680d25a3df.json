{"ast":null,"code":"var _jsxFileName = \"/Users/seshasayeebalaji/Desktop/aws_proj/src/components/Visualization.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { BarChart, Bar, PieChart, Pie, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, Cell } from 'recharts';\n\n// Custom colors for charts\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#8884d8', '#82ca9d'];\n\n// Sample fallback data\n\nconst sampleErrorCodeData = [{\n  errorCode: \"E123\",\n  count: 42\n}, {\n  errorCode: \"E045\",\n  count: 38\n}, {\n  errorCode: \"E211\",\n  count: 27\n}, {\n  errorCode: \"E078\",\n  count: 19\n}, {\n  errorCode: \"E156\",\n  count: 15\n}];\nconst samplePredictedFailures = [{\n  name: \"MRI_001\",\n  value: 12\n}, {\n  name: \"MRI_002\",\n  value: 8\n}, {\n  name: \"MRI_003\",\n  value: 5\n}, {\n  name: \"MRI_004\",\n  value: 3\n}];\nconst sampleMachineRuntime = [{\n  machineId: \"MRI_001\",\n  avgRuntime: 452\n}, {\n  machineId: \"MRI_002\",\n  avgRuntime: 387\n}, {\n  machineId: \"MRI_003\",\n  avgRuntime: 521\n}, {\n  machineId: \"MRI_004\",\n  avgRuntime: 312\n}];\nexport default function Visualization() {\n  _s();\n  const [errorCodeData, setErrorCodeData] = useState(sampleErrorCodeData);\n  const [predictedFailuresData, setPredictedFailuresData] = useState(samplePredictedFailures);\n  const [machineRuntimeData, setMachineRuntimeData] = useState(sampleMachineRuntime);\n  const [loading, setLoading] = useState(true);\n  const [dataStatus, setDataStatus] = useState({\n    errorCodes: 'fallback',\n    predictions: 'fallback',\n    runtime: 'fallback'\n  });\n  useEffect(() => {\n    const loadAllData = async () => {\n      setLoading(true);\n      await Promise.all([fetchErrorCodeData(), fetchPredictedFailuresData(), fetchMachineRuntimeData()]);\n      setLoading(false);\n    };\n    loadAllData();\n  }, []);\n  const fetchErrorCodeData = async () => {\n    try {\n      const response = await fetch('/api/search-athena', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          keyword: 'Error'\n        })\n      });\n      if (!response.ok) throw new Error('Failed to fetch error codes');\n      const result = await response.json();\n      if (result.data && result.data.length > 1) {\n        const errorCodeCounts = {};\n        result.data.slice(1).forEach(row => {\n          if (row.Data && row.Data[2] && row.Data[2].VarCharValue) {\n            const errorCode = row.Data[2].VarCharValue;\n            errorCodeCounts[errorCode] = (errorCodeCounts[errorCode] || 0) + 1;\n          }\n        });\n        const processedData = Object.entries(errorCodeCounts).map(([code, count]) => ({\n          errorCode: code,\n          count\n        })).sort((a, b) => b.count - a.count).slice(0, 10);\n        if (processedData.length > 0) {\n          setErrorCodeData(processedData);\n          setDataStatus(prev => ({\n            ...prev,\n            errorCodes: 'loaded'\n          }));\n        } else {\n          console.warn(\"No error code data found.\");\n          setDataStatus(prev => ({\n            ...prev,\n            errorCodes: 'no-data'\n          }));\n        }\n      }\n    } catch (error) {\n      console.error(\"Error fetching error codes:\", error);\n      setDataStatus(prev => ({\n        ...prev,\n        errorCodes: 'error'\n      }));\n    }\n  };\n  const fetchPredictedFailuresData = async () => {\n    try {\n      const response = await fetch('/api/latest-predictions');\n      if (!response.ok) throw new Error('Failed to fetch predictions');\n      const result = await response.json();\n      if (result.data && Array.isArray(result.data) && result.data.length > 0) {\n        const machineFailureCounts = {};\n        result.data.forEach(item => {\n          const machineId = item.machine_id;\n          if (machineId) {\n            machineFailureCounts[machineId] = (machineFailureCounts[machineId] || 0) + 1;\n          }\n        });\n        const processedData = Object.entries(machineFailureCounts).map(([machine, value]) => ({\n          name: machine,\n          value\n        }));\n        if (processedData.length > 0) {\n          setPredictedFailuresData(processedData);\n          setDataStatus(prev => ({\n            ...prev,\n            predictions: 'loaded'\n          }));\n        } else {\n          console.warn(\"No predicted failures data found.\");\n          setDataStatus(prev => ({\n            ...prev,\n            predictions: 'no-data'\n          }));\n        }\n      }\n    } catch (error) {\n      console.error(\"Error fetching predictions:\", error);\n      setDataStatus(prev => ({\n        ...prev,\n        predictions: 'error'\n      }));\n    }\n  };\n  const fetchMachineRuntimeData = async () => {\n    try {\n      const response = await fetch('/api/latest-s3-log');\n      if (!response.ok) throw new Error('Failed to fetch runtime data');\n      const result = await response.json();\n      if (result.data && Array.isArray(result.data) && result.data.length > 0) {\n        const machineRuntimes = {};\n        const runtimeCounts = {};\n        result.data.forEach(item => {\n          if (item.machine_id && item.machine_runtime) {\n            const machineId = item.machine_id;\n            const runtime = parseInt(item.machine_runtime, 10);\n            if (!isNaN(runtime)) {\n              if (!machineRuntimes[machineId]) {\n                machineRuntimes[machineId] = 0;\n                runtimeCounts[machineId] = 0;\n              }\n              machineRuntimes[machineId] += runtime;\n              runtimeCounts[machineId]++;\n            }\n          }\n        });\n        const processedData = Object.entries(machineRuntimes).map(([machine, totalRuntime]) => ({\n          machineId: machine,\n          avgRuntime: Math.round(totalRuntime / (runtimeCounts[machine] || 1))\n        }));\n        if (processedData.length > 0) {\n          setMachineRuntimeData(processedData);\n          setDataStatus(prev => ({\n            ...prev,\n            runtime: 'loaded'\n          }));\n        } else {\n          console.warn(\"No machine runtime data found.\");\n          setDataStatus(prev => ({\n            ...prev,\n            runtime: 'no-data'\n          }));\n        }\n      }\n    } catch (error) {\n      console.error(\"Error fetching runtime data:\", error);\n      setDataStatus(prev => ({\n        ...prev,\n        runtime: 'error'\n      }));\n    }\n  };\n  const refreshData = () => {\n    setLoading(true);\n    setDataStatus({\n      errorCodes: 'loading',\n      predictions: 'loading',\n      runtime: 'loading'\n    });\n    Promise.all([fetchErrorCodeData(), fetchPredictedFailuresData(), fetchMachineRuntimeData()]).finally(() => setLoading(false));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"p-4 bg-gray-100 min-h-screen\",\n    children: [\"\\xA0 \", /*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"text-3xl font-bold mb-4 text-center text-gray-800\",\n      children: \"Machine Monitoring Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 389,\n      columnNumber: 3\n    }, this), \"\\xA0 \", /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex justify-center mb-6\",\n      children: [\"\\xA0 \\xA0 \", /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: refreshData,\n        className: \"bg-violet-600 hover:bg-violet-700 text-white font-semibold py-2 px-4 rounded shadow\",\n        children: \"\\xA0 \\xA0 \\xA0 Refresh Data \\xA0 \\xA0 \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 395,\n        columnNumber: 5\n      }, this), \"\\xA0 \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 393,\n      columnNumber: 3\n    }, this), \"\\xA0 \", loading && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-center text-gray-600 mb-4\",\n      children: \"\\xA0 \\xA0 \\xA0 Loading charts, please wait... \\xA0 \\xA0 \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 413,\n      columnNumber: 5\n    }, this), \"\\xA0 \", /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid grid-cols-1 md:grid-cols-2 gap-6\",\n      children: [\"\\xA0 \\xA0 \", \"\\xA0 \\xA0 \", /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-white p-4 rounded-lg shadow-md\",\n        children: [\"\\xA0 \\xA0 \\xA0 \", /*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"text-xl font-semibold mb-2 text-gray-700\",\n          children: \"Top Error Codes\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 429,\n          columnNumber: 7\n        }, this), \"\\xA0 \\xA0 \\xA0 \", /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n          width: \"100%\",\n          height: 300,\n          children: [\"\\xA0 \\xA0 \\xA0 \\xA0 \", /*#__PURE__*/_jsxDEV(BarChart, {\n            data: errorCodeData,\n            children: [\"\\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \", /*#__PURE__*/_jsxDEV(CartesianGrid, {\n              strokeDasharray: \"3 3\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 435,\n              columnNumber: 11\n            }, this), \"\\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \", /*#__PURE__*/_jsxDEV(XAxis, {\n              dataKey: \"errorCode\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 437,\n              columnNumber: 11\n            }, this), \"\\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \", /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 439,\n              columnNumber: 11\n            }, this), \"\\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \", /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 441,\n              columnNumber: 11\n            }, this), \"\\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \", /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 443,\n              columnNumber: 11\n            }, this), \"\\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \", /*#__PURE__*/_jsxDEV(Bar, {\n              dataKey: \"count\",\n              fill: \"#8884d8\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 445,\n              columnNumber: 11\n            }, this), \"\\xA0 \\xA0 \\xA0 \\xA0 \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 433,\n            columnNumber: 9\n          }, this), \"\\xA0 \\xA0 \\xA0 \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 431,\n          columnNumber: 7\n        }, this), \"\\xA0 \\xA0 \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 427,\n        columnNumber: 5\n      }, this), \"\\xA0 \\xA0 \", \"\\xA0 \\xA0 \", /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-white p-4 rounded-lg shadow-md\",\n        children: [\"\\xA0 \\xA0 \\xA0 \", /*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"text-xl font-semibold mb-2 text-gray-700\",\n          children: \"Predicted Machine Failures\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 459,\n          columnNumber: 7\n        }, this), \"\\xA0 \\xA0 \\xA0 \", /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n          width: \"100%\",\n          height: 300,\n          children: [\"\\xA0 \\xA0 \\xA0 \\xA0 \", /*#__PURE__*/_jsxDEV(PieChart, {\n            children: [\"\\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \", /*#__PURE__*/_jsxDEV(Pie, {\n              data: predictedFailuresData,\n              dataKey: \"value\",\n              nameKey: \"name\",\n              cx: \"50%\",\n              cy: \"50%\",\n              outerRadius: 100,\n              label: true,\n              children: [\"\\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \", predictedFailuresData.map((entry, index) => /*#__PURE__*/_jsxDEV(Cell, {\n                fill: COLORS[index % COLORS.length]\n              }, `cell-${index}`, false, {\n                fileName: _jsxFileName,\n                lineNumber: 485,\n                columnNumber: 15\n              }, this)), \"\\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 465,\n              columnNumber: 11\n            }, this), \"\\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \", /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 491,\n              columnNumber: 11\n            }, this), \"\\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \", /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 493,\n              columnNumber: 11\n            }, this), \"\\xA0 \\xA0 \\xA0 \\xA0 \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 463,\n            columnNumber: 9\n          }, this), \"\\xA0 \\xA0 \\xA0 \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 461,\n          columnNumber: 7\n        }, this), \"\\xA0 \\xA0 \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 457,\n        columnNumber: 5\n      }, this), \"\\xA0 \\xA0 \", \"\\xA0 \\xA0 \", /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-white p-4 rounded-lg shadow-md md:col-span-2\",\n        children: [\"\\xA0 \\xA0 \\xA0 \", /*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"text-xl font-semibold mb-2 text-gray-700\",\n          children: \"Average Machine Runtime (mins)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 507,\n          columnNumber: 7\n        }, this), \"\\xA0 \\xA0 \\xA0 \", /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n          width: \"100%\",\n          height: 300,\n          children: [\"\\xA0 \\xA0 \\xA0 \\xA0 \", /*#__PURE__*/_jsxDEV(BarChart, {\n            data: machineRuntimeData,\n            children: [\"\\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \", /*#__PURE__*/_jsxDEV(CartesianGrid, {\n              strokeDasharray: \"3 3\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 513,\n              columnNumber: 11\n            }, this), \"\\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \", /*#__PURE__*/_jsxDEV(XAxis, {\n              dataKey: \"machineId\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 515,\n              columnNumber: 11\n            }, this), \"\\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \", /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 517,\n              columnNumber: 11\n            }, this), \"\\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \", /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 519,\n              columnNumber: 11\n            }, this), \"\\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \", /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 521,\n              columnNumber: 11\n            }, this), \"\\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \", /*#__PURE__*/_jsxDEV(Bar, {\n              dataKey: \"avgRuntime\",\n              fill: \"#82ca9d\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 523,\n              columnNumber: 11\n            }, this), \"\\xA0 \\xA0 \\xA0 \\xA0 \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 511,\n            columnNumber: 9\n          }, this), \"\\xA0 \\xA0 \\xA0 \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 509,\n          columnNumber: 7\n        }, this), \"\\xA0 \\xA0 \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 505,\n        columnNumber: 5\n      }, this), \"\\xA0 \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 423,\n      columnNumber: 3\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 387,\n    columnNumber: 1\n  }, this);\n}\n_s(Visualization, \"tOUc/m+MaoitCsWe0QHCTiheJtQ=\");\n_c = Visualization;\nvar _c;\n$RefreshReg$(_c, \"Visualization\");","map":{"version":3,"names":["React","useState","useEffect","BarChart","Bar","PieChart","Pie","XAxis","YAxis","CartesianGrid","Tooltip","Legend","ResponsiveContainer","Cell","jsxDEV","_jsxDEV","COLORS","sampleErrorCodeData","errorCode","count","samplePredictedFailures","name","value","sampleMachineRuntime","machineId","avgRuntime","Visualization","_s","errorCodeData","setErrorCodeData","predictedFailuresData","setPredictedFailuresData","machineRuntimeData","setMachineRuntimeData","loading","setLoading","dataStatus","setDataStatus","errorCodes","predictions","runtime","loadAllData","Promise","all","fetchErrorCodeData","fetchPredictedFailuresData","fetchMachineRuntimeData","response","fetch","method","headers","body","JSON","stringify","keyword","ok","Error","result","json","data","length","errorCodeCounts","slice","forEach","row","Data","VarCharValue","processedData","Object","entries","map","code","sort","a","b","prev","console","warn","error","Array","isArray","machineFailureCounts","item","machine_id","machine","machineRuntimes","runtimeCounts","machine_runtime","parseInt","isNaN","totalRuntime","Math","round","refreshData","finally","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","width","height","strokeDasharray","dataKey","fill","nameKey","cx","cy","outerRadius","label","entry","index","_c","$RefreshReg$"],"sources":["/Users/seshasayeebalaji/Desktop/aws_proj/src/components/Visualization.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\nimport {\n\n  BarChart, Bar, PieChart, Pie,\n\n  XAxis, YAxis, CartesianGrid, Tooltip, Legend,\n\n  ResponsiveContainer, Cell\n\n} from 'recharts';\n\n\n\n// Custom colors for charts\n\nconst COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#8884d8', '#82ca9d'];\n\n\n\n// Sample fallback data\n\nconst sampleErrorCodeData = [\n\n  { errorCode: \"E123\", count: 42 },\n\n  { errorCode: \"E045\", count: 38 },\n\n  { errorCode: \"E211\", count: 27 },\n\n  { errorCode: \"E078\", count: 19 },\n\n  { errorCode: \"E156\", count: 15 }\n\n];\n\n\n\nconst samplePredictedFailures = [\n\n  { name: \"MRI_001\", value: 12 },\n\n  { name: \"MRI_002\", value: 8 },\n\n  { name: \"MRI_003\", value: 5 },\n\n  { name: \"MRI_004\", value: 3 }\n\n];\n\n\n\nconst sampleMachineRuntime = [\n\n  { machineId: \"MRI_001\", avgRuntime: 452 },\n\n  { machineId: \"MRI_002\", avgRuntime: 387 },\n\n  { machineId: \"MRI_003\", avgRuntime: 521 },\n\n  { machineId: \"MRI_004\", avgRuntime: 312 }\n\n];\n\n\n\nexport default function Visualization() {\n\n  const [errorCodeData, setErrorCodeData] = useState(sampleErrorCodeData);\n\n  const [predictedFailuresData, setPredictedFailuresData] = useState(samplePredictedFailures);\n\n  const [machineRuntimeData, setMachineRuntimeData] = useState(sampleMachineRuntime);\n\n  const [loading, setLoading] = useState(true);\n\n  const [dataStatus, setDataStatus] = useState({\n\n    errorCodes: 'fallback',\n\n    predictions: 'fallback',\n\n    runtime: 'fallback'\n\n  });\n\n\n\n  useEffect(() => {\n\n    const loadAllData = async () => {\n\n      setLoading(true);\n\n      await Promise.all([\n\n        fetchErrorCodeData(),\n\n        fetchPredictedFailuresData(),\n\n        fetchMachineRuntimeData()\n\n      ]);\n\n      setLoading(false);\n\n    };\n\n\n\n    loadAllData();\n\n  }, []);\n\n\n\n  const fetchErrorCodeData = async () => {\n\n    try {\n\n      const response = await fetch('/api/search-athena', {\n\n        method: 'POST',\n\n        headers: { 'Content-Type': 'application/json' },\n\n        body: JSON.stringify({ keyword: 'Error' })\n\n      });\n\n\n\n      if (!response.ok) throw new Error('Failed to fetch error codes');\n\n      const result = await response.json();\n\n\n\n      if (result.data && result.data.length > 1) {\n\n        const errorCodeCounts = {};\n\n\n\n        result.data.slice(1).forEach(row => {\n\n          if (row.Data && row.Data[2] && row.Data[2].VarCharValue) {\n\n            const errorCode = row.Data[2].VarCharValue;\n\n            errorCodeCounts[errorCode] = (errorCodeCounts[errorCode] || 0) + 1;\n\n          }\n\n        });\n\n\n\n        const processedData = Object.entries(errorCodeCounts)\n\n          .map(([code, count]) => ({ errorCode: code, count }))\n\n          .sort((a, b) => b.count - a.count)\n\n          .slice(0, 10);\n\n\n\n        if (processedData.length > 0) {\n\n          setErrorCodeData(processedData);\n\n          setDataStatus(prev => ({ ...prev, errorCodes: 'loaded' }));\n\n        } else {\n\n          console.warn(\"No error code data found.\");\n\n          setDataStatus(prev => ({ ...prev, errorCodes: 'no-data' }));\n\n        }\n\n      }\n\n    } catch (error) {\n\n      console.error(\"Error fetching error codes:\", error);\n\n      setDataStatus(prev => ({ ...prev, errorCodes: 'error' }));\n\n    }\n\n  };\n\n\n\n  const fetchPredictedFailuresData = async () => {\n\n    try {\n\n      const response = await fetch('/api/latest-predictions');\n\n      if (!response.ok) throw new Error('Failed to fetch predictions');\n\n      const result = await response.json();\n\n\n\n      if (result.data && Array.isArray(result.data) && result.data.length > 0) {\n\n        const machineFailureCounts = {};\n\n\n\n        result.data.forEach(item => {\n\n          const machineId = item.machine_id;\n\n          if (machineId) {\n\n            machineFailureCounts[machineId] = (machineFailureCounts[machineId] || 0) + 1;\n\n          }\n\n        });\n\n\n\n        const processedData = Object.entries(machineFailureCounts)\n\n          .map(([machine, value]) => ({ name: machine, value }));\n\n\n\n        if (processedData.length > 0) {\n\n          setPredictedFailuresData(processedData);\n\n          setDataStatus(prev => ({ ...prev, predictions: 'loaded' }));\n\n        } else {\n\n          console.warn(\"No predicted failures data found.\");\n\n          setDataStatus(prev => ({ ...prev, predictions: 'no-data' }));\n\n        }\n\n      }\n\n    } catch (error) {\n\n      console.error(\"Error fetching predictions:\", error);\n\n      setDataStatus(prev => ({ ...prev, predictions: 'error' }));\n\n    }\n\n  };\n\n\n\n  const fetchMachineRuntimeData = async () => {\n\n    try {\n\n      const response = await fetch('/api/latest-s3-log');\n\n      if (!response.ok) throw new Error('Failed to fetch runtime data');\n\n      const result = await response.json();\n\n\n\n      if (result.data && Array.isArray(result.data) && result.data.length > 0) {\n\n        const machineRuntimes = {};\n\n        const runtimeCounts = {};\n\n\n\n        result.data.forEach(item => {\n\n          if (item.machine_id && item.machine_runtime) {\n\n            const machineId = item.machine_id;\n\n            const runtime = parseInt(item.machine_runtime, 10);\n\n\n\n            if (!isNaN(runtime)) {\n\n              if (!machineRuntimes[machineId]) {\n\n                machineRuntimes[machineId] = 0;\n\n                runtimeCounts[machineId] = 0;\n\n              }\n\n              machineRuntimes[machineId] += runtime;\n\n              runtimeCounts[machineId]++;\n\n            }\n\n          }\n\n        });\n\n\n\n        const processedData = Object.entries(machineRuntimes)\n\n          .map(([machine, totalRuntime]) => ({\n\n            machineId: machine,\n\n            avgRuntime: Math.round(totalRuntime / (runtimeCounts[machine] || 1))\n\n          }));\n\n\n\n        if (processedData.length > 0) {\n\n          setMachineRuntimeData(processedData);\n\n          setDataStatus(prev => ({ ...prev, runtime: 'loaded' }));\n\n        } else {\n\n          console.warn(\"No machine runtime data found.\");\n\n          setDataStatus(prev => ({ ...prev, runtime: 'no-data' }));\n\n        }\n\n      }\n\n    } catch (error) {\n\n      console.error(\"Error fetching runtime data:\", error);\n\n      setDataStatus(prev => ({ ...prev, runtime: 'error' }));\n\n    }\n\n  };\n\n\n\n  const refreshData = () => {\n\n    setLoading(true);\n\n    setDataStatus({\n\n    errorCodes: 'loading',\n\n    predictions: 'loading',\n\n    runtime: 'loading'\n\n});\n\n\n\nPromise.all([\n\n  fetchErrorCodeData(),\n\n  fetchPredictedFailuresData(),\n\n  fetchMachineRuntimeData()\n\n]).finally(() => setLoading(false));\n\n};\n\n\n\nreturn (\n\n<div className=\"p-4 bg-gray-100 min-h-screen\">\n\n  <h1 className=\"text-3xl font-bold mb-4 text-center text-gray-800\">Machine Monitoring Dashboard</h1>\n\n\n\n  <div className=\"flex justify-center mb-6\">\n\n    <button\n\n      onClick={refreshData}\n\n      className=\"bg-violet-600 hover:bg-violet-700 text-white font-semibold py-2 px-4 rounded shadow\"\n\n    >\n\n      Refresh Data\n\n    </button>\n\n  </div>\n\n\n\n  {loading && (\n\n    <div className=\"text-center text-gray-600 mb-4\">\n\n      Loading charts, please wait...\n\n    </div>\n\n  )}\n\n\n\n  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n\n    {/* Error Code Bar Chart */}\n\n    <div className=\"bg-white p-4 rounded-lg shadow-md\">\n\n      <h2 className=\"text-xl font-semibold mb-2 text-gray-700\">Top Error Codes</h2>\n\n      <ResponsiveContainer width=\"100%\" height={300}>\n\n        <BarChart data={errorCodeData}>\n\n          <CartesianGrid strokeDasharray=\"3 3\" />\n\n          <XAxis dataKey=\"errorCode\" />\n\n          <YAxis />\n\n          <Tooltip />\n\n          <Legend />\n\n          <Bar dataKey=\"count\" fill=\"#8884d8\" />\n\n        </BarChart>\n\n      </ResponsiveContainer>\n\n    </div>\n\n\n\n    {/* Predicted Failures Pie Chart */}\n\n    <div className=\"bg-white p-4 rounded-lg shadow-md\">\n\n      <h2 className=\"text-xl font-semibold mb-2 text-gray-700\">Predicted Machine Failures</h2>\n\n      <ResponsiveContainer width=\"100%\" height={300}>\n\n        <PieChart>\n\n          <Pie\n\n            data={predictedFailuresData}\n\n            dataKey=\"value\"\n\n            nameKey=\"name\"\n\n            cx=\"50%\"\n\n            cy=\"50%\"\n\n            outerRadius={100}\n\n            label\n\n          >\n\n            {predictedFailuresData.map((entry, index) => (\n\n              <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\n\n            ))}\n\n          </Pie>\n\n          <Tooltip />\n\n          <Legend />\n\n        </PieChart>\n\n      </ResponsiveContainer>\n\n    </div>\n\n\n\n    {/* Machine Runtime Bar Chart */}\n\n    <div className=\"bg-white p-4 rounded-lg shadow-md md:col-span-2\">\n\n      <h2 className=\"text-xl font-semibold mb-2 text-gray-700\">Average Machine Runtime (mins)</h2>\n\n      <ResponsiveContainer width=\"100%\" height={300}>\n\n        <BarChart data={machineRuntimeData}>\n\n          <CartesianGrid strokeDasharray=\"3 3\" />\n\n          <XAxis dataKey=\"machineId\" />\n\n          <YAxis />\n\n          <Tooltip />\n\n          <Legend />\n\n          <Bar dataKey=\"avgRuntime\" fill=\"#82ca9d\" />\n\n        </BarChart>\n\n      </ResponsiveContainer>\n\n    </div>\n\n  </div>\n\n</div>\n\n);\n\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}