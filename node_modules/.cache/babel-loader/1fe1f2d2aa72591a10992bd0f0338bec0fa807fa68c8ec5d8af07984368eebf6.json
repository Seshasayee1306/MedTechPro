{"ast":null,"code":"var _jsxFileName = \"/Users/seshasayeebalaji/Desktop/aws_proj/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [s3Contents, setS3Contents] = useState([]);\n  const [predictions, setPredictions] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const API_URL = 'http://localhost:5000';\n  useEffect(() => {\n    fetchData();\n  }, []);\n  const fetchData = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n\n      // Test server connection\n      const serverTest = await fetch(`${API_URL}/`);\n      if (!serverTest.ok) throw new Error('Server connection failed');\n\n      // Fetch S3 contents\n      const s3Response = await fetch(`${API_URL}/api/s3-contents`);\n      if (!s3Response.ok) throw new Error('Failed to fetch S3 contents');\n      const s3Data = await s3Response.json();\n      setS3Contents(s3Data);\n\n      // Fetch predictions\n      const predictionsResponse = await fetch(`${API_URL}/api/predictions`);\n      if (!predictionsResponse.ok) throw new Error('Failed to fetch predictions');\n      const predictionsData = await predictionsResponse.json();\n      setPredictions(predictionsData);\n    } catch (error) {\n      console.error('Error:', error);\n      setError(error.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Cloud Project Dashboard\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      children: [error && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"error-message\",\n        children: [\"Error: \", error]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 11\n      }, this), loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"dashboard\",\n        children: [/*#__PURE__*/_jsxDEV(\"section\", {\n          className: \"s3-section\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"S3 Bucket Contents\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n            children: s3Contents.length === 0 ? /*#__PURE__*/_jsxDEV(\"li\", {\n              children: \"No files found in S3 bucket\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 66,\n              columnNumber: 19\n            }, this) : s3Contents.map((item, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n              children: item.Key\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 69,\n              columnNumber: 21\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n          className: \"predictions-section\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Databricks Predictions\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n            children: predictions.length === 0 ? /*#__PURE__*/_jsxDEV(\"li\", {\n              children: \"No predictions available\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 79,\n              columnNumber: 19\n            }, this) : predictions.map((prediction, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n              children: JSON.stringify(prediction)\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 82,\n              columnNumber: 21\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"pbLu3o1iyLfuKwtQTbJbMqymk8o=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","App","_s","s3Contents","setS3Contents","predictions","setPredictions","loading","setLoading","error","setError","API_URL","fetchData","serverTest","fetch","ok","Error","s3Response","s3Data","json","predictionsResponse","predictionsData","console","message","className","children","fileName","_jsxFileName","lineNumber","columnNumber","length","map","item","index","Key","prediction","JSON","stringify","_c","$RefreshReg$"],"sources":["/Users/seshasayeebalaji/Desktop/aws_proj/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\n\nfunction App() {\n  const [s3Contents, setS3Contents] = useState([]);\n  const [predictions, setPredictions] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  const API_URL = 'http://localhost:5000';\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  const fetchData = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n\n      // Test server connection\n      const serverTest = await fetch(`${API_URL}/`);\n      if (!serverTest.ok) throw new Error('Server connection failed');\n\n      // Fetch S3 contents\n      const s3Response = await fetch(`${API_URL}/api/s3-contents`);\n      if (!s3Response.ok) throw new Error('Failed to fetch S3 contents');\n      const s3Data = await s3Response.json();\n      setS3Contents(s3Data);\n\n      // Fetch predictions\n      const predictionsResponse = await fetch(`${API_URL}/api/predictions`);\n      if (!predictionsResponse.ok) throw new Error('Failed to fetch predictions');\n      const predictionsData = await predictionsResponse.json();\n      setPredictions(predictionsData);\n\n    } catch (error) {\n      console.error('Error:', error);\n      setError(error.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Cloud Project Dashboard</h1>\n      </header>\n      \n      <main>\n        {error && (\n          <div className=\"error-message\">\n            Error: {error}\n          </div>\n        )}\n        \n        {loading ? (\n          <p>Loading...</p>\n        ) : (\n          <div className=\"dashboard\">\n            <section className=\"s3-section\">\n              <h2>S3 Bucket Contents</h2>\n              <ul>\n                {s3Contents.length === 0 ? (\n                  <li>No files found in S3 bucket</li>\n                ) : (\n                  s3Contents.map((item, index) => (\n                    <li key={index}>{item.Key}</li>\n                  ))\n                )}\n              </ul>\n            </section>\n\n            <section className=\"predictions-section\">\n              <h2>Databricks Predictions</h2>\n              <ul>\n                {predictions.length === 0 ? (\n                  <li>No predictions available</li>\n                ) : (\n                  predictions.map((prediction, index) => (\n                    <li key={index}>{JSON.stringify(prediction)}</li>\n                  ))\n                )}\n              </ul>\n            </section>\n          </div>\n        )}\n      </main>\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}