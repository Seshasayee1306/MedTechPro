{"ast":null,"code":"var _jsxFileName = \"/Users/seshasayeebalaji/Desktop/aws_proj/src/components/Visualization.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { BarChart, Bar, PieChart, Pie, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, Cell } from 'recharts';\n\n// Custom colors for charts\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#8884d8', '#82ca9d'];\nexport default function Visualization() {\n  _s();\n  // State for each data type\n  const [errorCodeData, setErrorCodeData] = useState([]);\n  const [predictedFailuresData, setPredictedFailuresData] = useState([]);\n  const [machineRuntimeData, setMachineRuntimeData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [dataStatus, setDataStatus] = useState({\n    errorCodes: 'loading',\n    predictions: 'loading',\n    runtime: 'loading'\n  });\n  useEffect(() => {\n    // Function to fetch error code data\n    const fetchErrorCodeData = async () => {\n      try {\n        const response = await fetch('/api/search-athena', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            keyword: 'Error'\n          })\n        });\n        if (!response.ok) throw new Error('Failed to fetch error codes');\n        const result = await response.json();\n        console.log(\"Error code API response:\", result);\n\n        // Process the API response\n        if (result.data && result.data.length > 1) {\n          const errorCodeCounts = {};\n\n          // Skip the first row which is typically headers\n          result.data.slice(1).forEach(row => {\n            if (row.Data && row.Data[2] && row.Data[2].VarCharValue) {\n              const errorCode = row.Data[2].VarCharValue;\n              errorCodeCounts[errorCode] = (errorCodeCounts[errorCode] || 0) + 1;\n            }\n          });\n          const processedData = Object.entries(errorCodeCounts).map(([code, count]) => ({\n            errorCode: code,\n            count\n          })).sort((a, b) => b.count - a.count).slice(0, 10);\n          console.log(\"Processed error code data:\", processedData);\n          setErrorCodeData(processedData);\n          setDataStatus(prev => ({\n            ...prev,\n            errorCodes: 'loaded'\n          }));\n        } else {\n          // Fallback to sample data\n          console.log(\"No error code data found, using defaults\");\n          setErrorCodeData([{\n            errorCode: \"E123\",\n            count: 42\n          }, {\n            errorCode: \"E045\",\n            count: 38\n          }, {\n            errorCode: \"E211\",\n            count: 27\n          }, {\n            errorCode: \"E078\",\n            count: 19\n          }, {\n            errorCode: \"E156\",\n            count: 15\n          }]);\n          setDataStatus(prev => ({\n            ...prev,\n            errorCodes: 'fallback'\n          }));\n        }\n      } catch (error) {\n        console.error(\"Error fetching error codes:\", error);\n        setErrorCodeData([{\n          errorCode: \"E123\",\n          count: 42\n        }, {\n          errorCode: \"E045\",\n          count: 38\n        }, {\n          errorCode: \"E211\",\n          count: 27\n        }, {\n          errorCode: \"E078\",\n          count: 19\n        }, {\n          errorCode: \"E156\",\n          count: 15\n        }]);\n        setDataStatus(prev => ({\n          ...prev,\n          errorCodes: 'error'\n        }));\n      }\n    };\n\n    // Function to fetch predicted failures data\n    const fetchPredictedFailuresData = async () => {\n      try {\n        const response = await fetch('/api/latest-predictions');\n        if (!response.ok) throw new Error('Failed to fetch predictions');\n        const result = await response.json();\n        console.log(\"Predictions API response:\", result);\n        if (result.data && result.data.length > 0) {\n          const machineFailureCounts = {};\n          result.data.forEach(item => {\n            const machineId = item.machine_id;\n            if (machineId) {\n              machineFailureCounts[machineId] = (machineFailureCounts[machineId] || 0) + 1;\n            }\n          });\n          const processedData = Object.entries(machineFailureCounts).map(([machine, value]) => ({\n            name: machine,\n            value\n          }));\n          console.log(\"Processed predictions data:\", processedData);\n          setPredictedFailuresData(processedData);\n          setDataStatus(prev => ({\n            ...prev,\n            predictions: 'loaded'\n          }));\n        } else {\n          console.log(\"No predictions data found, using defaults\");\n          setPredictedFailuresData([{\n            name: \"MRI_001\",\n            value: 12\n          }, {\n            name: \"MRI_002\",\n            value: 8\n          }, {\n            name: \"MRI_003\",\n            value: 5\n          }, {\n            name: \"MRI_004\",\n            value: 3\n          }]);\n          setDataStatus(prev => ({\n            ...prev,\n            predictions: 'fallback'\n          }));\n        }\n      } catch (error) {\n        console.error(\"Error fetching predictions:\", error);\n        setPredictedFailuresData([{\n          name: \"MRI_001\",\n          value: 12\n        }, {\n          name: \"MRI_002\",\n          value: 8\n        }, {\n          name: \"MRI_003\",\n          value: 5\n        }, {\n          name: \"MRI_004\",\n          value: 3\n        }]);\n        setDataStatus(prev => ({\n          ...prev,\n          predictions: 'error'\n        }));\n      }\n    };\n\n    // Function to fetch machine runtime data\n    const fetchMachineRuntimeData = async () => {\n      try {\n        const response = await fetch('/api/latest-s3-log');\n        if (!response.ok) throw new Error('Failed to fetch runtime data');\n        const result = await response.json();\n        console.log(\"Runtime API response:\", result);\n        if (result.data && result.data.length > 0) {\n          const machineRuntimes = {};\n          const runtimeCounts = {};\n          result.data.forEach(item => {\n            if (item.machine_id && item.machine_runtime) {\n              const machineId = item.machine_id;\n              const runtime = parseInt(item.machine_runtime, 10);\n              if (!isNaN(runtime)) {\n                if (!machineRuntimes[machineId]) {\n                  machineRuntimes[machineId] = 0;\n                  runtimeCounts[machineId] = 0;\n                }\n                machineRuntimes[machineId] += runtime;\n                runtimeCounts[machineId]++;\n              }\n            }\n          });\n          const processedData = Object.entries(machineRuntimes).map(([machine, totalRuntime]) => ({\n            machineId: machine,\n            avgRuntime: totalRuntime / (runtimeCounts[machine] || 1)\n          }));\n          console.log(\"Processed runtime data:\", processedData);\n          setMachineRuntimeData(processedData);\n          setDataStatus(prev => ({\n            ...prev,\n            runtime: 'loaded'\n          }));\n        } else {\n          console.log(\"No runtime data found, using defaults\");\n          setMachineRuntimeData([{\n            machineId: \"MRI_001\",\n            avgRuntime: 452\n          }, {\n            machineId: \"MRI_002\",\n            avgRuntime: 387\n          }, {\n            machineId: \"MRI_003\",\n            avgRuntime: 521\n          }, {\n            machineId: \"MRI_004\",\n            avgRuntime: 312\n          }]);\n          setDataStatus(prev => ({\n            ...prev,\n            runtime: 'fallback'\n          }));\n        }\n      } catch (error) {\n        console.error(\"Error fetching runtime data:\", error);\n        setMachineRuntimeData([{\n          machineId: \"MRI_001\",\n          avgRuntime: 452\n        }, {\n          machineId: \"MRI_002\",\n          avgRuntime: 387\n        }, {\n          machineId: \"MRI_003\",\n          avgRuntime: 521\n        }, {\n          machineId: \"MRI_004\",\n          avgRuntime: 312\n        }]);\n        setDataStatus(prev => ({\n          ...prev,\n          runtime: 'error'\n        }));\n      }\n    };\n\n    // Load all data\n    const loadAllData = async () => {\n      setLoading(true);\n      await Promise.all([fetchErrorCodeData(), fetchPredictedFailuresData(), fetchMachineRuntimeData()]);\n      setLoading(false);\n    };\n    loadAllData();\n  }, []);\n\n  // Handle API calls for button actions\n  const refreshData = () => {\n    window.location.reload();\n  };\n  const runPredictionJob = async () => {\n    try {\n      const response = await fetch('/api/run-databricks-job', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      if (!response.ok) throw new Error('Failed to trigger job');\n      const result = await response.json();\n      console.log(\"Databricks job response:\", result);\n      alert('Prediction job triggered successfully!');\n    } catch (error) {\n      console.error(\"Error triggering prediction job:\", error);\n      alert('Failed to trigger prediction job: ' + error.message);\n    }\n  };\n  const sendMaintenanceAlert = async () => {\n    const email = prompt('Enter email address for maintenance alert:');\n    if (!email) return;\n    try {\n      const response = await fetch('/api/send-maintenance-alert', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          toEmail: email\n        })\n      });\n      if (!response.ok) throw new Error('Failed to send email');\n      const result = await response.json();\n      console.log(\"Email response:\", result);\n      alert('Maintenance alert sent successfully!');\n    } catch (error) {\n      console.error(\"Error sending email:\", error);\n      alert('Failed to send email: ' + error.message);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"p-6 max-w-6xl mx-auto\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"text-3xl font-bold mb-8\",\n      children: \"MRI Machine Analytics Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 7\n    }, this), loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-center py-8\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-lg\",\n        children: \"Loading dashboard data...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid grid-cols-1 md:grid-cols-2 gap-8 mb-8\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bg-white p-6 rounded-lg shadow-md\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"text-xl font-semibold mb-4\",\n            children: \"Most Frequent Error Codes\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 263,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"h-64\",\n            children: errorCodeData.length > 0 ? /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n              width: \"100%\",\n              height: \"100%\",\n              children: /*#__PURE__*/_jsxDEV(BarChart, {\n                data: errorCodeData,\n                margin: {\n                  top: 5,\n                  right: 30,\n                  left: 20,\n                  bottom: 5\n                },\n                children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n                  strokeDasharray: \"3 3\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 268,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n                  dataKey: \"errorCode\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 269,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 270,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 271,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 272,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(Bar, {\n                  dataKey: \"count\",\n                  fill: \"#8884d8\",\n                  name: \"Frequency\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 273,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 267,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 266,\n              columnNumber: 19\n            }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"flex items-center justify-center h-full\",\n              children: /*#__PURE__*/_jsxDEV(\"p\", {\n                children: \"No error code data available\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 278,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 277,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 264,\n            columnNumber: 15\n          }, this), dataStatus.errorCodes === 'fallback' && /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"text-sm text-gray-500 mt-2\",\n            children: \"Using sample data - API data unavailable\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 283,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 262,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bg-white p-6 rounded-lg shadow-md\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"text-xl font-semibold mb-4\",\n            children: \"Predicted Failures by Machine\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 289,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"h-64\",\n            children: predictedFailuresData.length > 0 ? /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n              width: \"100%\",\n              height: \"100%\",\n              children: /*#__PURE__*/_jsxDEV(PieChart, {\n                children: [/*#__PURE__*/_jsxDEV(Pie, {\n                  data: predictedFailuresData,\n                  cx: \"50%\",\n                  cy: \"50%\",\n                  labelLine: false,\n                  outerRadius: 80,\n                  fill: \"#8884d8\",\n                  dataKey: \"value\",\n                  nameKey: \"name\",\n                  label: ({\n                    name,\n                    percent\n                  }) => `${name}: ${(percent * 100).toFixed(0)}%`,\n                  children: predictedFailuresData.map((entry, index) => /*#__PURE__*/_jsxDEV(Cell, {\n                    fill: COLORS[index % COLORS.length]\n                  }, `cell-${index}`, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 306,\n                    columnNumber: 27\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 294,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 309,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 310,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 293,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 292,\n              columnNumber: 19\n            }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"flex items-center justify-center h-full\",\n              children: /*#__PURE__*/_jsxDEV(\"p\", {\n                children: \"No prediction data available\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 315,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 314,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 290,\n            columnNumber: 15\n          }, this), dataStatus.predictions === 'fallback' && /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"text-sm text-gray-500 mt-2\",\n            children: \"Using sample data - API data unavailable\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 320,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 288,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-white p-6 rounded-lg shadow-md mb-8\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"text-xl font-semibold mb-4\",\n          children: \"Average Runtime of Machines\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 327,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"h-64\",\n          children: machineRuntimeData.length > 0 ? /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n            width: \"100%\",\n            height: \"100%\",\n            children: /*#__PURE__*/_jsxDEV(BarChart, {\n              data: machineRuntimeData,\n              margin: {\n                top: 5,\n                right: 30,\n                left: 20,\n                bottom: 5\n              },\n              children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n                strokeDasharray: \"3 3\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 332,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n                dataKey: \"machineId\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 333,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n                label: {\n                  value: 'Runtime (seconds)',\n                  angle: -90,\n                  position: 'insideLeft'\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 334,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n                formatter: value => [`${value.toFixed(1)} seconds`, 'Avg Runtime']\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 335,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 336,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(Bar, {\n                dataKey: \"avgRuntime\",\n                fill: \"#82ca9d\",\n                name: \"Average Runtime (seconds)\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 337,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 331,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 330,\n            columnNumber: 17\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex items-center justify-center h-full\",\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"No runtime data available\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 342,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 341,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 328,\n          columnNumber: 13\n        }, this), dataStatus.runtime === 'fallback' && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-sm text-gray-500 mt-2\",\n          children: \"Using sample data - API data unavailable\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 347,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 326,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-white p-6 rounded-lg shadow-md\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"text-xl font-semibold mb-4\",\n          children: \"Dashboard Controls\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 353,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex flex-wrap gap-4\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"bg-black hover:bg-gray-800 text-white py-2 px-4 rounded-md\",\n            onClick: refreshData,\n            children: \"Refresh Data\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 355,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"bg-black hover:bg-gray-800 text-white py-2 px-4 rounded-md\",\n            onClick: runPredictionJob,\n            children: \"Run Prediction Job\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 361,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"bg-black hover:bg-gray-800 text-white py-2 px-4 rounded-md\",\n            onClick: sendMaintenanceAlert,\n            children: \"Send Maintenance Alert\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 367,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 354,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 352,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 251,\n    columnNumber: 5\n  }, this);\n}\n_s(Visualization, \"cgsSlsCd2Bu8NWRTE1B8aE0gi6Y=\");\n_c = Visualization;\nvar _c;\n$RefreshReg$(_c, \"Visualization\");","map":{"version":3,"names":["React","useState","useEffect","BarChart","Bar","PieChart","Pie","XAxis","YAxis","CartesianGrid","Tooltip","Legend","ResponsiveContainer","Cell","jsxDEV","_jsxDEV","Fragment","_Fragment","COLORS","Visualization","_s","errorCodeData","setErrorCodeData","predictedFailuresData","setPredictedFailuresData","machineRuntimeData","setMachineRuntimeData","loading","setLoading","dataStatus","setDataStatus","errorCodes","predictions","runtime","fetchErrorCodeData","response","fetch","method","headers","body","JSON","stringify","keyword","ok","Error","result","json","console","log","data","length","errorCodeCounts","slice","forEach","row","Data","VarCharValue","errorCode","processedData","Object","entries","map","code","count","sort","a","b","prev","error","fetchPredictedFailuresData","machineFailureCounts","item","machineId","machine_id","machine","value","name","fetchMachineRuntimeData","machineRuntimes","runtimeCounts","machine_runtime","parseInt","isNaN","totalRuntime","avgRuntime","loadAllData","Promise","all","refreshData","window","location","reload","runPredictionJob","alert","message","sendMaintenanceAlert","email","prompt","toEmail","className","children","fileName","_jsxFileName","lineNumber","columnNumber","width","height","margin","top","right","left","bottom","strokeDasharray","dataKey","fill","cx","cy","labelLine","outerRadius","nameKey","label","percent","toFixed","entry","index","angle","position","formatter","onClick","_c","$RefreshReg$"],"sources":["/Users/seshasayeebalaji/Desktop/aws_proj/src/components/Visualization.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { \n  BarChart, Bar, PieChart, Pie, \n  XAxis, YAxis, CartesianGrid, Tooltip, Legend, \n  ResponsiveContainer, Cell\n} from 'recharts';\n\n// Custom colors for charts\nconst COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#8884d8', '#82ca9d'];\n\nexport default function Visualization() {\n  // State for each data type\n  const [errorCodeData, setErrorCodeData] = useState([]);\n  const [predictedFailuresData, setPredictedFailuresData] = useState([]);\n  const [machineRuntimeData, setMachineRuntimeData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [dataStatus, setDataStatus] = useState({\n    errorCodes: 'loading',\n    predictions: 'loading',\n    runtime: 'loading'\n  });\n\n  useEffect(() => {\n    // Function to fetch error code data\n    const fetchErrorCodeData = async () => {\n      try {\n        const response = await fetch('/api/search-athena', {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({ keyword: 'Error' })\n        });\n        \n        if (!response.ok) throw new Error('Failed to fetch error codes');\n        \n        const result = await response.json();\n        console.log(\"Error code API response:\", result);\n        \n        // Process the API response\n        if (result.data && result.data.length > 1) {\n          const errorCodeCounts = {};\n          \n          // Skip the first row which is typically headers\n          result.data.slice(1).forEach(row => {\n            if (row.Data && row.Data[2] && row.Data[2].VarCharValue) {\n              const errorCode = row.Data[2].VarCharValue;\n              errorCodeCounts[errorCode] = (errorCodeCounts[errorCode] || 0) + 1;\n            }\n          });\n          \n          const processedData = Object.entries(errorCodeCounts)\n            .map(([code, count]) => ({ errorCode: code, count }))\n            .sort((a, b) => b.count - a.count)\n            .slice(0, 10);\n          \n          console.log(\"Processed error code data:\", processedData);\n          setErrorCodeData(processedData);\n          setDataStatus(prev => ({ ...prev, errorCodes: 'loaded' }));\n        } else {\n          // Fallback to sample data\n          console.log(\"No error code data found, using defaults\");\n          setErrorCodeData([\n            { errorCode: \"E123\", count: 42 },\n            { errorCode: \"E045\", count: 38 },\n            { errorCode: \"E211\", count: 27 },\n            { errorCode: \"E078\", count: 19 },\n            { errorCode: \"E156\", count: 15 }\n          ]);\n          setDataStatus(prev => ({ ...prev, errorCodes: 'fallback' }));\n        }\n      } catch (error) {\n        console.error(\"Error fetching error codes:\", error);\n        setErrorCodeData([\n          { errorCode: \"E123\", count: 42 },\n          { errorCode: \"E045\", count: 38 },\n          { errorCode: \"E211\", count: 27 },\n          { errorCode: \"E078\", count: 19 },\n          { errorCode: \"E156\", count: 15 }\n        ]);\n        setDataStatus(prev => ({ ...prev, errorCodes: 'error' }));\n      }\n    };\n\n    // Function to fetch predicted failures data\n    const fetchPredictedFailuresData = async () => {\n      try {\n        const response = await fetch('/api/latest-predictions');\n        if (!response.ok) throw new Error('Failed to fetch predictions');\n        \n        const result = await response.json();\n        console.log(\"Predictions API response:\", result);\n        \n        if (result.data && result.data.length > 0) {\n          const machineFailureCounts = {};\n          \n          result.data.forEach(item => {\n            const machineId = item.machine_id;\n            if (machineId) {\n              machineFailureCounts[machineId] = (machineFailureCounts[machineId] || 0) + 1;\n            }\n          });\n          \n          const processedData = Object.entries(machineFailureCounts)\n            .map(([machine, value]) => ({ name: machine, value }));\n          \n          console.log(\"Processed predictions data:\", processedData);\n          setPredictedFailuresData(processedData);\n          setDataStatus(prev => ({ ...prev, predictions: 'loaded' }));\n        } else {\n          console.log(\"No predictions data found, using defaults\");\n          setPredictedFailuresData([\n            { name: \"MRI_001\", value: 12 },\n            { name: \"MRI_002\", value: 8 },\n            { name: \"MRI_003\", value: 5 },\n            { name: \"MRI_004\", value: 3 }\n          ]);\n          setDataStatus(prev => ({ ...prev, predictions: 'fallback' }));\n        }\n      } catch (error) {\n        console.error(\"Error fetching predictions:\", error);\n        setPredictedFailuresData([\n          { name: \"MRI_001\", value: 12 },\n          { name: \"MRI_002\", value: 8 },\n          { name: \"MRI_003\", value: 5 },\n          { name: \"MRI_004\", value: 3 }\n        ]);\n        setDataStatus(prev => ({ ...prev, predictions: 'error' }));\n      }\n    };\n\n    // Function to fetch machine runtime data\n    const fetchMachineRuntimeData = async () => {\n      try {\n        const response = await fetch('/api/latest-s3-log');\n        if (!response.ok) throw new Error('Failed to fetch runtime data');\n        \n        const result = await response.json();\n        console.log(\"Runtime API response:\", result);\n        \n        if (result.data && result.data.length > 0) {\n          const machineRuntimes = {};\n          const runtimeCounts = {};\n          \n          result.data.forEach(item => {\n            if (item.machine_id && item.machine_runtime) {\n              const machineId = item.machine_id;\n              const runtime = parseInt(item.machine_runtime, 10);\n              \n              if (!isNaN(runtime)) {\n                if (!machineRuntimes[machineId]) {\n                  machineRuntimes[machineId] = 0;\n                  runtimeCounts[machineId] = 0;\n                }\n                machineRuntimes[machineId] += runtime;\n                runtimeCounts[machineId]++;\n              }\n            }\n          });\n          \n          const processedData = Object.entries(machineRuntimes)\n            .map(([machine, totalRuntime]) => ({\n              machineId: machine,\n              avgRuntime: totalRuntime / (runtimeCounts[machine] || 1)\n            }));\n          \n          console.log(\"Processed runtime data:\", processedData);\n          setMachineRuntimeData(processedData);\n          setDataStatus(prev => ({ ...prev, runtime: 'loaded' }));\n        } else {\n          console.log(\"No runtime data found, using defaults\");\n          setMachineRuntimeData([\n            { machineId: \"MRI_001\", avgRuntime: 452 },\n            { machineId: \"MRI_002\", avgRuntime: 387 },\n            { machineId: \"MRI_003\", avgRuntime: 521 },\n            { machineId: \"MRI_004\", avgRuntime: 312 }\n          ]);\n          setDataStatus(prev => ({ ...prev, runtime: 'fallback' }));\n        }\n      } catch (error) {\n        console.error(\"Error fetching runtime data:\", error);\n        setMachineRuntimeData([\n          { machineId: \"MRI_001\", avgRuntime: 452 },\n          { machineId: \"MRI_002\", avgRuntime: 387 },\n          { machineId: \"MRI_003\", avgRuntime: 521 },\n          { machineId: \"MRI_004\", avgRuntime: 312 }\n        ]);\n        setDataStatus(prev => ({ ...prev, runtime: 'error' }));\n      }\n    };\n\n    // Load all data\n    const loadAllData = async () => {\n      setLoading(true);\n      await Promise.all([\n        fetchErrorCodeData(),\n        fetchPredictedFailuresData(),\n        fetchMachineRuntimeData()\n      ]);\n      setLoading(false);\n    };\n\n    loadAllData();\n  }, []);\n\n  // Handle API calls for button actions\n  const refreshData = () => {\n    window.location.reload();\n  };\n\n  const runPredictionJob = async () => {\n    try {\n      const response = await fetch('/api/run-databricks-job', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' }\n      });\n      \n      if (!response.ok) throw new Error('Failed to trigger job');\n      \n      const result = await response.json();\n      console.log(\"Databricks job response:\", result);\n      alert('Prediction job triggered successfully!');\n    } catch (error) {\n      console.error(\"Error triggering prediction job:\", error);\n      alert('Failed to trigger prediction job: ' + error.message);\n    }\n  };\n\n  const sendMaintenanceAlert = async () => {\n    const email = prompt('Enter email address for maintenance alert:');\n    \n    if (!email) return;\n    \n    try {\n      const response = await fetch('/api/send-maintenance-alert', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ toEmail: email })\n      });\n      \n      if (!response.ok) throw new Error('Failed to send email');\n      \n      const result = await response.json();\n      console.log(\"Email response:\", result);\n      alert('Maintenance alert sent successfully!');\n    } catch (error) {\n      console.error(\"Error sending email:\", error);\n      alert('Failed to send email: ' + error.message);\n    }\n  };\n\n  return (\n    <div className=\"p-6 max-w-6xl mx-auto\">\n      <h1 className=\"text-3xl font-bold mb-8\">MRI Machine Analytics Dashboard</h1>\n      \n      {loading ? (\n        <div className=\"text-center py-8\">\n          <p className=\"text-lg\">Loading dashboard data...</p>\n        </div>\n      ) : (\n        <>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8 mb-8\">\n            {/* Error Codes Bar Chart */}\n            <div className=\"bg-white p-6 rounded-lg shadow-md\">\n              <h2 className=\"text-xl font-semibold mb-4\">Most Frequent Error Codes</h2>\n              <div className=\"h-64\">\n                {errorCodeData.length > 0 ? (\n                  <ResponsiveContainer width=\"100%\" height=\"100%\">\n                    <BarChart data={errorCodeData} margin={{ top: 5, right: 30, left: 20, bottom: 5 }}>\n                      <CartesianGrid strokeDasharray=\"3 3\" />\n                      <XAxis dataKey=\"errorCode\" />\n                      <YAxis />\n                      <Tooltip />\n                      <Legend />\n                      <Bar dataKey=\"count\" fill=\"#8884d8\" name=\"Frequency\" />\n                    </BarChart>\n                  </ResponsiveContainer>\n                ) : (\n                  <div className=\"flex items-center justify-center h-full\">\n                    <p>No error code data available</p>\n                  </div>\n                )}\n              </div>\n              {dataStatus.errorCodes === 'fallback' && (\n                <p className=\"text-sm text-gray-500 mt-2\">Using sample data - API data unavailable</p>\n              )}\n            </div>\n            \n            {/* Predicted Failures Pie Chart */}\n            <div className=\"bg-white p-6 rounded-lg shadow-md\">\n              <h2 className=\"text-xl font-semibold mb-4\">Predicted Failures by Machine</h2>\n              <div className=\"h-64\">\n                {predictedFailuresData.length > 0 ? (\n                  <ResponsiveContainer width=\"100%\" height=\"100%\">\n                    <PieChart>\n                      <Pie\n                        data={predictedFailuresData}\n                        cx=\"50%\"\n                        cy=\"50%\"\n                        labelLine={false}\n                        outerRadius={80}\n                        fill=\"#8884d8\"\n                        dataKey=\"value\"\n                        nameKey=\"name\"\n                        label={({ name, percent }) => `${name}: ${(percent * 100).toFixed(0)}%`}\n                      >\n                        {predictedFailuresData.map((entry, index) => (\n                          <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\n                        ))}\n                      </Pie>\n                      <Tooltip />\n                      <Legend />\n                    </PieChart>\n                  </ResponsiveContainer>\n                ) : (\n                  <div className=\"flex items-center justify-center h-full\">\n                    <p>No prediction data available</p>\n                  </div>\n                )}\n              </div>\n              {dataStatus.predictions === 'fallback' && (\n                <p className=\"text-sm text-gray-500 mt-2\">Using sample data - API data unavailable</p>\n              )}\n            </div>\n          </div>\n          \n          {/* Machine Runtime Bar Chart */}\n          <div className=\"bg-white p-6 rounded-lg shadow-md mb-8\">\n            <h2 className=\"text-xl font-semibold mb-4\">Average Runtime of Machines</h2>\n            <div className=\"h-64\">\n              {machineRuntimeData.length > 0 ? (\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <BarChart data={machineRuntimeData} margin={{ top: 5, right: 30, left: 20, bottom: 5 }}>\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis dataKey=\"machineId\" />\n                    <YAxis label={{ value: 'Runtime (seconds)', angle: -90, position: 'insideLeft' }} />\n                    <Tooltip formatter={(value) => [`${value.toFixed(1)} seconds`, 'Avg Runtime']} />\n                    <Legend />\n                    <Bar dataKey=\"avgRuntime\" fill=\"#82ca9d\" name=\"Average Runtime (seconds)\" />\n                  </BarChart>\n                </ResponsiveContainer>\n              ) : (\n                <div className=\"flex items-center justify-center h-full\">\n                  <p>No runtime data available</p>\n                </div>\n              )}\n            </div>\n            {dataStatus.runtime === 'fallback' && (\n              <p className=\"text-sm text-gray-500 mt-2\">Using sample data - API data unavailable</p>\n            )}\n          </div>\n          \n          {/* Dashboard Controls */}\n          <div className=\"bg-white p-6 rounded-lg shadow-md\">\n            <h2 className=\"text-xl font-semibold mb-4\">Dashboard Controls</h2>\n            <div className=\"flex flex-wrap gap-4\">\n              <button \n                className=\"bg-black hover:bg-gray-800 text-white py-2 px-4 rounded-md\"\n                onClick={refreshData}\n              >\n                Refresh Data\n              </button>\n              <button \n                className=\"bg-black hover:bg-gray-800 text-white py-2 px-4 rounded-md\"\n                onClick={runPredictionJob}\n              >\n                Run Prediction Job\n              </button>\n              <button \n                className=\"bg-black hover:bg-gray-800 text-white py-2 px-4 rounded-md\"\n                onClick={sendMaintenanceAlert}\n              >\n                Send Maintenance Alert\n              </button>\n            </div>\n          </div>\n        </>\n      )}\n    </div>\n  );\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}