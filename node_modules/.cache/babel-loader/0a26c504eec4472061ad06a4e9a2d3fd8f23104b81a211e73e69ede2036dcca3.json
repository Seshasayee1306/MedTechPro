{"ast":null,"code":"var _jsxFileName = \"/Users/seshasayeebalaji/Desktop/aws_proj/src/components/Visualization.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { BarChart, Bar, PieChart, Pie, LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, Cell } from 'recharts';\n\n// Sample data for fallback/loading states\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst sampleErrorCodeData = [{\n  errorCode: \"E123\",\n  count: 42\n}, {\n  errorCode: \"E045\",\n  count: 38\n}, {\n  errorCode: \"E211\",\n  count: 27\n}, {\n  errorCode: \"E078\",\n  count: 19\n}, {\n  errorCode: \"E156\",\n  count: 15\n}];\nconst samplePredictedFailures = [{\n  name: \"MRI_001\",\n  value: 12\n}, {\n  name: \"MRI_002\",\n  value: 8\n}, {\n  name: \"MRI_003\",\n  value: 5\n}, {\n  name: \"MRI_004\",\n  value: 3\n}];\nconst sampleMachineRuntime = [{\n  machineId: \"MRI_001\",\n  avgRuntime: 452\n}, {\n  machineId: \"MRI_002\",\n  avgRuntime: 387\n}, {\n  machineId: \"MRI_003\",\n  avgRuntime: 521\n}, {\n  machineId: \"MRI_004\",\n  avgRuntime: 312\n}];\n\n// Custom colors for charts\nconst COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#8884d8', '#82ca9d', '#ffc658', '#ff7300'];\nexport default function MRIVisualizationDashboard() {\n  _s();\n  // State for storing data\n  const [errorCodeData, setErrorCodeData] = useState(sampleErrorCodeData);\n  const [predictedFailuresData, setPredictedFailuresData] = useState(samplePredictedFailures);\n  const [machineRuntimeData, setMachineRuntimeData] = useState(sampleMachineRuntime);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [dataStatus, setDataStatus] = useState({\n    errorCodes: 'loading',\n    predictions: 'loading',\n    runtime: 'loading'\n  });\n\n  // Fetch data from backend\n  const fetchErrorCodeData = async () => {\n    try {\n      const response = await fetch('/api/search-athena', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          keyword: 'Error'\n        })\n      });\n      if (!response.ok) throw new Error('Failed to fetch error codes');\n      const result = await response.json();\n      if (result.data && result.data.length > 1) {\n        const errorCodeCounts = {};\n        result.data.slice(1).forEach(row => {\n          if (row.Data && row.Data[2] && row.Data[2].VarCharValue) {\n            const errorCode = row.Data[2].VarCharValue;\n            errorCodeCounts[errorCode] = (errorCodeCounts[errorCode] || 0) + 1;\n          }\n        });\n        const processedData = Object.entries(errorCodeCounts).map(([code, count]) => ({\n          errorCode: code,\n          count\n        })).sort((a, b) => b.count - a.count).slice(0, 10);\n        if (processedData.length > 0) {\n          setErrorCodeData(processedData);\n          setDataStatus(prev => ({\n            ...prev,\n            errorCodes: 'loaded'\n          }));\n          return true;\n        } else {\n          console.warn(\"No error code data found.\");\n          setDataStatus(prev => ({\n            ...prev,\n            errorCodes: 'no-data'\n          }));\n          return false;\n        }\n      }\n    } catch (error) {\n      console.error(\"Error fetching error codes:\", error);\n      setDataStatus(prev => ({\n        ...prev,\n        errorCodes: 'error'\n      }));\n      setError('Failed to load error code data');\n      return false;\n    }\n  };\n  const fetchPredictedFailuresData = async () => {\n    try {\n      const response = await fetch('/api/latest-predictions');\n      if (!response.ok) throw new Error('Failed to fetch predictions');\n      const result = await response.json();\n      if (result.data && Array.isArray(result.data) && result.data.length > 0) {\n        const machineFailureCounts = {};\n        result.data.forEach(item => {\n          const machineId = item.machine_id;\n          if (machineId) {\n            machineFailureCounts[machineId] = (machineFailureCounts[machineId] || 0) + 1;\n          }\n        });\n        const processedData = Object.entries(machineFailureCounts).map(([machine, value]) => ({\n          name: machine,\n          value\n        }));\n        if (processedData.length > 0) {\n          setPredictedFailuresData(processedData);\n          setDataStatus(prev => ({\n            ...prev,\n            predictions: 'loaded'\n          }));\n          return true;\n        } else {\n          console.warn(\"No predicted failures data found.\");\n          setDataStatus(prev => ({\n            ...prev,\n            predictions: 'no-data'\n          }));\n          return false;\n        }\n      }\n    } catch (error) {\n      console.error(\"Error fetching predictions:\", error);\n      setDataStatus(prev => ({\n        ...prev,\n        predictions: 'error'\n      }));\n      setError('Failed to load prediction data');\n      return false;\n    }\n  };\n  const fetchMachineRuntimeData = async () => {\n    try {\n      const response = await fetch('/api/latest-s3-log');\n      if (!response.ok) throw new Error('Failed to fetch runtime data');\n      const result = await response.json();\n      if (result.data && Array.isArray(result.data)) {\n        const machineRuntimes = {};\n        const runtimeCounts = {};\n        result.data.forEach(item => {\n          if (item.machine_id && item.machine_runtime) {\n            const machineId = item.machine_id;\n            const runtime = parseInt(item.machine_runtime, 10);\n            if (!isNaN(runtime)) {\n              if (!machineRuntimes[machineId]) {\n                machineRuntimes[machineId] = 0;\n                runtimeCounts[machineId] = 0;\n              }\n              machineRuntimes[machineId] += runtime;\n              runtimeCounts[machineId]++;\n            }\n          }\n        });\n        const processedData = Object.entries(machineRuntimes).map(([machine, totalRuntime]) => ({\n          machineId: machine,\n          avgRuntime: Math.round(totalRuntime / (runtimeCounts[machine] || 1))\n        }));\n        if (processedData.length > 0) {\n          setMachineRuntimeData(processedData);\n          setDataStatus(prev => ({\n            ...prev,\n            runtime: 'loaded'\n          }));\n          return true;\n        } else {\n          console.warn(\"No machine runtime data found.\");\n          setDataStatus(prev => ({\n            ...prev,\n            runtime: 'no-data'\n          }));\n          return false;\n        }\n      }\n    } catch (error) {\n      console.error(\"Error fetching runtime data:\", error);\n      setDataStatus(prev => ({\n        ...prev,\n        runtime: 'error'\n      }));\n      setError('Failed to load runtime data');\n      return false;\n    }\n  };\n\n  // Load all data\n  useEffect(() => {\n    const loadAllData = async () => {\n      setLoading(true);\n      setError(null);\n      try {\n        await Promise.all([fetchErrorCodeData(), fetchPredictedFailuresData(), fetchMachineRuntimeData()]);\n      } catch (err) {\n        console.error('Error loading data:', err);\n        setError('Failed to load dashboard data');\n      } finally {\n        setLoading(false);\n      }\n    };\n    loadAllData();\n  }, []);\n\n  // Refresh data function\n  const refreshData = () => {\n    setLoading(true);\n    setError(null);\n    setDataStatus({\n      errorCodes: 'loading',\n      predictions: 'loading',\n      runtime: 'loading'\n    });\n    Promise.all([fetchErrorCodeData(), fetchPredictedFailuresData(), fetchMachineRuntimeData()]).finally(() => setLoading(false));\n  };\n\n  // Custom tooltip for pie chart\n  const CustomTooltip = ({\n    active,\n    payload\n  }) => {\n    if (active && payload && payload.length) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-white p-2 border border-gray-200 shadow-md rounded-md\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"font-bold\",\n          children: `${payload[0].name}: ${payload[0].value}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: `${(payload[0].percent * 100).toFixed(2)}% of predictions`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 9\n      }, this);\n    }\n    return null;\n  };\n\n  // Data status indicators\n  const getStatusIndicator = status => {\n    switch (status) {\n      case 'loaded':\n        return 'ðŸŸ¢ Live data';\n      case 'loading':\n        return 'ðŸŸ¡ Loading...';\n      case 'no-data':\n        return 'ðŸŸ  No data available';\n      case 'error':\n        return 'ðŸ”´ Error loading';\n      default:\n        return 'âšª Unknown status';\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"p-6 max-w-6xl mx-auto\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"text-3xl font-bold mb-8 text-center\",\n      children: \"MRI Machine Analytics Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-6 space-y-2\",\n      children: [error && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-red-50 p-4 rounded-lg border border-red-200 text-red-700\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"font-bold\",\n          children: \"Error:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 251,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 252,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex flex-wrap gap-4 text-sm\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: [\"Error Codes: \", getStatusIndicator(dataStatus.errorCodes)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 257,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [\"Predictions: \", getStatusIndicator(dataStatus.predictions)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 258,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [\"Runtime Data: \", getStatusIndicator(dataStatus.runtime)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 259,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex flex-wrap gap-4 mb-8\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: refreshData,\n        disabled: loading,\n        className: `px-4 py-2 rounded-md font-medium ${loading ? 'bg-gray-400' : 'bg-violet-600 hover:bg-violet-700'} text-white shadow`,\n        children: loading ? 'Refreshing...' : 'Refresh Data'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"bg-black hover:bg-gray-800 text-white py-2 px-4 rounded-md\",\n        onClick: async () => {\n          try {\n            await fetch('/api/run-databricks-job', {\n              method: 'POST',\n              headers: {\n                'Content-Type': 'application/json'\n              }\n            });\n            alert('Databricks job triggered successfully!');\n          } catch (err) {\n            alert('Failed to trigger Databricks job: ' + err.message);\n          }\n        },\n        children: \"Run Prediction Job\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 273,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"bg-black hover:bg-gray-800 text-white py-2 px-4 rounded-md\",\n        onClick: async () => {\n          try {\n            const email = prompt('Enter email address for maintenance alert:');\n            if (email) {\n              await fetch('/api/send-maintenance-email', {\n                method: 'POST',\n                headers: {\n                  'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                  toEmail: email\n                })\n              });\n              alert('Maintenance email sent successfully!');\n            }\n          } catch (err) {\n            alert('Failed to send email: ' + err.message);\n          }\n        },\n        children: \"Send Maintenance Alert\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 290,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 264,\n      columnNumber: 7\n    }, this), loading && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-center py-8 text-gray-600\",\n      children: \"Loading dashboard data, please wait...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 313,\n      columnNumber: 9\n    }, this), !loading && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid grid-cols-1 md:grid-cols-2 gap-8 mb-8\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-white p-6 rounded-lg shadow-md\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"text-xl font-semibold mb-4\",\n          children: \"Most Frequent Error Codes\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 323,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"h-64\",\n          children: /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n            width: \"100%\",\n            height: \"100%\",\n            children: /*#__PURE__*/_jsxDEV(BarChart, {\n              data: errorCodeData,\n              margin: {\n                top: 5,\n                right: 30,\n                left: 20,\n                bottom: 5\n              },\n              children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n                strokeDasharray: \"3 3\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 330,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n                dataKey: \"errorCode\",\n                label: {\n                  value: 'Error Code',\n                  position: 'insideBottom',\n                  offset: -5\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 331,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n                label: {\n                  value: 'Count',\n                  angle: -90,\n                  position: 'insideLeft'\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 335,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 338,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 339,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Bar, {\n                dataKey: \"count\",\n                fill: \"#8884d8\",\n                name: \"Occurrences\",\n                animationDuration: 1500\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 340,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 326,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 325,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 324,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 322,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-white p-6 rounded-lg shadow-md\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"text-xl font-semibold mb-4\",\n          children: \"Predicted Failures by Machine\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 353,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"h-64\",\n          children: /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n            width: \"100%\",\n            height: \"100%\",\n            children: /*#__PURE__*/_jsxDEV(PieChart, {\n              children: [/*#__PURE__*/_jsxDEV(Pie, {\n                data: predictedFailuresData,\n                cx: \"50%\",\n                cy: \"50%\",\n                labelLine: false,\n                outerRadius: 80,\n                fill: \"#8884d8\",\n                dataKey: \"value\",\n                nameKey: \"name\",\n                label: ({\n                  name,\n                  percent\n                }) => `${name}: ${(percent * 100).toFixed(0)}%`,\n                animationDuration: 1500,\n                children: predictedFailuresData.map((entry, index) => /*#__PURE__*/_jsxDEV(Cell, {\n                  fill: COLORS[index % COLORS.length]\n                }, `cell-${index}`, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 370,\n                  columnNumber: 23\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 357,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n                content: /*#__PURE__*/_jsxDEV(CustomTooltip, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 373,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 373,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 374,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 356,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 355,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 354,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 352,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-white p-6 rounded-lg shadow-md md:col-span-2\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"text-xl font-semibold mb-4\",\n          children: \"Average Runtime of Machines\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 382,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"h-64\",\n          children: /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n            width: \"100%\",\n            height: \"100%\",\n            children: /*#__PURE__*/_jsxDEV(BarChart, {\n              data: machineRuntimeData,\n              margin: {\n                top: 5,\n                right: 30,\n                left: 20,\n                bottom: 5\n              },\n              children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n                strokeDasharray: \"3 3\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 389,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n                dataKey: \"machineId\",\n                label: {\n                  value: 'Machine ID',\n                  position: 'insideBottom',\n                  offset: -5\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 390,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n                label: {\n                  value: 'Runtime (seconds)',\n                  angle: -90,\n                  position: 'insideLeft'\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 394,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n                formatter: value => [`${value} seconds`, 'Avg Runtime']\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 397,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 400,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Bar, {\n                dataKey: \"avgRuntime\",\n                fill: \"#82ca9d\",\n                name: \"Average Runtime (seconds)\",\n                animationDuration: 1500\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 401,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 385,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 384,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 383,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 381,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 320,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 244,\n    columnNumber: 5\n  }, this);\n}\n_s(MRIVisualizationDashboard, \"mCMNvFiZtE5KKmT0AFIoD0qWwTM=\");\n_c = MRIVisualizationDashboard;\nvar _c;\n$RefreshReg$(_c, \"MRIVisualizationDashboard\");","map":{"version":3,"names":["React","useState","useEffect","BarChart","Bar","PieChart","Pie","LineChart","Line","XAxis","YAxis","CartesianGrid","Tooltip","Legend","ResponsiveContainer","Cell","jsxDEV","_jsxDEV","sampleErrorCodeData","errorCode","count","samplePredictedFailures","name","value","sampleMachineRuntime","machineId","avgRuntime","COLORS","MRIVisualizationDashboard","_s","errorCodeData","setErrorCodeData","predictedFailuresData","setPredictedFailuresData","machineRuntimeData","setMachineRuntimeData","loading","setLoading","error","setError","dataStatus","setDataStatus","errorCodes","predictions","runtime","fetchErrorCodeData","response","fetch","method","headers","body","JSON","stringify","keyword","ok","Error","result","json","data","length","errorCodeCounts","slice","forEach","row","Data","VarCharValue","processedData","Object","entries","map","code","sort","a","b","prev","console","warn","fetchPredictedFailuresData","Array","isArray","machineFailureCounts","item","machine_id","machine","fetchMachineRuntimeData","machineRuntimes","runtimeCounts","machine_runtime","parseInt","isNaN","totalRuntime","Math","round","loadAllData","Promise","all","err","refreshData","finally","CustomTooltip","active","payload","className","children","fileName","_jsxFileName","lineNumber","columnNumber","percent","toFixed","getStatusIndicator","status","onClick","disabled","alert","message","email","prompt","toEmail","width","height","margin","top","right","left","bottom","strokeDasharray","dataKey","label","position","offset","angle","fill","animationDuration","cx","cy","labelLine","outerRadius","nameKey","entry","index","content","formatter","_c","$RefreshReg$"],"sources":["/Users/seshasayeebalaji/Desktop/aws_proj/src/components/Visualization.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { \n  BarChart, Bar, PieChart, Pie, LineChart, Line, \n  XAxis, YAxis, CartesianGrid, Tooltip, Legend, \n  ResponsiveContainer, Cell\n} from 'recharts';\n\n// Sample data for fallback/loading states\nconst sampleErrorCodeData = [\n  { errorCode: \"E123\", count: 42 },\n  { errorCode: \"E045\", count: 38 },\n  { errorCode: \"E211\", count: 27 },\n  { errorCode: \"E078\", count: 19 },\n  { errorCode: \"E156\", count: 15 }\n];\n\nconst samplePredictedFailures = [\n  { name: \"MRI_001\", value: 12 },\n  { name: \"MRI_002\", value: 8 },\n  { name: \"MRI_003\", value: 5 },\n  { name: \"MRI_004\", value: 3 }\n];\n\nconst sampleMachineRuntime = [\n  { machineId: \"MRI_001\", avgRuntime: 452 },\n  { machineId: \"MRI_002\", avgRuntime: 387 },\n  { machineId: \"MRI_003\", avgRuntime: 521 },\n  { machineId: \"MRI_004\", avgRuntime: 312 }\n];\n\n// Custom colors for charts\nconst COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#8884d8', '#82ca9d', '#ffc658', '#ff7300'];\n\nexport default function MRIVisualizationDashboard() {\n  // State for storing data\n  const [errorCodeData, setErrorCodeData] = useState(sampleErrorCodeData);\n  const [predictedFailuresData, setPredictedFailuresData] = useState(samplePredictedFailures);\n  const [machineRuntimeData, setMachineRuntimeData] = useState(sampleMachineRuntime);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [dataStatus, setDataStatus] = useState({\n    errorCodes: 'loading',\n    predictions: 'loading',\n    runtime: 'loading'\n  });\n\n  // Fetch data from backend\n  const fetchErrorCodeData = async () => {\n    try {\n      const response = await fetch('/api/search-athena', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ keyword: 'Error' })\n      });\n\n      if (!response.ok) throw new Error('Failed to fetch error codes');\n      const result = await response.json();\n\n      if (result.data && result.data.length > 1) {\n        const errorCodeCounts = {};\n\n        result.data.slice(1).forEach(row => {\n          if (row.Data && row.Data[2] && row.Data[2].VarCharValue) {\n            const errorCode = row.Data[2].VarCharValue;\n            errorCodeCounts[errorCode] = (errorCodeCounts[errorCode] || 0) + 1;\n          }\n        });\n\n        const processedData = Object.entries(errorCodeCounts)\n          .map(([code, count]) => ({ errorCode: code, count }))\n          .sort((a, b) => b.count - a.count)\n          .slice(0, 10);\n\n        if (processedData.length > 0) {\n          setErrorCodeData(processedData);\n          setDataStatus(prev => ({ ...prev, errorCodes: 'loaded' }));\n          return true;\n        } else {\n          console.warn(\"No error code data found.\");\n          setDataStatus(prev => ({ ...prev, errorCodes: 'no-data' }));\n          return false;\n        }\n      }\n    } catch (error) {\n      console.error(\"Error fetching error codes:\", error);\n      setDataStatus(prev => ({ ...prev, errorCodes: 'error' }));\n      setError('Failed to load error code data');\n      return false;\n    }\n  };\n\n  const fetchPredictedFailuresData = async () => {\n    try {\n      const response = await fetch('/api/latest-predictions');\n      if (!response.ok) throw new Error('Failed to fetch predictions');\n      const result = await response.json();\n\n      if (result.data && Array.isArray(result.data) && result.data.length > 0) {\n        const machineFailureCounts = {};\n\n        result.data.forEach(item => {\n          const machineId = item.machine_id;\n          if (machineId) {\n            machineFailureCounts[machineId] = (machineFailureCounts[machineId] || 0) + 1;\n          }\n        });\n\n        const processedData = Object.entries(machineFailureCounts)\n          .map(([machine, value]) => ({ name: machine, value }));\n\n        if (processedData.length > 0) {\n          setPredictedFailuresData(processedData);\n          setDataStatus(prev => ({ ...prev, predictions: 'loaded' }));\n          return true;\n        } else {\n          console.warn(\"No predicted failures data found.\");\n          setDataStatus(prev => ({ ...prev, predictions: 'no-data' }));\n          return false;\n        }\n      }\n    } catch (error) {\n      console.error(\"Error fetching predictions:\", error);\n      setDataStatus(prev => ({ ...prev, predictions: 'error' }));\n      setError('Failed to load prediction data');\n      return false;\n    }\n  };\n\n  const fetchMachineRuntimeData = async () => {\n    try {\n      const response = await fetch('/api/latest-s3-log');\n      if (!response.ok) throw new Error('Failed to fetch runtime data');\n      const result = await response.json();\n\n      if (result.data && Array.isArray(result.data)) {\n        const machineRuntimes = {};\n        const runtimeCounts = {};\n\n        result.data.forEach(item => {\n          if (item.machine_id && item.machine_runtime) {\n            const machineId = item.machine_id;\n            const runtime = parseInt(item.machine_runtime, 10);\n\n            if (!isNaN(runtime)) {\n              if (!machineRuntimes[machineId]) {\n                machineRuntimes[machineId] = 0;\n                runtimeCounts[machineId] = 0;\n              }\n              machineRuntimes[machineId] += runtime;\n              runtimeCounts[machineId]++;\n            }\n          }\n        });\n\n        const processedData = Object.entries(machineRuntimes)\n          .map(([machine, totalRuntime]) => ({\n            machineId: machine,\n            avgRuntime: Math.round(totalRuntime / (runtimeCounts[machine] || 1))\n          }));\n\n        if (processedData.length > 0) {\n          setMachineRuntimeData(processedData);\n          setDataStatus(prev => ({ ...prev, runtime: 'loaded' }));\n          return true;\n        } else {\n          console.warn(\"No machine runtime data found.\");\n          setDataStatus(prev => ({ ...prev, runtime: 'no-data' }));\n          return false;\n        }\n      }\n    } catch (error) {\n      console.error(\"Error fetching runtime data:\", error);\n      setDataStatus(prev => ({ ...prev, runtime: 'error' }));\n      setError('Failed to load runtime data');\n      return false;\n    }\n  };\n\n  // Load all data\n  useEffect(() => {\n    const loadAllData = async () => {\n      setLoading(true);\n      setError(null);\n      \n      try {\n        await Promise.all([\n          fetchErrorCodeData(),\n          fetchPredictedFailuresData(),\n          fetchMachineRuntimeData()\n        ]);\n      } catch (err) {\n        console.error('Error loading data:', err);\n        setError('Failed to load dashboard data');\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    loadAllData();\n  }, []);\n\n  // Refresh data function\n  const refreshData = () => {\n    setLoading(true);\n    setError(null);\n    setDataStatus({\n      errorCodes: 'loading',\n      predictions: 'loading',\n      runtime: 'loading'\n    });\n\n    Promise.all([\n      fetchErrorCodeData(),\n      fetchPredictedFailuresData(),\n      fetchMachineRuntimeData()\n    ]).finally(() => setLoading(false));\n  };\n\n  // Custom tooltip for pie chart\n  const CustomTooltip = ({ active, payload }) => {\n    if (active && payload && payload.length) {\n      return (\n        <div className=\"bg-white p-2 border border-gray-200 shadow-md rounded-md\">\n          <p className=\"font-bold\">{`${payload[0].name}: ${payload[0].value}`}</p>\n          <p>{`${(payload[0].percent * 100).toFixed(2)}% of predictions`}</p>\n        </div>\n      );\n    }\n    return null;\n  };\n\n  // Data status indicators\n  const getStatusIndicator = (status) => {\n    switch (status) {\n      case 'loaded': return 'ðŸŸ¢ Live data';\n      case 'loading': return 'ðŸŸ¡ Loading...';\n      case 'no-data': return 'ðŸŸ  No data available';\n      case 'error': return 'ðŸ”´ Error loading';\n      default: return 'âšª Unknown status';\n    }\n  };\n\n  return (\n    <div className=\"p-6 max-w-6xl mx-auto\">\n      <h1 className=\"text-3xl font-bold mb-8 text-center\">MRI Machine Analytics Dashboard</h1>\n      \n      {/* Status and Error Display */}\n      <div className=\"mb-6 space-y-2\">\n        {error && (\n          <div className=\"bg-red-50 p-4 rounded-lg border border-red-200 text-red-700\">\n            <p className=\"font-bold\">Error:</p>\n            <p>{error}</p>\n          </div>\n        )}\n        \n        <div className=\"flex flex-wrap gap-4 text-sm\">\n          <span>Error Codes: {getStatusIndicator(dataStatus.errorCodes)}</span>\n          <span>Predictions: {getStatusIndicator(dataStatus.predictions)}</span>\n          <span>Runtime Data: {getStatusIndicator(dataStatus.runtime)}</span>\n        </div>\n      </div>\n      \n      {/* Dashboard Controls */}\n      <div className=\"flex flex-wrap gap-4 mb-8\">\n        <button \n          onClick={refreshData}\n          disabled={loading}\n          className={`px-4 py-2 rounded-md font-medium ${loading ? 'bg-gray-400' : 'bg-violet-600 hover:bg-violet-700'} text-white shadow`}\n        >\n          {loading ? 'Refreshing...' : 'Refresh Data'}\n        </button>\n        \n        <button \n          className=\"bg-black hover:bg-gray-800 text-white py-2 px-4 rounded-md\"\n          onClick={async () => {\n            try {\n              await fetch('/api/run-databricks-job', {\n                method: 'POST',\n                headers: { 'Content-Type': 'application/json' }\n              });\n              alert('Databricks job triggered successfully!');\n            } catch (err) {\n              alert('Failed to trigger Databricks job: ' + err.message);\n            }\n          }}\n        >\n          Run Prediction Job\n        </button>\n        \n        <button \n          className=\"bg-black hover:bg-gray-800 text-white py-2 px-4 rounded-md\"\n          onClick={async () => {\n            try {\n              const email = prompt('Enter email address for maintenance alert:');\n              if (email) {\n                await fetch('/api/send-maintenance-email', {\n                  method: 'POST',\n                  headers: { 'Content-Type': 'application/json' },\n                  body: JSON.stringify({ toEmail: email })\n                });\n                alert('Maintenance email sent successfully!');\n              }\n            } catch (err) {\n              alert('Failed to send email: ' + err.message);\n            }\n          }}\n        >\n          Send Maintenance Alert\n        </button>\n      </div>\n      \n      {loading && (\n        <div className=\"text-center py-8 text-gray-600\">\n          Loading dashboard data, please wait...\n        </div>\n      )}\n      \n      {/* Charts Grid */}\n      {!loading && (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8 mb-8\">\n          {/* Error Codes Bar Chart */}\n          <div className=\"bg-white p-6 rounded-lg shadow-md\">\n            <h2 className=\"text-xl font-semibold mb-4\">Most Frequent Error Codes</h2>\n            <div className=\"h-64\">\n              <ResponsiveContainer width=\"100%\" height=\"100%\">\n                <BarChart \n                  data={errorCodeData} \n                  margin={{ top: 5, right: 30, left: 20, bottom: 5 }}\n                >\n                  <CartesianGrid strokeDasharray=\"3 3\" />\n                  <XAxis \n                    dataKey=\"errorCode\" \n                    label={{ value: 'Error Code', position: 'insideBottom', offset: -5 }}\n                  />\n                  <YAxis \n                    label={{ value: 'Count', angle: -90, position: 'insideLeft' }}\n                  />\n                  <Tooltip />\n                  <Legend />\n                  <Bar \n                    dataKey=\"count\" \n                    fill=\"#8884d8\" \n                    name=\"Occurrences\"\n                    animationDuration={1500}\n                  />\n                </BarChart>\n              </ResponsiveContainer>\n            </div>\n          </div>\n          \n          {/* Predicted Failures Pie Chart */}\n          <div className=\"bg-white p-6 rounded-lg shadow-md\">\n            <h2 className=\"text-xl font-semibold mb-4\">Predicted Failures by Machine</h2>\n            <div className=\"h-64\">\n              <ResponsiveContainer width=\"100%\" height=\"100%\">\n                <PieChart>\n                  <Pie\n                    data={predictedFailuresData}\n                    cx=\"50%\"\n                    cy=\"50%\"\n                    labelLine={false}\n                    outerRadius={80}\n                    fill=\"#8884d8\"\n                    dataKey=\"value\"\n                    nameKey=\"name\"\n                    label={({ name, percent }) => `${name}: ${(percent * 100).toFixed(0)}%`}\n                    animationDuration={1500}\n                  >\n                    {predictedFailuresData.map((entry, index) => (\n                      <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\n                    ))}\n                  </Pie>\n                  <Tooltip content={<CustomTooltip />} />\n                  <Legend />\n                </PieChart>\n              </ResponsiveContainer>\n            </div>\n          </div>\n          \n          {/* Machine Runtime Bar Chart */}\n          <div className=\"bg-white p-6 rounded-lg shadow-md md:col-span-2\">\n            <h2 className=\"text-xl font-semibold mb-4\">Average Runtime of Machines</h2>\n            <div className=\"h-64\">\n              <ResponsiveContainer width=\"100%\" height=\"100%\">\n                <BarChart \n                  data={machineRuntimeData} \n                  margin={{ top: 5, right: 30, left: 20, bottom: 5 }}\n                >\n                  <CartesianGrid strokeDasharray=\"3 3\" />\n                  <XAxis \n                    dataKey=\"machineId\" \n                    label={{ value: 'Machine ID', position: 'insideBottom', offset: -5 }}\n                  />\n                  <YAxis \n                    label={{ value: 'Runtime (seconds)', angle: -90, position: 'insideLeft' }} \n                  />\n                  <Tooltip \n                    formatter={(value) => [`${value} seconds`, 'Avg Runtime']}\n                  />\n                  <Legend />\n                  <Bar \n                    dataKey=\"avgRuntime\" \n                    fill=\"#82ca9d\" \n                    name=\"Average Runtime (seconds)\"\n                    animationDuration={1500}\n                  />\n                </BarChart>\n              </ResponsiveContainer>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}