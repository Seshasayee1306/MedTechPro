{"ast":null,"code":"var _jsxFileName = \"/Users/seshasayeebalaji/Desktop/aws_proj/src/components/Visualization.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { BarChart, Bar, PieChart, Pie, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, Cell } from 'recharts';\nimport Papa from 'papaparse';\n\n// Custom colors for charts\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#8884d8', '#82ca9d'];\n\n// Sample fallback data\nconst sampleErrorCodeData = [{\n  errorCode: \"E123\",\n  count: 42\n}, {\n  errorCode: \"E045\",\n  count: 38\n}, {\n  errorCode: \"E211\",\n  count: 27\n}, {\n  errorCode: \"E078\",\n  count: 19\n}, {\n  errorCode: \"E156\",\n  count: 15\n}];\nconst samplePredictedFailures = [{\n  name: \"MRI_001\",\n  value: 12\n}, {\n  name: \"MRI_002\",\n  value: 8\n}, {\n  name: \"MRI_003\",\n  value: 5\n}, {\n  name: \"MRI_004\",\n  value: 3\n}];\nconst sampleMachineRuntime = [{\n  machineId: \"MRI_001\",\n  avgRuntime: 452\n}, {\n  machineId: \"MRI_002\",\n  avgRuntime: 387\n}, {\n  machineId: \"MRI_003\",\n  avgRuntime: 521\n}, {\n  machineId: \"MRI_004\",\n  avgRuntime: 312\n}];\nexport default function Visualization() {\n  _s();\n  const [errorCodeData, setErrorCodeData] = useState(sampleErrorCodeData);\n  const [predictedFailuresData, setPredictedFailuresData] = useState(samplePredictedFailures);\n  const [machineRuntimeData, setMachineRuntimeData] = useState(sampleMachineRuntime);\n  const [loading, setLoading] = useState(true);\n  const [dataStatus, setDataStatus] = useState({\n    errorCodes: 'fallback',\n    predictions: 'fallback',\n    runtime: 'fallback'\n  });\n  useEffect(() => {\n    const loadAllData = async () => {\n      setLoading(true);\n      await Promise.all([fetchErrorCodeData(), fetchPredictedFailuresData(), fetchMachineRuntimeData()]);\n      setLoading(false);\n    };\n    loadAllData();\n\n    // Cleanup function for useEffect\n    return () => {\n      setLoading(false); // Ensure loading state is reset if component unmounts\n    };\n  }, []);\n  const fetchErrorCodeData = async () => {\n    try {\n      const response = await fetch('/api/search-athena', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          keyword: 'Error'\n        })\n      });\n      if (!response.ok) throw new Error('Failed to fetch error codes');\n      const result = await response.json();\n      if (result.data && result.data.length > 1) {\n        const errorCodeCounts = {};\n        result.data.slice(1).forEach(row => {\n          if (row.Data && row.Data[2] && row.Data[2].VarCharValue) {\n            const errorCode = row.Data[2].VarCharValue;\n            errorCodeCounts[errorCode] = (errorCodeCounts[errorCode] || 0) + 1;\n          }\n        });\n        const processedData = Object.entries(errorCodeCounts).map(([code, count]) => ({\n          errorCode: code,\n          count\n        })).sort((a, b) => b.count - a.count).slice(0, 10);\n        if (processedData.length > 0) {\n          setErrorCodeData(processedData);\n          setDataStatus(prev => ({\n            ...prev,\n            errorCodes: 'loaded'\n          }));\n        }\n      }\n    } catch (error) {\n      console.error(\"Error fetching error codes:\", error);\n      setDataStatus(prev => ({\n        ...prev,\n        errorCodes: 'error'\n      }));\n    }\n  };\n  const fetchPredictedFailuresData = async () => {\n    try {\n      // Fetch the CSV file from Blob Storage (ensure it's accessible via a public URL or use SAS token)\n      const response = await fetch('predicted_errors.csv/part-00000-tid-2952257645147565659-d89282ae-b6d4-4c30-b495-fa6e29f42204-11306-1-c000.csv');\n      if (!response.ok) throw new Error('Failed to fetch CSV from Blob Storage');\n      const csvText = await response.text(); // Read the CSV content\n\n      // Parse the CSV data using PapaParse\n      Papa.parse(csvText, {\n        complete: result => {\n          const data = result.data;\n          const machineFailureCounts = {};\n\n          // Assuming the CSV has 'machine_id' column to track failures\n          data.forEach(item => {\n            const machineId = item.machine_id; // Replace with the actual column name in your CSV\n            if (machineId) {\n              machineFailureCounts[machineId] = (machineFailureCounts[machineId] || 0) + 1;\n            }\n          });\n          const processedData = Object.entries(machineFailureCounts).map(([machine, value]) => ({\n            name: machine,\n            value\n          }));\n          if (processedData.length > 0) {\n            setPredictedFailuresData(processedData);\n            setDataStatus(prev => ({\n              ...prev,\n              predictions: 'loaded'\n            }));\n          } else {\n            setDataStatus(prev => ({\n              ...prev,\n              predictions: 'no-data'\n            }));\n          }\n        },\n        error: error => {\n          console.error(\"Error parsing CSV:\", error);\n          setDataStatus(prev => ({\n            ...prev,\n            predictions: 'error'\n          }));\n        }\n      });\n    } catch (error) {\n      console.error(\"Error fetching predictions:\", error);\n      setDataStatus(prev => ({\n        ...prev,\n        predictions: 'error'\n      }));\n    }\n  };\n  const fetchMachineRuntimeData = async () => {\n    try {\n      const response = await fetch('/api/latest-s3-log');\n      if (!response.ok) throw new Error('Failed to fetch runtime data');\n      const result = await response.json();\n      if (result.data && result.data.length > 0) {\n        const machineRuntimes = {};\n        const runtimeCounts = {};\n        result.data.forEach(item => {\n          if (item.machine_id && item.machine_runtime) {\n            const machineId = item.machine_id;\n            const runtime = parseInt(item.machine_runtime, 10);\n            if (!isNaN(runtime)) {\n              if (!machineRuntimes[machineId]) {\n                machineRuntimes[machineId] = 0;\n                runtimeCounts[machineId] = 0;\n              }\n              machineRuntimes[machineId] += runtime;\n              runtimeCounts[machineId]++;\n            }\n          }\n        });\n        const processedData = Object.entries(machineRuntimes).map(([machine, totalRuntime]) => ({\n          machineId: machine,\n          avgRuntime: Math.round(totalRuntime / (runtimeCounts[machine] || 1))\n        }));\n        if (processedData.length > 0) {\n          setMachineRuntimeData(processedData);\n          setDataStatus(prev => ({\n            ...prev,\n            runtime: 'loaded'\n          }));\n        }\n      }\n    } catch (error) {\n      console.error(\"Error fetching runtime data:\", error);\n      setDataStatus(prev => ({\n        ...prev,\n        runtime: 'error'\n      }));\n    }\n  };\n  const refreshData = () => {\n    setLoading(true);\n    setErrorCodeData(sampleErrorCodeData);\n    setPredictedFailuresData(samplePredictedFailures);\n    setMachineRuntimeData(sampleMachineRuntime);\n    setDataStatus({\n      errorCodes: 'loading',\n      predictions: 'loading',\n      runtime: 'loading'\n    });\n    setTimeout(() => {\n      Promise.all([fetchErrorCodeData(), fetchPredictedFailuresData(), fetchMachineRuntimeData()]).then(() => {\n        setLoading(false);\n      });\n    }, 1000);\n  };\n  const runPredictionJob = async () => {\n    try {\n      const response = await fetch('/api/run-databricks-job', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      if (!response.ok) throw new Error('Failed to trigger job');\n      await response.json();\n      alert('Prediction job triggered successfully!');\n    } catch (error) {\n      console.error(\"Error triggering prediction job:\", error);\n      alert('Failed to trigger prediction job: ' + error.message);\n    }\n  };\n  const sendMaintenanceAlert = async () => {\n    const email = prompt('Enter email address for maintenance alert:');\n    if (!email) return;\n    try {\n      const response = await fetch('/api/send-maintenance-alert', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          toEmail: email\n        })\n      });\n      if (!response.ok) throw new Error('Failed to send email');\n      await response.json();\n      alert('Maintenance alert sent successfully!');\n    } catch (error) {\n      console.error(\"Error sending email:\", error);\n      alert('Failed to send email: ' + error.message);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: '20px'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Machine Error Code Frequencies\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n      width: \"100%\",\n      height: 300,\n      children: /*#__PURE__*/_jsxDEV(BarChart, {\n        data: errorCodeData,\n        children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n          strokeDasharray: \"3 3\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 250,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n          dataKey: \"errorCode\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 251,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 252,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 253,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 254,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Bar, {\n          dataKey: \"count\",\n          fill: \"#8884d8\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 255,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Predicted Failures by Machine\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n      width: \"100%\",\n      height: 300,\n      children: /*#__PURE__*/_jsxDEV(PieChart, {\n        children: [/*#__PURE__*/_jsxDEV(Pie, {\n          data: predictedFailuresData,\n          dataKey: \"value\",\n          nameKey: \"name\",\n          outerRadius: 100,\n          fill: \"#82ca9d\",\n          label: true,\n          children: predictedFailuresData.map((entry, index) => /*#__PURE__*/_jsxDEV(Cell, {\n            fill: COLORS[index % COLORS.length]\n          }, `cell-${index}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 265,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 262,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 269,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 270,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Average Runtime by Machine\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 274,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n      width: \"100%\",\n      height: 300,\n      children: /*#__PURE__*/_jsxDEV(BarChart, {\n        data: machineRuntimeData,\n        children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n          strokeDasharray: \"3 3\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 277,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n          dataKey: \"machineId\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 278,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 279,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 280,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 281,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Bar, {\n          dataKey: \"avgRuntime\",\n          fill: \"#00C49F\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 282,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 275,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: '30px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: refreshData,\n        disabled: loading,\n        children: loading ? \"Refreshing...\" : \"Refresh Data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 287,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: runPredictionJob,\n        style: {\n          marginLeft: '10px'\n        },\n        children: \"Trigger Prediction Job\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 290,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: sendMaintenanceAlert,\n        style: {\n          marginLeft: '10px'\n        },\n        children: \"Send Maintenance Alert\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 293,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 286,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 246,\n    columnNumber: 5\n  }, this);\n}\n_s(Visualization, \"2kxBWAtpl3k/k+/Twk5ryj/sPtc=\");\n_c = Visualization;\nvar _c;\n$RefreshReg$(_c, \"Visualization\");","map":{"version":3,"names":["React","useState","useEffect","BarChart","Bar","PieChart","Pie","XAxis","YAxis","CartesianGrid","Tooltip","Legend","ResponsiveContainer","Cell","Papa","jsxDEV","_jsxDEV","COLORS","sampleErrorCodeData","errorCode","count","samplePredictedFailures","name","value","sampleMachineRuntime","machineId","avgRuntime","Visualization","_s","errorCodeData","setErrorCodeData","predictedFailuresData","setPredictedFailuresData","machineRuntimeData","setMachineRuntimeData","loading","setLoading","dataStatus","setDataStatus","errorCodes","predictions","runtime","loadAllData","Promise","all","fetchErrorCodeData","fetchPredictedFailuresData","fetchMachineRuntimeData","response","fetch","method","headers","body","JSON","stringify","keyword","ok","Error","result","json","data","length","errorCodeCounts","slice","forEach","row","Data","VarCharValue","processedData","Object","entries","map","code","sort","a","b","prev","error","console","csvText","text","parse","complete","machineFailureCounts","item","machine_id","machine","machineRuntimes","runtimeCounts","machine_runtime","parseInt","isNaN","totalRuntime","Math","round","refreshData","setTimeout","then","runPredictionJob","alert","message","sendMaintenanceAlert","email","prompt","toEmail","style","padding","children","fileName","_jsxFileName","lineNumber","columnNumber","width","height","strokeDasharray","dataKey","fill","nameKey","outerRadius","label","entry","index","marginTop","onClick","disabled","marginLeft","_c","$RefreshReg$"],"sources":["/Users/seshasayeebalaji/Desktop/aws_proj/src/components/Visualization.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport {\n  BarChart, Bar, PieChart, Pie,\n  XAxis, YAxis, CartesianGrid, Tooltip, Legend,\n  ResponsiveContainer, Cell\n} from 'recharts';\nimport Papa from 'papaparse';\n\n// Custom colors for charts\nconst COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#8884d8', '#82ca9d'];\n\n// Sample fallback data\nconst sampleErrorCodeData = [\n  { errorCode: \"E123\", count: 42 },\n  { errorCode: \"E045\", count: 38 },\n  { errorCode: \"E211\", count: 27 },\n  { errorCode: \"E078\", count: 19 },\n  { errorCode: \"E156\", count: 15 }\n];\n\nconst samplePredictedFailures = [\n  { name: \"MRI_001\", value: 12 },\n  { name: \"MRI_002\", value: 8 },\n  { name: \"MRI_003\", value: 5 },\n  { name: \"MRI_004\", value: 3 }\n];\n\nconst sampleMachineRuntime = [\n  { machineId: \"MRI_001\", avgRuntime: 452 },\n  { machineId: \"MRI_002\", avgRuntime: 387 },\n  { machineId: \"MRI_003\", avgRuntime: 521 },\n  { machineId: \"MRI_004\", avgRuntime: 312 }\n];\n\nexport default function Visualization() {\n  const [errorCodeData, setErrorCodeData] = useState(sampleErrorCodeData);\n  const [predictedFailuresData, setPredictedFailuresData] = useState(samplePredictedFailures);\n  const [machineRuntimeData, setMachineRuntimeData] = useState(sampleMachineRuntime);\n  const [loading, setLoading] = useState(true);\n  const [dataStatus, setDataStatus] = useState({\n    errorCodes: 'fallback',\n    predictions: 'fallback',\n    runtime: 'fallback'\n  });\n\n  useEffect(() => {\n    const loadAllData = async () => {\n      setLoading(true);\n      await Promise.all([\n        fetchErrorCodeData(),\n        fetchPredictedFailuresData(),\n        fetchMachineRuntimeData()\n      ]);\n      setLoading(false);\n    };\n\n    loadAllData();\n\n    // Cleanup function for useEffect\n    return () => {\n      setLoading(false);  // Ensure loading state is reset if component unmounts\n    };\n  }, []);\n\n  const fetchErrorCodeData = async () => {\n    try {\n      const response = await fetch('/api/search-athena', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ keyword: 'Error' })\n      });\n\n      if (!response.ok) throw new Error('Failed to fetch error codes');\n      const result = await response.json();\n\n      if (result.data && result.data.length > 1) {\n        const errorCodeCounts = {};\n\n        result.data.slice(1).forEach(row => {\n          if (row.Data && row.Data[2] && row.Data[2].VarCharValue) {\n            const errorCode = row.Data[2].VarCharValue;\n            errorCodeCounts[errorCode] = (errorCodeCounts[errorCode] || 0) + 1;\n          }\n        });\n\n        const processedData = Object.entries(errorCodeCounts)\n          .map(([code, count]) => ({ errorCode: code, count }))\n          .sort((a, b) => b.count - a.count)\n          .slice(0, 10);\n\n        if (processedData.length > 0) {\n          setErrorCodeData(processedData);\n          setDataStatus(prev => ({ ...prev, errorCodes: 'loaded' }));\n        }\n      }\n    } catch (error) {\n      console.error(\"Error fetching error codes:\", error);\n      setDataStatus(prev => ({ ...prev, errorCodes: 'error' }));\n    }\n  };\n\n  const fetchPredictedFailuresData = async () => {\n    try {\n      // Fetch the CSV file from Blob Storage (ensure it's accessible via a public URL or use SAS token)\n      const response = await fetch('predicted_errors.csv/part-00000-tid-2952257645147565659-d89282ae-b6d4-4c30-b495-fa6e29f42204-11306-1-c000.csv');\n      if (!response.ok) throw new Error('Failed to fetch CSV from Blob Storage');\n\n      const csvText = await response.text(); // Read the CSV content\n\n      // Parse the CSV data using PapaParse\n      Papa.parse(csvText, {\n        complete: (result) => {\n          const data = result.data;\n          const machineFailureCounts = {};\n\n          // Assuming the CSV has 'machine_id' column to track failures\n          data.forEach(item => {\n            const machineId = item.machine_id; // Replace with the actual column name in your CSV\n            if (machineId) {\n              machineFailureCounts[machineId] = (machineFailureCounts[machineId] || 0) + 1;\n            }\n          });\n\n          const processedData = Object.entries(machineFailureCounts)\n            .map(([machine, value]) => ({ name: machine, value }));\n\n          if (processedData.length > 0) {\n            setPredictedFailuresData(processedData);\n            setDataStatus(prev => ({ ...prev, predictions: 'loaded' }));\n          } else {\n            setDataStatus(prev => ({ ...prev, predictions: 'no-data' }));\n          }\n        },\n        error: (error) => {\n          console.error(\"Error parsing CSV:\", error);\n          setDataStatus(prev => ({ ...prev, predictions: 'error' }));\n        }\n      });\n    } catch (error) {\n      console.error(\"Error fetching predictions:\", error);\n      setDataStatus(prev => ({ ...prev, predictions: 'error' }));\n    }\n  };\n  const fetchMachineRuntimeData = async () => {\n    try {\n      const response = await fetch('/api/latest-s3-log');\n      if (!response.ok) throw new Error('Failed to fetch runtime data');\n      const result = await response.json();\n\n      if (result.data && result.data.length > 0) {\n        const machineRuntimes = {};\n        const runtimeCounts = {};\n\n        result.data.forEach(item => {\n          if (item.machine_id && item.machine_runtime) {\n            const machineId = item.machine_id;\n            const runtime = parseInt(item.machine_runtime, 10);\n\n            if (!isNaN(runtime)) {\n              if (!machineRuntimes[machineId]) {\n                machineRuntimes[machineId] = 0;\n                runtimeCounts[machineId] = 0;\n              }\n              machineRuntimes[machineId] += runtime;\n              runtimeCounts[machineId]++;\n            }\n          }\n        });\n\n        const processedData = Object.entries(machineRuntimes)\n          .map(([machine, totalRuntime]) => ({\n            machineId: machine,\n            avgRuntime: Math.round(totalRuntime / (runtimeCounts[machine] || 1))\n          }));\n\n        if (processedData.length > 0) {\n          setMachineRuntimeData(processedData);\n          setDataStatus(prev => ({ ...prev, runtime: 'loaded' }));\n        }\n      }\n    } catch (error) {\n      console.error(\"Error fetching runtime data:\", error);\n      setDataStatus(prev => ({ ...prev, runtime: 'error' }));\n    }\n  };\n\n  const refreshData = () => {\n    setLoading(true);\n    setErrorCodeData(sampleErrorCodeData);\n    setPredictedFailuresData(samplePredictedFailures);\n    setMachineRuntimeData(sampleMachineRuntime);\n    setDataStatus({\n      errorCodes: 'loading',\n      predictions: 'loading',\n      runtime: 'loading'\n    });\n\n    setTimeout(() => {\n      Promise.all([\n        fetchErrorCodeData(),\n        fetchPredictedFailuresData(),\n        fetchMachineRuntimeData()\n      ]).then(() => {\n        setLoading(false);\n      });\n    }, 1000);\n  };\n\n  const runPredictionJob = async () => {\n    try {\n      const response = await fetch('/api/run-databricks-job', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n      if (!response.ok) throw new Error('Failed to trigger job');\n      await response.json();\n      alert('Prediction job triggered successfully!');\n    } catch (error) {\n      console.error(\"Error triggering prediction job:\", error);\n      alert('Failed to trigger prediction job: ' + error.message);\n    }\n  };\n\n  const sendMaintenanceAlert = async () => {\n    const email = prompt('Enter email address for maintenance alert:');\n    if (!email) return;\n\n    try {\n      const response = await fetch('/api/send-maintenance-alert', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ toEmail: email })\n      });\n\n      if (!response.ok) throw new Error('Failed to send email');\n      await response.json();\n      alert('Maintenance alert sent successfully!');\n    } catch (error) {\n      console.error(\"Error sending email:\", error);\n      alert('Failed to send email: ' + error.message);\n    }\n  };\n\n  return (\n    <div style={{ padding: '20px' }}>\n      <h2>Machine Error Code Frequencies</h2>\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <BarChart data={errorCodeData}>\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <XAxis dataKey=\"errorCode\" />\n          <YAxis />\n          <Tooltip />\n          <Legend />\n          <Bar dataKey=\"count\" fill=\"#8884d8\" />\n        </BarChart>\n      </ResponsiveContainer>\n\n      <h2>Predicted Failures by Machine</h2>\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <PieChart>\n          <Pie data={predictedFailuresData} dataKey=\"value\" nameKey=\"name\" outerRadius={100} fill=\"#82ca9d\" label>\n            {\n              predictedFailuresData.map((entry, index) => (\n                <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\n              ))\n            }\n          </Pie>\n          <Tooltip />\n          <Legend />\n        </PieChart>\n      </ResponsiveContainer>\n\n      <h2>Average Runtime by Machine</h2>\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <BarChart data={machineRuntimeData}>\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <XAxis dataKey=\"machineId\" />\n          <YAxis />\n          <Tooltip />\n          <Legend />\n          <Bar dataKey=\"avgRuntime\" fill=\"#00C49F\" />\n        </BarChart>\n      </ResponsiveContainer>\n\n      <div style={{ marginTop: '30px' }}>\n        <button onClick={refreshData} disabled={loading}>\n          {loading ? \"Refreshing...\" : \"Refresh Data\"}\n        </button>\n        <button onClick={runPredictionJob} style={{ marginLeft: '10px' }}>\n          Trigger Prediction Job\n        </button>\n        <button onClick={sendMaintenanceAlert} style={{ marginLeft: '10px' }}>\n          Send Maintenance Alert\n        </button>\n      </div>\n    </div>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}