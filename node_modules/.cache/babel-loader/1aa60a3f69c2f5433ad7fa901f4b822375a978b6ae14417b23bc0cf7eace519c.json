{"ast":null,"code":"var _jsxFileName = \"/Users/seshasayeebalaji/Desktop/aws_proj/src/components/Visualization.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { BarChart, Bar, PieChart, Pie, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, Cell } from 'recharts';\n\n// Custom colors for charts\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#8884d8', '#82ca9d'];\n\n// Sample fallback data (keeping these for default states)\nconst sampleErrorCodeData = [{\n  errorCode: \"E123\",\n  count: 42\n}, {\n  errorCode: \"E045\",\n  count: 38\n}, {\n  errorCode: \"E211\",\n  count: 27\n}, {\n  errorCode: \"E078\",\n  count: 19\n}, {\n  errorCode: \"E156\",\n  count: 15\n}];\nconst samplePredictedFailures = [{\n  name: \"MRI_001\",\n  value: 12\n}, {\n  name: \"MRI_002\",\n  value: 8\n}, {\n  name: \"MRI_003\",\n  value: 5\n}, {\n  name: \"MRI_004\",\n  value: 3\n}];\nconst sampleMachineRuntime = [{\n  machineId: \"MRI_001\",\n  avgRuntime: 452\n}, {\n  machineId: \"MRI_002\",\n  avgRuntime: 387\n}, {\n  machineId: \"MRI_003\",\n  avgRuntime: 521\n}, {\n  machineId: \"MRI_004\",\n  avgRuntime: 312\n}];\nexport default function Visualization() {\n  _s();\n  const [rawErrorCodeData, setRawErrorCodeData] = useState([]);\n  const [rawPredictedFailuresData, setRawPredictedFailuresData] = useState([]);\n  const [rawMachineRuntimeData, setRawMachineRuntimeData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [dataStatus, setDataStatus] = useState({\n    errorCodes: 'fallback',\n    predictions: 'fallback',\n    runtime: 'fallback'\n  });\n  useEffect(() => {\n    const loadAllData = async () => {\n      setLoading(true);\n      await Promise.all([fetchErrorCodeData(), fetchPredictedFailuresData(), fetchMachineRuntimeData()]);\n      setLoading(false);\n    };\n    loadAllData();\n  }, []);\n  const fetchErrorCodeData = async () => {\n    try {\n      const response = await fetch('/api/search-athena', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          keyword: 'Error'\n        })\n      });\n      if (!response.ok) throw new Error('Failed to fetch error codes');\n      const result = await response.json();\n      if (result.data && result.data.length > 1) {\n        setRawErrorCodeData(result.data.slice(1)); // Store raw array (excluding header)\n        setDataStatus(prev => ({\n          ...prev,\n          errorCodes: 'raw'\n        }));\n        console.log(\"Raw Error Code Data:\", result.data.slice(1));\n      } else {\n        console.warn(\"No raw error code data found.\");\n        setDataStatus(prev => ({\n          ...prev,\n          errorCodes: 'no-raw-data'\n        }));\n      }\n    } catch (error) {\n      console.error(\"Error fetching error codes:\", error);\n      setDataStatus(prev => ({\n        ...prev,\n        errorCodes: 'raw-error'\n      }));\n    }\n  };\n  const fetchPredictedFailuresData = async () => {\n    try {\n      const response = await fetch('/api/latest-predictions');\n      if (!response.ok) throw new Error('Failed to fetch predictions');\n      const result = await response.json();\n      if (result.data && Array.isArray(result.data) && result.data.length > 0) {\n        setRawPredictedFailuresData(result.data); // Store raw array\n        setDataStatus(prev => ({\n          ...prev,\n          predictions: 'raw'\n        }));\n        console.log(\"Raw Predicted Failures Data:\", result.data);\n      } else {\n        console.warn(\"No raw predicted failures data found.\");\n        setDataStatus(prev => ({\n          ...prev,\n          predictions: 'no-raw-data'\n        }));\n      }\n    } catch (error) {\n      console.error(\"Error fetching predictions:\", error);\n      setDataStatus(prev => ({\n        ...prev,\n        predictions: 'raw-error'\n      }));\n    }\n  };\n  const fetchMachineRuntimeData = async () => {\n    try {\n      const response = await fetch('/api/latest-s3-log');\n      if (!response.ok) throw new Error('Failed to fetch runtime data');\n      const result = await response.json();\n      if (result.data && Array.isArray(result.data) && result.data.length > 0) {\n        setRawMachineRuntimeData(result.data); // Store raw array\n        setDataStatus(prev => ({\n          ...prev,\n          runtime: 'raw'\n        }));\n        console.log(\"Raw Machine Runtime Data:\", result.data);\n      } else {\n        console.warn(\"No raw machine runtime data found.\");\n        setDataStatus(prev => ({\n          ...prev,\n          runtime: 'no-raw-data'\n        }));\n      }\n    } catch (error) {\n      console.error(\"Error fetching runtime data:\", error);\n      setDataStatus(prev => ({\n        ...prev,\n        runtime: 'raw-error'\n      }));\n    }\n  };\n  const refreshData = () => {\n    setLoading(true);\n    setDataStatus({\n      errorCodes: 'loading',\n      predictions: 'loading',\n      runtime: 'loading'\n    });\n    Promise.all([fetchErrorCodeData(), fetchPredictedFailuresData(), fetchMachineRuntimeData()]).finally(() => setLoading(false));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"p-4 bg-gray-100 min-h-screen\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"text-3xl font-bold mb-4 text-center text-gray-800\",\n      children: \"Machine Monitoring Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex justify-center mb-6\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: refreshData,\n        className: \"bg-violet-600 hover:bg-violet-700 text-white font-semibold py-2 px-4 rounded shadow\",\n        children: \"Refresh Data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 7\n    }, this), loading && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-center text-gray-600 mb-4\",\n      children: \"Loading charts, please wait...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid grid-cols-1 md:grid-cols-2 gap-6\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-white p-4 rounded-lg shadow-md\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"text-xl font-semibold mb-2 text-gray-700\",\n          children: \"Top Error Codes (Raw)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n          width: \"100%\",\n          height: 300,\n          children: /*#__PURE__*/_jsxDEV(BarChart, {\n            data: rawErrorCodeData,\n            children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n              strokeDasharray: \"3 3\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 159,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n              dataKey: \"Data[2].VarCharValue\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 161,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n              dataKey: \"Data[0].VarCharValue\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 163,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 164,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 165,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Bar, {\n              dataKey: \"Data[0].VarCharValue\",\n              fill: \"#8884d8\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 167,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-white p-4 rounded-lg shadow-md\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"text-xl font-semibold mb-2 text-gray-700\",\n          children: \"Predicted Machine Failures (Raw)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n          width: \"100%\",\n          height: 300,\n          children: /*#__PURE__*/_jsxDEV(PieChart, {\n            children: [/*#__PURE__*/_jsxDEV(Pie, {\n              data: rawPredictedFailuresData\n              // ADJUST dataKey BASED ON YOUR rawPredictedFailuresData STRUCTURE\n              ,\n              dataKey: \"value\"\n              // ADJUST nameKey BASED ON YOUR rawPredictedFailuresData STRUCTURE\n              ,\n              nameKey: \"name\",\n              cx: \"50%\",\n              cy: \"50%\",\n              outerRadius: 100,\n              label: true,\n              children: rawPredictedFailuresData.map((entry, index) => /*#__PURE__*/_jsxDEV(Cell, {\n                fill: COLORS[index % COLORS.length]\n              }, `cell-${index}`, false, {\n                fileName: _jsxFileName,\n                lineNumber: 189,\n                columnNumber: 19\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 177,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 192,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 193,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 176,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-white p-4 rounded-lg shadow-md md:col-span-2\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"text-xl font-semibold mb-2 text-gray-700\",\n          children: \"Average Machine Runtime (mins) (Raw)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n          width: \"100%\",\n          height: 300,\n          children: /*#__PURE__*/_jsxDEV(BarChart, {\n            data: rawMachineRuntimeData,\n            children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n              strokeDasharray: \"3 3\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 203,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n              dataKey: \"machine_id\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 205,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n              dataKey: \"machine_runtime\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 207,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 208,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 209,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Bar, {\n              dataKey: \"machine_runtime\",\n              fill: \"#82ca9d\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 211,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 202,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 135,\n    columnNumber: 5\n  }, this);\n}\n_s(Visualization, \"dap2Nvq/NyKVYz62g9elNtQ58nE=\");\n_c = Visualization;\nvar _c;\n$RefreshReg$(_c, \"Visualization\");","map":{"version":3,"names":["React","useState","useEffect","BarChart","Bar","PieChart","Pie","XAxis","YAxis","CartesianGrid","Tooltip","Legend","ResponsiveContainer","Cell","jsxDEV","_jsxDEV","COLORS","sampleErrorCodeData","errorCode","count","samplePredictedFailures","name","value","sampleMachineRuntime","machineId","avgRuntime","Visualization","_s","rawErrorCodeData","setRawErrorCodeData","rawPredictedFailuresData","setRawPredictedFailuresData","rawMachineRuntimeData","setRawMachineRuntimeData","loading","setLoading","dataStatus","setDataStatus","errorCodes","predictions","runtime","loadAllData","Promise","all","fetchErrorCodeData","fetchPredictedFailuresData","fetchMachineRuntimeData","response","fetch","method","headers","body","JSON","stringify","keyword","ok","Error","result","json","data","length","slice","prev","console","log","warn","error","Array","isArray","refreshData","finally","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","width","height","strokeDasharray","dataKey","fill","nameKey","cx","cy","outerRadius","label","map","entry","index","_c","$RefreshReg$"],"sources":["/Users/seshasayeebalaji/Desktop/aws_proj/src/components/Visualization.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport {\n  BarChart, Bar, PieChart, Pie,\n  XAxis, YAxis, CartesianGrid, Tooltip, Legend,\n  ResponsiveContainer, Cell\n} from 'recharts';\n\n// Custom colors for charts\nconst COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#8884d8', '#82ca9d'];\n\n// Sample fallback data (keeping these for default states)\nconst sampleErrorCodeData = [\n  { errorCode: \"E123\", count: 42 },\n  { errorCode: \"E045\", count: 38 },\n  { errorCode: \"E211\", count: 27 },\n  { errorCode: \"E078\", count: 19 },\n  { errorCode: \"E156\", count: 15 }\n];\n\nconst samplePredictedFailures = [\n  { name: \"MRI_001\", value: 12 },\n  { name: \"MRI_002\", value: 8 },\n  { name: \"MRI_003\", value: 5 },\n  { name: \"MRI_004\", value: 3 }\n];\n\nconst sampleMachineRuntime = [\n  { machineId: \"MRI_001\", avgRuntime: 452 },\n  { machineId: \"MRI_002\", avgRuntime: 387 },\n  { machineId: \"MRI_003\", avgRuntime: 521 },\n  { machineId: \"MRI_004\", avgRuntime: 312 }\n];\n\nexport default function Visualization() {\n  const [rawErrorCodeData, setRawErrorCodeData] = useState([]);\n  const [rawPredictedFailuresData, setRawPredictedFailuresData] = useState([]);\n  const [rawMachineRuntimeData, setRawMachineRuntimeData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [dataStatus, setDataStatus] = useState({\n    errorCodes: 'fallback',\n    predictions: 'fallback',\n    runtime: 'fallback'\n  });\n\n  useEffect(() => {\n    const loadAllData = async () => {\n      setLoading(true);\n      await Promise.all([\n        fetchErrorCodeData(),\n        fetchPredictedFailuresData(),\n        fetchMachineRuntimeData()\n      ]);\n      setLoading(false);\n    };\n\n    loadAllData();\n  }, []);\n\n  const fetchErrorCodeData = async () => {\n    try {\n      const response = await fetch('/api/search-athena', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ keyword: 'Error' })\n      });\n      if (!response.ok) throw new Error('Failed to fetch error codes');\n      const result = await response.json();\n      if (result.data && result.data.length > 1) {\n        setRawErrorCodeData(result.data.slice(1)); // Store raw array (excluding header)\n        setDataStatus(prev => ({ ...prev, errorCodes: 'raw' }));\n        console.log(\"Raw Error Code Data:\", result.data.slice(1));\n      } else {\n        console.warn(\"No raw error code data found.\");\n        setDataStatus(prev => ({ ...prev, errorCodes: 'no-raw-data' }));\n      }\n    } catch (error) {\n      console.error(\"Error fetching error codes:\", error);\n      setDataStatus(prev => ({ ...prev, errorCodes: 'raw-error' }));\n    }\n  };\n\n  const fetchPredictedFailuresData = async () => {\n    try {\n      const response = await fetch('/api/latest-predictions');\n      if (!response.ok) throw new Error('Failed to fetch predictions');\n      const result = await response.json();\n      if (result.data && Array.isArray(result.data) && result.data.length > 0) {\n        setRawPredictedFailuresData(result.data); // Store raw array\n        setDataStatus(prev => ({ ...prev, predictions: 'raw' }));\n        console.log(\"Raw Predicted Failures Data:\", result.data);\n      } else {\n        console.warn(\"No raw predicted failures data found.\");\n        setDataStatus(prev => ({ ...prev, predictions: 'no-raw-data' }));\n      }\n    } catch (error) {\n      console.error(\"Error fetching predictions:\", error);\n      setDataStatus(prev => ({ ...prev, predictions: 'raw-error' }));\n    }\n  };\n\n  const fetchMachineRuntimeData = async () => {\n    try {\n      const response = await fetch('/api/latest-s3-log');\n      if (!response.ok) throw new Error('Failed to fetch runtime data');\n      const result = await response.json();\n      if (result.data && Array.isArray(result.data) && result.data.length > 0) {\n        setRawMachineRuntimeData(result.data); // Store raw array\n        setDataStatus(prev => ({ ...prev, runtime: 'raw' }));\n        console.log(\"Raw Machine Runtime Data:\", result.data);\n      } else {\n        console.warn(\"No raw machine runtime data found.\");\n        setDataStatus(prev => ({ ...prev, runtime: 'no-raw-data' }));\n      }\n    } catch (error) {\n      console.error(\"Error fetching runtime data:\", error);\n      setDataStatus(prev => ({ ...prev, runtime: 'raw-error' }));\n    }\n  };\n\n  const refreshData = () => {\n    setLoading(true);\n    setDataStatus({\n      errorCodes: 'loading',\n      predictions: 'loading',\n      runtime: 'loading'\n    });\n    Promise.all([\n      fetchErrorCodeData(),\n      fetchPredictedFailuresData(),\n      fetchMachineRuntimeData()\n    ]).finally(() => setLoading(false));\n  };\n\n  return (\n    <div className=\"p-4 bg-gray-100 min-h-screen\">\n      <h1 className=\"text-3xl font-bold mb-4 text-center text-gray-800\">Machine Monitoring Dashboard</h1>\n\n      <div className=\"flex justify-center mb-6\">\n        <button\n          onClick={refreshData}\n          className=\"bg-violet-600 hover:bg-violet-700 text-white font-semibold py-2 px-4 rounded shadow\"\n        >\n          Refresh Data\n        </button>\n      </div>\n\n      {loading && (\n        <div className=\"text-center text-gray-600 mb-4\">\n          Loading charts, please wait...\n        </div>\n      )}\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n        {/* Error Code Bar Chart (Attempting to render raw data - ADJUST DATA KEY BASED ON YOUR ACTUAL RAW DATA STRUCTURE) */}\n        <div className=\"bg-white p-4 rounded-lg shadow-md\">\n          <h2 className=\"text-xl font-semibold mb-2 text-gray-700\">Top Error Codes (Raw)</h2>\n          <ResponsiveContainer width=\"100%\" height={300}>\n            <BarChart data={rawErrorCodeData}>\n              <CartesianGrid strokeDasharray=\"3 3\" />\n              {/* ADJUST dataKey BASED ON YOUR rawErrorCodeData STRUCTURE */}\n              <XAxis dataKey=\"Data[2].VarCharValue\" />\n              {/* ADJUST dataKey BASED ON YOUR rawErrorCodeData STRUCTURE */}\n              <YAxis dataKey=\"Data[0].VarCharValue\" />\n              <Tooltip />\n              <Legend />\n              {/* ADJUST dataKey BASED ON YOUR rawErrorCodeData STRUCTURE */}\n              <Bar dataKey=\"Data[0].VarCharValue\" fill=\"#8884d8\" />\n            </BarChart>\n          </ResponsiveContainer>\n        </div>\n\n        {/* Predicted Failures Pie Chart (Attempting to render raw data - ADJUST DATA KEY BASED ON YOUR ACTUAL RAW DATA STRUCTURE) */}\n        <div className=\"bg-white p-4 rounded-lg shadow-md\">\n          <h2 className=\"text-xl font-semibold mb-2 text-gray-700\">Predicted Machine Failures (Raw)</h2>\n          <ResponsiveContainer width=\"100%\" height={300}>\n            <PieChart>\n              <Pie\n                data={rawPredictedFailuresData}\n                // ADJUST dataKey BASED ON YOUR rawPredictedFailuresData STRUCTURE\n                dataKey=\"value\"\n                // ADJUST nameKey BASED ON YOUR rawPredictedFailuresData STRUCTURE\n                nameKey=\"name\"\n                cx=\"50%\"\n                cy=\"50%\"\n                outerRadius={100}\n                label\n              >\n                {rawPredictedFailuresData.map((entry, index) => (\n                  <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\n                ))}\n              </Pie>\n              <Tooltip />\n              <Legend />\n            </PieChart>\n          </ResponsiveContainer>\n        </div>\n\n        {/* Machine Runtime Bar Chart (Attempting to render raw data - ADJUST DATA KEY BASED ON YOUR ACTUAL RAW DATA STRUCTURE) */}\n        <div className=\"bg-white p-4 rounded-lg shadow-md md:col-span-2\">\n          <h2 className=\"text-xl font-semibold mb-2 text-gray-700\">Average Machine Runtime (mins) (Raw)</h2>\n          <ResponsiveContainer width=\"100%\" height={300}>\n            <BarChart data={rawMachineRuntimeData}>\n              <CartesianGrid strokeDasharray=\"3 3\" />\n              {/* ADJUST dataKey BASED ON YOUR rawMachineRuntimeData STRUCTURE */}\n              <XAxis dataKey=\"machine_id\" />\n              {/* ADJUST dataKey BASED ON YOUR rawMachineRuntimeData STRUCTURE */}\n              <YAxis dataKey=\"machine_runtime\" />\n              <Tooltip />\n              <Legend />\n              {/* ADJUST dataKey BASED ON YOUR rawMachineRuntimeData STRUCTURE */}\n              <Bar dataKey=\"machine_runtime\" fill=\"#82ca9d\" />\n            </BarChart>\n          </ResponsiveContainer>\n        </div>\n      </div>\n    </div>\n  );\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}