{"ast":null,"code":"var _jsxFileName = \"/Users/seshasayeebalaji/Desktop/aws_proj/src/components/AthenaQuery.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction AthenaQuery() {\n  _s();\n  const [searchTerm, setSearchTerm] = useState('');\n  const [results, setResults] = useState([]);\n  const [columns, setColumns] = useState([]);\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const runSearch = async () => {\n    if (!searchTerm.trim()) return;\n    try {\n      setLoading(true);\n      setError(null);\n      setResults([]);\n      setColumns([]);\n      const response = await fetch('http://localhost:3001/api/search-athena', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          keyword: searchTerm\n        })\n      });\n      const data = await response.json();\n      console.log('✅ Athena data.data:', data.data); // ← paste this!\n\n      if (response.ok && Array.isArray(data.data) && data.data.length > 0) {\n        const columnNames = Object.keys(data.data[0]);\n        const rows = data.data.map(row => columnNames.map(col => {\n          const value = row[col];\n\n          // Case 1: Value is an object with VarCharValue\n          if (value && typeof value === 'object' && 'VarCharValue' in value) {\n            return value.VarCharValue;\n          }\n\n          // Case 2: Value is an array of objects with VarCharValue (e.g., multiple errors)\n          if (Array.isArray(value) && value.every(item => typeof item === 'object' && 'VarCharValue' in item)) {\n            return value.map(item => item.VarCharValue).join(', ');\n          }\n\n          // Case 3: Just return string fallback\n          return value !== null && value !== undefined ? value.toString() : '';\n        }));\n        setColumns(columnNames);\n        setResults(rows);\n      } else {\n        setError(data.error || 'No results found.');\n      }\n    } catch (err) {\n      setError('Error: ' + err.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: '20px',\n      fontFamily: 'Arial, sans-serif'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Search MRI Logs (Athena)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: '20px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Search by status, machine ID, error code...\",\n        value: searchTerm,\n        onChange: e => setSearchTerm(e.target.value),\n        style: {\n          width: '400px',\n          padding: '8px',\n          marginRight: '10px'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: runSearch,\n        disabled: loading,\n        style: {\n          padding: '8px 12px'\n        },\n        children: loading ? 'Searching...' : 'Search'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: 'red',\n        marginTop: '15px'\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 17\n    }, this), results.length > 0 ? /*#__PURE__*/_jsxDEV(\"table\", {\n      border: \"1\",\n      cellPadding: \"8\",\n      style: {\n        marginTop: '20px',\n        width: '100%',\n        borderCollapse: 'collapse'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        style: {\n          backgroundColor: '#f0f0f0'\n        },\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: columns.map((col, idx) => /*#__PURE__*/_jsxDEV(\"th\", {\n            style: {\n              padding: '10px',\n              textAlign: 'left'\n            },\n            children: col\n          }, idx, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: results.map((row, i) => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: row.map((cell, j) => /*#__PURE__*/_jsxDEV(\"td\", {\n            style: {\n              padding: '8px'\n            },\n            children: cell\n          }, j, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 19\n          }, this))\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 9\n    }, this) : !error && !loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        marginTop: '20px',\n        fontStyle: 'italic'\n      },\n      children: \"No results found.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 9\n    }, this) : null]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n}\n_s(AthenaQuery, \"/pA+5m/XXjhD4M51248RnIi0B64=\");\n_c = AthenaQuery;\nexport default AthenaQuery;\nvar _c;\n$RefreshReg$(_c, \"AthenaQuery\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","AthenaQuery","_s","searchTerm","setSearchTerm","results","setResults","columns","setColumns","error","setError","loading","setLoading","runSearch","trim","response","fetch","method","headers","body","JSON","stringify","keyword","data","json","console","log","ok","Array","isArray","length","columnNames","Object","keys","rows","map","row","col","value","VarCharValue","every","item","join","undefined","toString","err","message","style","padding","fontFamily","children","fileName","_jsxFileName","lineNumber","columnNumber","marginBottom","type","placeholder","onChange","e","target","width","marginRight","onClick","disabled","color","marginTop","border","cellPadding","borderCollapse","backgroundColor","idx","textAlign","i","cell","j","fontStyle","_c","$RefreshReg$"],"sources":["/Users/seshasayeebalaji/Desktop/aws_proj/src/components/AthenaQuery.js"],"sourcesContent":["import React, { useState } from 'react';\n\nfunction AthenaQuery() {\n  const [searchTerm, setSearchTerm] = useState('');\n  const [results, setResults] = useState([]);\n  const [columns, setColumns] = useState([]);\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(false);\n\n  const runSearch = async () => {\n    if (!searchTerm.trim()) return;\n\n    try {\n      setLoading(true);\n      setError(null);\n      setResults([]);\n      setColumns([]);\n\n      const response = await fetch('http://localhost:3001/api/search-athena', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ keyword: searchTerm })\n      });\n\n      const data = await response.json();\n      console.log('✅ Athena data.data:', data.data); // ← paste this!\n\n\n      if (response.ok && Array.isArray(data.data) && data.data.length > 0) {\n        const columnNames = Object.keys(data.data[0]);\n\n        const rows = data.data.map(row =>\n          columnNames.map(col => {\n            const value = row[col];\n        \n            // Case 1: Value is an object with VarCharValue\n            if (value && typeof value === 'object' && 'VarCharValue' in value) {\n              return value.VarCharValue;\n            }\n        \n            // Case 2: Value is an array of objects with VarCharValue (e.g., multiple errors)\n            if (Array.isArray(value) && value.every(item => typeof item === 'object' && 'VarCharValue' in item)) {\n              return value.map(item => item.VarCharValue).join(', ');\n            }\n        \n            // Case 3: Just return string fallback\n            return value !== null && value !== undefined ? value.toString() : '';\n          })\n        );\n        \n\n        setColumns(columnNames);\n        setResults(rows);\n      } else {\n        setError(data.error || 'No results found.');\n      }\n    } catch (err) {\n      setError('Error: ' + err.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div style={{ padding: '20px', fontFamily: 'Arial, sans-serif' }}>\n      <h1>Search MRI Logs (Athena)</h1>\n      <div style={{ marginBottom: '20px' }}>\n        <input\n          type=\"text\"\n          placeholder=\"Search by status, machine ID, error code...\"\n          value={searchTerm}\n          onChange={(e) => setSearchTerm(e.target.value)}\n          style={{ width: '400px', padding: '8px', marginRight: '10px' }}\n        />\n        <button onClick={runSearch} disabled={loading} style={{ padding: '8px 12px' }}>\n          {loading ? 'Searching...' : 'Search'}\n        </button>\n      </div>\n\n      {error && <p style={{ color: 'red', marginTop: '15px' }}>{error}</p>}\n\n      {results.length > 0 ? (\n        <table border=\"1\" cellPadding=\"8\" style={{ marginTop: '20px', width: '100%', borderCollapse: 'collapse' }}>\n          <thead style={{ backgroundColor: '#f0f0f0' }}>\n            <tr>\n              {columns.map((col, idx) => (\n                <th key={idx} style={{ padding: '10px', textAlign: 'left' }}>\n                  {col}\n                </th>\n              ))}\n            </tr>\n          </thead>\n          <tbody>\n            {results.map((row, i) => (\n              <tr key={i}>\n                {row.map((cell, j) => (\n                  <td key={j} style={{ padding: '8px' }}>\n                    {cell}\n                  </td>\n                ))}\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      ) : !error && !loading ? (\n        <p style={{ marginTop: '20px', fontStyle: 'italic' }}>No results found.</p>\n      ) : null}\n    </div>\n  );\n}\n\nexport default AthenaQuery;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}