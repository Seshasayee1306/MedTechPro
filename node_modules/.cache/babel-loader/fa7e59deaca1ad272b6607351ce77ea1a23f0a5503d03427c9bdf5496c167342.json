{"ast":null,"code":"var _jsxFileName = \"/Users/seshasayeebalaji/Desktop/aws_proj/src/components/Visualization.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { BarChart, Bar, PieChart, Pie, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, Cell } from 'recharts';\n\n// Custom colors for charts\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#8884d8', '#82ca9d'];\n\n// Sample fallback data\nconst sampleErrorCodeData = [{\n  errorCode: \"E123\",\n  count: 42\n}, {\n  errorCode: \"E045\",\n  count: 38\n}, {\n  errorCode: \"E211\",\n  count: 27\n}, {\n  errorCode: \"E078\",\n  count: 19\n}, {\n  errorCode: \"E156\",\n  count: 15\n}];\nconst samplePredictedFailures = [{\n  name: \"MRI_001\",\n  value: 12\n}, {\n  name: \"MRI_002\",\n  value: 8\n}, {\n  name: \"MRI_003\",\n  value: 5\n}, {\n  name: \"MRI_004\",\n  value: 3\n}];\nconst sampleMachineRuntime = [{\n  machineId: \"MRI_001\",\n  avgRuntime: 452\n}, {\n  machineId: \"MRI_002\",\n  avgRuntime: 387\n}, {\n  machineId: \"MRI_003\",\n  avgRuntime: 521\n}, {\n  machineId: \"MRI_004\",\n  avgRuntime: 312\n}];\nexport default function Visualization() {\n  _s();\n  // State for each data type\n  const [errorCodeData, setErrorCodeData] = useState(sampleErrorCodeData);\n  const [predictedFailuresData, setPredictedFailuresData] = useState(samplePredictedFailures);\n  const [machineRuntimeData, setMachineRuntimeData] = useState(sampleMachineRuntime);\n  const [loading, setLoading] = useState(true);\n  const [dataStatus, setDataStatus] = useState({\n    errorCodes: 'fallback',\n    predictions: 'fallback',\n    runtime: 'fallback'\n  });\n  useEffect(() => {\n    // Function to fetch error code data from Athena\n    const fetchErrorCodeData = async () => {\n      try {\n        const response = await fetch('/api/search-athena', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            keyword: 'Error'\n          })\n        });\n        if (!response.ok) throw new Error('Failed to fetch error codes');\n        const result = await response.json();\n\n        // Process the API response\n        if (result.data && result.data.length > 1) {\n          const errorCodeCounts = {};\n\n          // Skip the first row which is typically headers\n          result.data.slice(1).forEach(row => {\n            if (row.Data && row.Data[2] && row.Data[2].VarCharValue) {\n              const errorCode = row.Data[2].VarCharValue;\n              errorCodeCounts[errorCode] = (errorCodeCounts[errorCode] || 0) + 1;\n            }\n          });\n          const processedData = Object.entries(errorCodeCounts).map(([code, count]) => ({\n            errorCode: code,\n            count\n          })).sort((a, b) => b.count - a.count).slice(0, 10);\n          if (processedData.length > 0) {\n            setErrorCodeData(processedData);\n            setDataStatus(prev => ({\n              ...prev,\n              errorCodes: 'loaded'\n            }));\n          }\n        }\n      } catch (error) {\n        console.error(\"Error fetching error codes:\", error);\n        // Fallback data already set in state initialization\n      }\n    };\n\n    // Function to fetch predicted failures data from Azure/Databricks\n    const fetchPredictedFailuresData = async () => {\n      try {\n        const response = await fetch('/api/latest-predictions');\n        if (!response.ok) throw new Error('Failed to fetch predictions');\n        const result = await response.json();\n        if (result.data && result.data.length > 0) {\n          const machineFailureCounts = {};\n          result.data.forEach(item => {\n            const machineId = item.machine_id;\n            if (machineId) {\n              machineFailureCounts[machineId] = (machineFailureCounts[machineId] || 0) + 1;\n            }\n          });\n          const processedData = Object.entries(machineFailureCounts).map(([machine, value]) => ({\n            name: machine,\n            value\n          }));\n          if (processedData.length > 0) {\n            setPredictedFailuresData(processedData);\n            setDataStatus(prev => ({\n              ...prev,\n              predictions: 'loaded'\n            }));\n          }\n        }\n      } catch (error) {\n        console.error(\"Error fetching predictions:\", error);\n        // Fallback data already set in state initialization\n      }\n    };\n\n    // Function to fetch machine runtime data from S3 logs\n    const fetchMachineRuntimeData = async () => {\n      try {\n        const response = await fetch('/api/latest-s3-log');\n        if (!response.ok) throw new Error('Failed to fetch runtime data');\n        const result = await response.json();\n        if (result.data && result.data.length > 0) {\n          const machineRuntimes = {};\n          const runtimeCounts = {};\n          result.data.forEach(item => {\n            if (item.machine_id && item.machine_runtime) {\n              const machineId = item.machine_id;\n              const runtime = parseInt(item.machine_runtime, 10);\n              if (!isNaN(runtime)) {\n                if (!machineRuntimes[machineId]) {\n                  machineRuntimes[machineId] = 0;\n                  runtimeCounts[machineId] = 0;\n                }\n                machineRuntimes[machineId] += runtime;\n                runtimeCounts[machineId]++;\n              }\n            }\n          });\n          const processedData = Object.entries(machineRuntimes).map(([machine, totalRuntime]) => ({\n            machineId: machine,\n            avgRuntime: Math.round(totalRuntime / (runtimeCounts[machine] || 1))\n          }));\n          if (processedData.length > 0) {\n            setMachineRuntimeData(processedData);\n            setDataStatus(prev => ({\n              ...prev,\n              runtime: 'loaded'\n            }));\n          }\n        }\n      } catch (error) {\n        console.error(\"Error fetching runtime data:\", error);\n        // Fallback data already set in state initialization\n      }\n    };\n\n    // Load all data\n    const loadAllData = async () => {\n      setLoading(true);\n      await Promise.all([fetchErrorCodeData(), fetchPredictedFailuresData(), fetchMachineRuntimeData()]);\n      setLoading(false);\n    };\n    loadAllData();\n  }, []);\n\n  // Handle API calls for button actions\n  const refreshData = () => {\n    setLoading(true);\n    // Reset to initial state before refreshing\n    setErrorCodeData(sampleErrorCodeData);\n    setPredictedFailuresData(samplePredictedFailures);\n    setMachineRuntimeData(sampleMachineRuntime);\n    setDataStatus({\n      errorCodes: 'loading',\n      predictions: 'loading',\n      runtime: 'loading'\n    });\n\n    // Re-fetch data instead of page reload\n    setTimeout(() => {\n      Promise.all([fetchErrorCodeData(), fetchPredictedFailuresData(), fetchMachineRuntimeData()]).then(() => {\n        setLoading(false);\n      });\n    }, 1000);\n  };\n  const runPredictionJob = async () => {\n    try {\n      const response = await fetch('/api/run-databricks-job', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      if (!response.ok) throw new Error('Failed to trigger job');\n      const result = await response.json();\n      alert('Prediction job triggered successfully!');\n    } catch (error) {\n      console.error(\"Error triggering prediction job:\", error);\n      alert('Failed to trigger prediction job: ' + error.message);\n    }\n  };\n  const sendMaintenanceAlert = async () => {\n    const email = prompt('Enter email address for maintenance alert:');\n    if (!email) return;\n    try {\n      const response = await fetch('/api/send-maintenance-alert', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          toEmail: email\n        })\n      });\n      if (!response.ok) throw new Error('Failed to send email');\n      const result = await response.json();\n      alert('Maintenance alert sent successfully!');\n    } catch (error) {\n      console.error(\"Error sending email:\", error);\n      alert('Failed to send email: ' + error.message);\n    }\n  };\n\n  // Function to handle missing fetchErrorCodeData, fetchPredictedFailuresData, and fetchMachineRuntimeData references\n  const fetchErrorCodeData = async () => {\n    try {\n      const response = await fetch('/api/search-athena', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          keyword: 'Error'\n        })\n      });\n      if (!response.ok) throw new Error('Failed to fetch error codes');\n      const result = await response.json();\n      if (result.data && result.data.length > 1) {\n        const errorCodeCounts = {};\n        result.data.slice(1).forEach(row => {\n          if (row.Data && row.Data[2] && row.Data[2].VarCharValue) {\n            const errorCode = row.Data[2].VarCharValue;\n            errorCodeCounts[errorCode] = (errorCodeCounts[errorCode] || 0) + 1;\n          }\n        });\n        const processedData = Object.entries(errorCodeCounts).map(([code, count]) => ({\n          errorCode: code,\n          count\n        })).sort((a, b) => b.count - a.count).slice(0, 10);\n        if (processedData.length > 0) {\n          setErrorCodeData(processedData);\n          setDataStatus(prev => ({\n            ...prev,\n            errorCodes: 'loaded'\n          }));\n        }\n      }\n    } catch (error) {\n      console.error(\"Error fetching error codes:\", error);\n      setDataStatus(prev => ({\n        ...prev,\n        errorCodes: 'error'\n      }));\n    }\n  };\n  const fetchPredictedFailuresData = async () => {\n    try {\n      const response = await fetch('/api/latest-predictions');\n      if (!response.ok) throw new Error('Failed to fetch predictions');\n      const result = await response.json();\n      if (result.data && result.data.length > 0) {\n        const machineFailureCounts = {};\n        result.data.forEach(item => {\n          const machineId = item.machine_id;\n          if (machineId) {\n            machineFailureCounts[machineId] = (machineFailureCounts[machineId] || 0) + 1;\n          }\n        });\n        const processedData = Object.entries(machineFailureCounts).map(([machine, value]) => ({\n          name: machine,\n          value\n        }));\n        if (processedData.length > 0) {\n          setPredictedFailuresData(processedData);\n          setDataStatus(prev => ({\n            ...prev,\n            predictions: 'loaded'\n          }));\n        }\n      }\n    } catch (error) {\n      console.error(\"Error fetching predictions:\", error);\n      setDataStatus(prev => ({\n        ...prev,\n        predictions: 'error'\n      }));\n    }\n  };\n  const fetchMachineRuntimeData = async () => {\n    try {\n      const response = await fetch('/api/latest-s3-log');\n      if (!response.ok) throw new Error('Failed to fetch runtime data');\n      const result = await response.json();\n      if (result.data && result.data.length > 0) {\n        const machineRuntimes = {};\n        const runtimeCounts = {};\n        result.data.forEach(item => {\n          if (item.machine_id && item.machine_runtime) {\n            const machineId = item.machine_id;\n            const runtime = parseInt(item.machine_runtime, 10);\n            if (!isNaN(runtime)) {\n              if (!machineRuntimes[machineId]) {\n                machineRuntimes[machineId] = 0;\n                runtimeCounts[machineId] = 0;\n              }\n              machineRuntimes[machineId] += runtime;\n              runtimeCounts[machineId]++;\n            }\n          }\n        });\n        const processedData = Object.entries(machineRuntimes).map(([machine, totalRuntime]) => ({\n          machineId: machine,\n          avgRuntime: Math.round(totalRuntime / (runtimeCounts[machine] || 1))\n        }));\n        if (processedData.length > 0) {\n          setMachineRuntimeData(processedData);\n          setDataStatus(prev => ({\n            ...prev,\n            runtime: 'loaded'\n          }));\n        }\n      }\n    } catch (error) {\n      console.error(\"Error fetching runtime data:\", error);\n      setDataStatus(prev => ({\n        ...prev,\n        runtime: 'error'\n      }));\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"p-6 max-w-6xl mx-auto\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"text-3xl font-bold mb-8\",\n      children: \"MRI Machine Analytics Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 359,\n      columnNumber: 7\n    }, this), loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-center py-8\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-lg\",\n        children: \"Loading dashboard data...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 363,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mt-4 h-2 w-64 bg-gray-200 rounded-full mx-auto\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"h-full bg-blue-500 rounded-full animate-pulse\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 365,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 364,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 362,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid grid-cols-1 md:grid-cols-2 gap-8 mb-8\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bg-white p-6 rounded-lg shadow-md\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"text-xl font-semibold mb-4\",\n            children: \"Most Frequent Error Codes\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 373,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"h-64\",\n            children: errorCodeData && errorCodeData.length > 0 ? /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n              width: \"100%\",\n              height: \"100%\",\n              children: /*#__PURE__*/_jsxDEV(BarChart, {\n                data: errorCodeData,\n                margin: {\n                  top: 5,\n                  right: 30,\n                  left: 20,\n                  bottom: 5\n                },\n                children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n                  strokeDasharray: \"3 3\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 378,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n                  dataKey: \"errorCode\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 379,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 380,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n                  formatter: value => [`${value}`, 'Occurrence Count'],\n                  labelFormatter: value => `Error Code: ${value}`\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 381,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 385,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(Bar, {\n                  dataKey: \"count\",\n                  fill: \"#8884d8\",\n                  name: \"Frequency\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 386,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 377,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 376,\n              columnNumber: 19\n            }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"flex items-center justify-center h-full\",\n              children: /*#__PURE__*/_jsxDEV(\"p\", {\n                children: \"No error code data available\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 391,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 390,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 374,\n            columnNumber: 15\n          }, this), dataStatus.errorCodes === 'fallback' && /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"text-sm text-gray-500 mt-2\",\n            children: \"Using sample data - API data unavailable\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 396,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 372,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bg-white p-6 rounded-lg shadow-md\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"text-xl font-semibold mb-4\",\n            children: \"Predicted Failures by Machine\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 402,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"h-64\",\n            children: predictedFailuresData && predictedFailuresData.length > 0 ? /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n              width: \"100%\",\n              height: \"100%\",\n              children: /*#__PURE__*/_jsxDEV(PieChart, {\n                children: [/*#__PURE__*/_jsxDEV(Pie, {\n                  data: predictedFailuresData,\n                  cx: \"50%\",\n                  cy: \"50%\",\n                  labelLine: true,\n                  outerRadius: 80,\n                  fill: \"#8884d8\",\n                  dataKey: \"value\",\n                  nameKey: \"name\",\n                  label: ({\n                    name,\n                    percent\n                  }) => `${name}: ${(percent * 100).toFixed(0)}%`,\n                  children: predictedFailuresData.map((entry, index) => /*#__PURE__*/_jsxDEV(Cell, {\n                    fill: COLORS[index % COLORS.length]\n                  }, `cell-${index}`, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 419,\n                    columnNumber: 27\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 407,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n                  formatter: (value, name, props) => [`${value} predicted failures`, props.payload.name]\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 422,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 423,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 406,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 405,\n              columnNumber: 19\n            }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"flex items-center justify-center h-full\",\n              children: /*#__PURE__*/_jsxDEV(\"p\", {\n                children: \"No prediction data available\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 428,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 427,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 403,\n            columnNumber: 15\n          }, this), dataStatus.predictions === 'fallback' && /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"text-sm text-gray-500 mt-2\",\n            children: \"Using sample data - API data unavailable\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 433,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 401,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 370,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-white p-6 rounded-lg shadow-md mb-8\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"text-xl font-semibold mb-4\",\n          children: \"Average Runtime of Machines\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 440,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"h-64\",\n          children: machineRuntimeData && machineRuntimeData.length > 0 ? /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n            width: \"100%\",\n            height: \"100%\",\n            children: /*#__PURE__*/_jsxDEV(BarChart, {\n              data: machineRuntimeData,\n              margin: {\n                top: 5,\n                right: 30,\n                left: 20,\n                bottom: 5\n              },\n              children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n                strokeDasharray: \"3 3\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 445,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n                dataKey: \"machineId\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 446,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n                label: {\n                  value: 'Runtime (seconds)',\n                  angle: -90,\n                  position: 'insideLeft'\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 447,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n                formatter: value => [`${value.toFixed(1)} seconds`, 'Avg Runtime']\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 448,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 449,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(Bar, {\n                dataKey: \"avgRuntime\",\n                fill: \"#82ca9d\",\n                name: \"Average Runtime (seconds)\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 450,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 444,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 443,\n            columnNumber: 17\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex items-center justify-center h-full\",\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"No runtime data available\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 455,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 454,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 441,\n          columnNumber: 13\n        }, this), dataStatus.runtime === 'fallback' && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-sm text-gray-500 mt-2\",\n          children: \"Using sample data - API data unavailable\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 460,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 439,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-white p-6 rounded-lg shadow-md\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"text-xl font-semibold mb-4\",\n          children: \"Dashboard Controls\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 466,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex flex-wrap gap-4\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"bg-blue-600 hover:bg-blue-700 text-white py-2 px-4 rounded-md transition duration-300\",\n            onClick: refreshData,\n            disabled: loading,\n            children: loading ? 'Refreshing...' : 'Refresh Data'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 468,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"bg-green-600 hover:bg-green-700 text-white py-2 px-4 rounded-md transition duration-300\",\n            onClick: runPredictionJob,\n            disabled: loading,\n            children: \"Run Prediction Job\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 475,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"bg-purple-600 hover:bg-purple-700 text-white py-2 px-4 rounded-md transition duration-300\",\n            onClick: sendMaintenanceAlert,\n            disabled: loading,\n            children: \"Send Maintenance Alert\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 482,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 467,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 465,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 358,\n    columnNumber: 5\n  }, this);\n}\n_s(Visualization, \"2kxBWAtpl3k/k+/Twk5ryj/sPtc=\");\n_c = Visualization;\nvar _c;\n$RefreshReg$(_c, \"Visualization\");","map":{"version":3,"names":["React","useState","useEffect","BarChart","Bar","PieChart","Pie","XAxis","YAxis","CartesianGrid","Tooltip","Legend","ResponsiveContainer","Cell","jsxDEV","_jsxDEV","Fragment","_Fragment","COLORS","sampleErrorCodeData","errorCode","count","samplePredictedFailures","name","value","sampleMachineRuntime","machineId","avgRuntime","Visualization","_s","errorCodeData","setErrorCodeData","predictedFailuresData","setPredictedFailuresData","machineRuntimeData","setMachineRuntimeData","loading","setLoading","dataStatus","setDataStatus","errorCodes","predictions","runtime","fetchErrorCodeData","response","fetch","method","headers","body","JSON","stringify","keyword","ok","Error","result","json","data","length","errorCodeCounts","slice","forEach","row","Data","VarCharValue","processedData","Object","entries","map","code","sort","a","b","prev","error","console","fetchPredictedFailuresData","machineFailureCounts","item","machine_id","machine","fetchMachineRuntimeData","machineRuntimes","runtimeCounts","machine_runtime","parseInt","isNaN","totalRuntime","Math","round","loadAllData","Promise","all","refreshData","setTimeout","then","runPredictionJob","alert","message","sendMaintenanceAlert","email","prompt","toEmail","className","children","fileName","_jsxFileName","lineNumber","columnNumber","width","height","margin","top","right","left","bottom","strokeDasharray","dataKey","formatter","labelFormatter","fill","cx","cy","labelLine","outerRadius","nameKey","label","percent","toFixed","entry","index","props","payload","angle","position","onClick","disabled","_c","$RefreshReg$"],"sources":["/Users/seshasayeebalaji/Desktop/aws_proj/src/components/Visualization.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { \n  BarChart, Bar, PieChart, Pie, \n  XAxis, YAxis, CartesianGrid, Tooltip, Legend, \n  ResponsiveContainer, Cell\n} from 'recharts';\n\n// Custom colors for charts\nconst COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#8884d8', '#82ca9d'];\n\n// Sample fallback data\nconst sampleErrorCodeData = [\n  { errorCode: \"E123\", count: 42 },\n  { errorCode: \"E045\", count: 38 },\n  { errorCode: \"E211\", count: 27 },\n  { errorCode: \"E078\", count: 19 },\n  { errorCode: \"E156\", count: 15 }\n];\n\nconst samplePredictedFailures = [\n  { name: \"MRI_001\", value: 12 },\n  { name: \"MRI_002\", value: 8 },\n  { name: \"MRI_003\", value: 5 },\n  { name: \"MRI_004\", value: 3 }\n];\n\nconst sampleMachineRuntime = [\n  { machineId: \"MRI_001\", avgRuntime: 452 },\n  { machineId: \"MRI_002\", avgRuntime: 387 },\n  { machineId: \"MRI_003\", avgRuntime: 521 },\n  { machineId: \"MRI_004\", avgRuntime: 312 }\n];\n\nexport default function Visualization() {\n  // State for each data type\n  const [errorCodeData, setErrorCodeData] = useState(sampleErrorCodeData);\n  const [predictedFailuresData, setPredictedFailuresData] = useState(samplePredictedFailures);\n  const [machineRuntimeData, setMachineRuntimeData] = useState(sampleMachineRuntime);\n  const [loading, setLoading] = useState(true);\n  const [dataStatus, setDataStatus] = useState({\n    errorCodes: 'fallback',\n    predictions: 'fallback',\n    runtime: 'fallback'\n  });\n\n  useEffect(() => {\n    // Function to fetch error code data from Athena\n    const fetchErrorCodeData = async () => {\n      try {\n        const response = await fetch('/api/search-athena', {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({ keyword: 'Error' })\n        });\n        \n        if (!response.ok) throw new Error('Failed to fetch error codes');\n        \n        const result = await response.json();\n        \n        // Process the API response\n        if (result.data && result.data.length > 1) {\n          const errorCodeCounts = {};\n          \n          // Skip the first row which is typically headers\n          result.data.slice(1).forEach(row => {\n            if (row.Data && row.Data[2] && row.Data[2].VarCharValue) {\n              const errorCode = row.Data[2].VarCharValue;\n              errorCodeCounts[errorCode] = (errorCodeCounts[errorCode] || 0) + 1;\n            }\n          });\n          \n          const processedData = Object.entries(errorCodeCounts)\n            .map(([code, count]) => ({ errorCode: code, count }))\n            .sort((a, b) => b.count - a.count)\n            .slice(0, 10);\n          \n          if (processedData.length > 0) {\n            setErrorCodeData(processedData);\n            setDataStatus(prev => ({ ...prev, errorCodes: 'loaded' }));\n          }\n        }\n      } catch (error) {\n        console.error(\"Error fetching error codes:\", error);\n        // Fallback data already set in state initialization\n      }\n    };\n\n    // Function to fetch predicted failures data from Azure/Databricks\n    const fetchPredictedFailuresData = async () => {\n      try {\n        const response = await fetch('/api/latest-predictions');\n        if (!response.ok) throw new Error('Failed to fetch predictions');\n        \n        const result = await response.json();\n        \n        if (result.data && result.data.length > 0) {\n          const machineFailureCounts = {};\n          \n          result.data.forEach(item => {\n            const machineId = item.machine_id;\n            if (machineId) {\n              machineFailureCounts[machineId] = (machineFailureCounts[machineId] || 0) + 1;\n            }\n          });\n          \n          const processedData = Object.entries(machineFailureCounts)\n            .map(([machine, value]) => ({ name: machine, value }));\n          \n          if (processedData.length > 0) {\n            setPredictedFailuresData(processedData);\n            setDataStatus(prev => ({ ...prev, predictions: 'loaded' }));\n          }\n        }\n      } catch (error) {\n        console.error(\"Error fetching predictions:\", error);\n        // Fallback data already set in state initialization\n      }\n    };\n\n    // Function to fetch machine runtime data from S3 logs\n    const fetchMachineRuntimeData = async () => {\n      try {\n        const response = await fetch('/api/latest-s3-log');\n        if (!response.ok) throw new Error('Failed to fetch runtime data');\n        \n        const result = await response.json();\n        \n        if (result.data && result.data.length > 0) {\n          const machineRuntimes = {};\n          const runtimeCounts = {};\n          \n          result.data.forEach(item => {\n            if (item.machine_id && item.machine_runtime) {\n              const machineId = item.machine_id;\n              const runtime = parseInt(item.machine_runtime, 10);\n              \n              if (!isNaN(runtime)) {\n                if (!machineRuntimes[machineId]) {\n                  machineRuntimes[machineId] = 0;\n                  runtimeCounts[machineId] = 0;\n                }\n                machineRuntimes[machineId] += runtime;\n                runtimeCounts[machineId]++;\n              }\n            }\n          });\n          \n          const processedData = Object.entries(machineRuntimes)\n            .map(([machine, totalRuntime]) => ({\n              machineId: machine,\n              avgRuntime: Math.round(totalRuntime / (runtimeCounts[machine] || 1))\n            }));\n          \n          if (processedData.length > 0) {\n            setMachineRuntimeData(processedData);\n            setDataStatus(prev => ({ ...prev, runtime: 'loaded' }));\n          }\n        }\n      } catch (error) {\n        console.error(\"Error fetching runtime data:\", error);\n        // Fallback data already set in state initialization\n      }\n    };\n\n    // Load all data\n    const loadAllData = async () => {\n      setLoading(true);\n      await Promise.all([\n        fetchErrorCodeData(),\n        fetchPredictedFailuresData(),\n        fetchMachineRuntimeData()\n      ]);\n      setLoading(false);\n    };\n\n    loadAllData();\n  }, []);\n\n  // Handle API calls for button actions\n  const refreshData = () => {\n    setLoading(true);\n    // Reset to initial state before refreshing\n    setErrorCodeData(sampleErrorCodeData);\n    setPredictedFailuresData(samplePredictedFailures);\n    setMachineRuntimeData(sampleMachineRuntime);\n    setDataStatus({\n      errorCodes: 'loading',\n      predictions: 'loading',\n      runtime: 'loading'\n    });\n    \n    // Re-fetch data instead of page reload\n    setTimeout(() => {\n      Promise.all([\n        fetchErrorCodeData(),\n        fetchPredictedFailuresData(),\n        fetchMachineRuntimeData()\n      ]).then(() => {\n        setLoading(false);\n      });\n    }, 1000);\n  };\n\n  const runPredictionJob = async () => {\n    try {\n      const response = await fetch('/api/run-databricks-job', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' }\n      });\n      \n      if (!response.ok) throw new Error('Failed to trigger job');\n      \n      const result = await response.json();\n      alert('Prediction job triggered successfully!');\n    } catch (error) {\n      console.error(\"Error triggering prediction job:\", error);\n      alert('Failed to trigger prediction job: ' + error.message);\n    }\n  };\n\n  const sendMaintenanceAlert = async () => {\n    const email = prompt('Enter email address for maintenance alert:');\n    \n    if (!email) return;\n    \n    try {\n      const response = await fetch('/api/send-maintenance-alert', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ toEmail: email })\n      });\n      \n      if (!response.ok) throw new Error('Failed to send email');\n      \n      const result = await response.json();\n      alert('Maintenance alert sent successfully!');\n    } catch (error) {\n      console.error(\"Error sending email:\", error);\n      alert('Failed to send email: ' + error.message);\n    }\n  };\n\n  // Function to handle missing fetchErrorCodeData, fetchPredictedFailuresData, and fetchMachineRuntimeData references\n  const fetchErrorCodeData = async () => {\n    try {\n      const response = await fetch('/api/search-athena', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ keyword: 'Error' })\n      });\n      \n      if (!response.ok) throw new Error('Failed to fetch error codes');\n      \n      const result = await response.json();\n      \n      if (result.data && result.data.length > 1) {\n        const errorCodeCounts = {};\n        \n        result.data.slice(1).forEach(row => {\n          if (row.Data && row.Data[2] && row.Data[2].VarCharValue) {\n            const errorCode = row.Data[2].VarCharValue;\n            errorCodeCounts[errorCode] = (errorCodeCounts[errorCode] || 0) + 1;\n          }\n        });\n        \n        const processedData = Object.entries(errorCodeCounts)\n          .map(([code, count]) => ({ errorCode: code, count }))\n          .sort((a, b) => b.count - a.count)\n          .slice(0, 10);\n        \n        if (processedData.length > 0) {\n          setErrorCodeData(processedData);\n          setDataStatus(prev => ({ ...prev, errorCodes: 'loaded' }));\n        }\n      }\n    } catch (error) {\n      console.error(\"Error fetching error codes:\", error);\n      setDataStatus(prev => ({ ...prev, errorCodes: 'error' }));\n    }\n  };\n\n  const fetchPredictedFailuresData = async () => {\n    try {\n      const response = await fetch('/api/latest-predictions');\n      if (!response.ok) throw new Error('Failed to fetch predictions');\n      \n      const result = await response.json();\n      \n      if (result.data && result.data.length > 0) {\n        const machineFailureCounts = {};\n        \n        result.data.forEach(item => {\n          const machineId = item.machine_id;\n          if (machineId) {\n            machineFailureCounts[machineId] = (machineFailureCounts[machineId] || 0) + 1;\n          }\n        });\n        \n        const processedData = Object.entries(machineFailureCounts)\n          .map(([machine, value]) => ({ name: machine, value }));\n        \n        if (processedData.length > 0) {\n          setPredictedFailuresData(processedData);\n          setDataStatus(prev => ({ ...prev, predictions: 'loaded' }));\n        }\n      }\n    } catch (error) {\n      console.error(\"Error fetching predictions:\", error);\n      setDataStatus(prev => ({ ...prev, predictions: 'error' }));\n    }\n  };\n\n  const fetchMachineRuntimeData = async () => {\n    try {\n      const response = await fetch('/api/latest-s3-log');\n      if (!response.ok) throw new Error('Failed to fetch runtime data');\n      \n      const result = await response.json();\n      \n      if (result.data && result.data.length > 0) {\n        const machineRuntimes = {};\n        const runtimeCounts = {};\n        \n        result.data.forEach(item => {\n          if (item.machine_id && item.machine_runtime) {\n            const machineId = item.machine_id;\n            const runtime = parseInt(item.machine_runtime, 10);\n            \n            if (!isNaN(runtime)) {\n              if (!machineRuntimes[machineId]) {\n                machineRuntimes[machineId] = 0;\n                runtimeCounts[machineId] = 0;\n              }\n              machineRuntimes[machineId] += runtime;\n              runtimeCounts[machineId]++;\n            }\n          }\n        });\n        \n        const processedData = Object.entries(machineRuntimes)\n          .map(([machine, totalRuntime]) => ({\n            machineId: machine,\n            avgRuntime: Math.round(totalRuntime / (runtimeCounts[machine] || 1))\n          }));\n        \n        if (processedData.length > 0) {\n          setMachineRuntimeData(processedData);\n          setDataStatus(prev => ({ ...prev, runtime: 'loaded' }));\n        }\n      }\n    } catch (error) {\n      console.error(\"Error fetching runtime data:\", error);\n      setDataStatus(prev => ({ ...prev, runtime: 'error' }));\n    }\n  };\n\n  return (\n    <div className=\"p-6 max-w-6xl mx-auto\">\n      <h1 className=\"text-3xl font-bold mb-8\">MRI Machine Analytics Dashboard</h1>\n      \n      {loading ? (\n        <div className=\"text-center py-8\">\n          <p className=\"text-lg\">Loading dashboard data...</p>\n          <div className=\"mt-4 h-2 w-64 bg-gray-200 rounded-full mx-auto\">\n            <div className=\"h-full bg-blue-500 rounded-full animate-pulse\"></div>\n          </div>\n        </div>\n      ) : (\n        <>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8 mb-8\">\n            {/* Error Codes Bar Chart */}\n            <div className=\"bg-white p-6 rounded-lg shadow-md\">\n              <h2 className=\"text-xl font-semibold mb-4\">Most Frequent Error Codes</h2>\n              <div className=\"h-64\">\n                {errorCodeData && errorCodeData.length > 0 ? (\n                  <ResponsiveContainer width=\"100%\" height=\"100%\">\n                    <BarChart data={errorCodeData} margin={{ top: 5, right: 30, left: 20, bottom: 5 }}>\n                      <CartesianGrid strokeDasharray=\"3 3\" />\n                      <XAxis dataKey=\"errorCode\" />\n                      <YAxis />\n                      <Tooltip \n                        formatter={(value) => [`${value}`, 'Occurrence Count']}\n                        labelFormatter={(value) => `Error Code: ${value}`}\n                      />\n                      <Legend />\n                      <Bar dataKey=\"count\" fill=\"#8884d8\" name=\"Frequency\" />\n                    </BarChart>\n                  </ResponsiveContainer>\n                ) : (\n                  <div className=\"flex items-center justify-center h-full\">\n                    <p>No error code data available</p>\n                  </div>\n                )}\n              </div>\n              {dataStatus.errorCodes === 'fallback' && (\n                <p className=\"text-sm text-gray-500 mt-2\">Using sample data - API data unavailable</p>\n              )}\n            </div>\n            \n            {/* Predicted Failures Pie Chart */}\n            <div className=\"bg-white p-6 rounded-lg shadow-md\">\n              <h2 className=\"text-xl font-semibold mb-4\">Predicted Failures by Machine</h2>\n              <div className=\"h-64\">\n                {predictedFailuresData && predictedFailuresData.length > 0 ? (\n                  <ResponsiveContainer width=\"100%\" height=\"100%\">\n                    <PieChart>\n                      <Pie\n                        data={predictedFailuresData}\n                        cx=\"50%\"\n                        cy=\"50%\"\n                        labelLine={true}\n                        outerRadius={80}\n                        fill=\"#8884d8\"\n                        dataKey=\"value\"\n                        nameKey=\"name\"\n                        label={({ name, percent }) => `${name}: ${(percent * 100).toFixed(0)}%`}\n                      >\n                        {predictedFailuresData.map((entry, index) => (\n                          <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\n                        ))}\n                      </Pie>\n                      <Tooltip formatter={(value, name, props) => [`${value} predicted failures`, props.payload.name]} />\n                      <Legend />\n                    </PieChart>\n                  </ResponsiveContainer>\n                ) : (\n                  <div className=\"flex items-center justify-center h-full\">\n                    <p>No prediction data available</p>\n                  </div>\n                )}\n              </div>\n              {dataStatus.predictions === 'fallback' && (\n                <p className=\"text-sm text-gray-500 mt-2\">Using sample data - API data unavailable</p>\n              )}\n            </div>\n          </div>\n          \n          {/* Machine Runtime Bar Chart */}\n          <div className=\"bg-white p-6 rounded-lg shadow-md mb-8\">\n            <h2 className=\"text-xl font-semibold mb-4\">Average Runtime of Machines</h2>\n            <div className=\"h-64\">\n              {machineRuntimeData && machineRuntimeData.length > 0 ? (\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <BarChart data={machineRuntimeData} margin={{ top: 5, right: 30, left: 20, bottom: 5 }}>\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis dataKey=\"machineId\" />\n                    <YAxis label={{ value: 'Runtime (seconds)', angle: -90, position: 'insideLeft' }} />\n                    <Tooltip formatter={(value) => [`${value.toFixed(1)} seconds`, 'Avg Runtime']} />\n                    <Legend />\n                    <Bar dataKey=\"avgRuntime\" fill=\"#82ca9d\" name=\"Average Runtime (seconds)\" />\n                  </BarChart>\n                </ResponsiveContainer>\n              ) : (\n                <div className=\"flex items-center justify-center h-full\">\n                  <p>No runtime data available</p>\n                </div>\n              )}\n            </div>\n            {dataStatus.runtime === 'fallback' && (\n              <p className=\"text-sm text-gray-500 mt-2\">Using sample data - API data unavailable</p>\n            )}\n          </div>\n          \n          {/* Dashboard Controls */}\n          <div className=\"bg-white p-6 rounded-lg shadow-md\">\n            <h2 className=\"text-xl font-semibold mb-4\">Dashboard Controls</h2>\n            <div className=\"flex flex-wrap gap-4\">\n              <button \n                className=\"bg-blue-600 hover:bg-blue-700 text-white py-2 px-4 rounded-md transition duration-300\"\n                onClick={refreshData}\n                disabled={loading}\n              >\n                {loading ? 'Refreshing...' : 'Refresh Data'}\n              </button>\n              <button \n                className=\"bg-green-600 hover:bg-green-700 text-white py-2 px-4 rounded-md transition duration-300\"\n                onClick={runPredictionJob}\n                disabled={loading}\n              >\n                Run Prediction Job\n              </button>\n              <button \n                className=\"bg-purple-600 hover:bg-purple-700 text-white py-2 px-4 rounded-md transition duration-300\"\n                onClick={sendMaintenanceAlert}\n                disabled={loading}\n              >\n                Send Maintenance Alert\n              </button>\n            </div>\n          </div>\n        </>\n      )}\n    </div>\n  );\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}