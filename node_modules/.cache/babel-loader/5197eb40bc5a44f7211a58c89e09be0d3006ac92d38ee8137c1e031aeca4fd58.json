{"ast":null,"code":"var _jsxFileName = \"/Users/seshasayeebalaji/Desktop/aws_proj/src/components/Visualization.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { BarChart, Bar, PieChart, Pie, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, Cell } from 'recharts';\n\n// Custom colors for charts\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#8884d8', '#82ca9d'];\n\n// Sample fallback data\nconst sampleErrorCodeData = [{\n  errorCode: \"E123\",\n  count: 42\n}, {\n  errorCode: \"E045\",\n  count: 38\n}, {\n  errorCode: \"E211\",\n  count: 27\n}, {\n  errorCode: \"E078\",\n  count: 19\n}, {\n  errorCode: \"E156\",\n  count: 15\n}];\nconst samplePredictedFailures = [{\n  name: \"MRI_001\",\n  value: 12\n}, {\n  name: \"MRI_002\",\n  value: 8\n}, {\n  name: \"MRI_003\",\n  value: 5\n}, {\n  name: \"MRI_004\",\n  value: 3\n}];\nconst sampleMachineRuntime = [{\n  machineId: \"MRI_001\",\n  avgRuntime: 452\n}, {\n  machineId: \"MRI_002\",\n  avgRuntime: 387\n}, {\n  machineId: \"MRI_003\",\n  avgRuntime: 521\n}, {\n  machineId: \"MRI_004\",\n  avgRuntime: 312\n}];\nexport default function Visualization() {\n  _s();\n  const [errorCodeData, setErrorCodeData] = useState([]);\n  const [predictedFailuresData, setPredictedFailuresData] = useState([]);\n  const [machineRuntimeData, setMachineRuntimeData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    loadAllData();\n  }, []);\n  const loadAllData = async () => {\n    setLoading(true);\n    await Promise.all([fetchErrorCodeData(), fetchPredictedFailuresData(), fetchMachineRuntimeData()]);\n    setLoading(false);\n  };\n  const fetchErrorCodeData = async () => {\n    try {\n      const response = await fetch('/api/search-athena', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          keyword: 'Error'\n        })\n      });\n      if (!response.ok) throw new Error('Failed to fetch error codes');\n      const result = await response.json();\n      if (result.data && result.data.length > 1) {\n        const errorCodeCounts = {};\n        result.data.slice(1).forEach(row => {\n          if (row.Data && row.Data[2] && row.Data[2].VarCharValue) {\n            const errorCode = row.Data[2].VarCharValue;\n            errorCodeCounts[errorCode] = (errorCodeCounts[errorCode] || 0) + 1;\n          }\n        });\n        const processed = Object.entries(errorCodeCounts).map(([errorCode, count]) => ({\n          errorCode,\n          count\n        })).sort((a, b) => b.count - a.count).slice(0, 10);\n        setErrorCodeData(processed.length > 0 ? processed : sampleErrorCodeData);\n      } else {\n        setErrorCodeData(sampleErrorCodeData);\n      }\n    } catch (err) {\n      console.error('Error loading error code data:', err);\n      setErrorCodeData(sampleErrorCodeData);\n    }\n  };\n  const fetchPredictedFailuresData = async () => {\n    try {\n      const response = await fetch(\"http://localhost:3001/api/latest-predictions\");\n      const result = await response.json();\n      if (result.success && Array.isArray(result.data)) {\n        const processed = result.data.map(item => ({\n          name: item.machine_id,\n          value: parseFloat(item.avg_predicted_errors)\n        }));\n        setPredictedFailuresData(processed);\n      } else {\n        setPredictedFailuresData(samplePredictedFailures);\n      }\n    } catch (error) {\n      console.error(\"Error fetching predicted failures data:\", error);\n      setPredictedFailuresData(samplePredictedFailures);\n    }\n  };\n  const fetchMachineRuntimeData = async () => {\n    try {\n      const response = await fetch('/api/search-athena');\n      if (!response.ok) throw new Error('Failed to fetch runtime data');\n      const result = await response.json();\n      console.log('Athena raw runtime data:', result.data);\n      if (result.data && Array.isArray(result.data) && result.data.length > 1) {\n        const runtimeSum = {};\n        const count = {};\n\n        // Skip the header row (usually first)\n        result.data.slice(1).forEach(entry => {\n          var _row$, _row$2;\n          const row = entry.Data;\n          if (!row || row.length < 7) return;\n          const machineId = (_row$ = row[1]) === null || _row$ === void 0 ? void 0 : _row$.VarCharValue;\n          const runtimeStr = (_row$2 = row[6]) === null || _row$2 === void 0 ? void 0 : _row$2.VarCharValue;\n          const runtime = parseInt(runtimeStr, 10);\n          if (machineId && !isNaN(runtime)) {\n            runtimeSum[machineId] = (runtimeSum[machineId] || 0) + runtime;\n            count[machineId] = (count[machineId] || 0) + 1;\n          }\n        });\n        const processed = Object.keys(runtimeSum).map(machineId => ({\n          machineId,\n          avgRuntime: Math.round(runtimeSum[machineId] / count[machineId])\n        }));\n        console.log('Processed runtime chart data:', processed);\n        setMachineRuntimeData(processed);\n      } else {\n        console.warn('No runtime data received');\n        setMachineRuntimeData(sampleMachineRuntime); // fallback\n      }\n    } catch (err) {\n      console.error('Error fetching runtime data:', err);\n      setMachineRuntimeData(sampleMachineRuntime);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"p-4 bg-gray-100 min-h-screen\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"text-3xl font-bold mb-4 text-center text-gray-800\",\n      children: \"Machine Monitoring Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex justify-center mb-6\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: loadAllData,\n        className: \"bg-violet-600 hover:bg-violet-700 text-white font-semibold py-2 px-4 rounded shadow\",\n        children: \"Refresh Data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 7\n    }, this), loading && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-center text-gray-600 mb-4\",\n      children: \"Loading charts, please wait...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid grid-cols-1 md:grid-cols-2 gap-6\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-white p-4 rounded-lg shadow-md\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"text-xl font-semibold mb-2 text-gray-700\",\n          children: \"Top Error Codes\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n          width: \"100%\",\n          height: 300,\n          children: /*#__PURE__*/_jsxDEV(BarChart, {\n            data: errorCodeData,\n            children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n              strokeDasharray: \"3 3\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 175,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n              dataKey: \"errorCode\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 176,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 177,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 178,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 179,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Bar, {\n              dataKey: \"count\",\n              fill: \"#8884d8\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 180,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 174,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-white p-4 rounded-lg shadow-md\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"text-xl font-semibold mb-2 text-gray-700\",\n          children: \"Predicted Machine Failures\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n          width: \"100%\",\n          height: 300,\n          children: /*#__PURE__*/_jsxDEV(PieChart, {\n            children: [/*#__PURE__*/_jsxDEV(Pie, {\n              data: predictedFailuresData,\n              dataKey: \"value\",\n              nameKey: \"name\",\n              cx: \"50%\",\n              cy: \"50%\",\n              outerRadius: 100,\n              label: true,\n              children: predictedFailuresData.map((entry, index) => /*#__PURE__*/_jsxDEV(Cell, {\n                fill: COLORS[index % COLORS.length]\n              }, `cell-${index}`, false, {\n                fileName: _jsxFileName,\n                lineNumber: 200,\n                columnNumber: 19\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 190,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 203,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 204,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 189,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-white p-4 rounded-lg shadow-md md:col-span-2\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"text-xl font-semibold mb-2 text-gray-700\",\n          children: \"Average Machine Runtime (mins)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n          width: \"100%\",\n          height: 300,\n          children: /*#__PURE__*/_jsxDEV(BarChart, {\n            data: machineRuntimeData,\n            children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n              strokeDasharray: \"3 3\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 214,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n              dataKey: \"machineId\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 215,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 216,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 217,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 218,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Bar, {\n              dataKey: \"avgRuntime\",\n              fill: \"#82ca9d\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 219,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 213,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 153,\n    columnNumber: 5\n  }, this);\n}\n_s(Visualization, \"CHgrFx1arUrVnubc2DtTTfrUBWo=\");\n_c = Visualization;\nvar _c;\n$RefreshReg$(_c, \"Visualization\");","map":{"version":3,"names":["React","useState","useEffect","BarChart","Bar","PieChart","Pie","XAxis","YAxis","CartesianGrid","Tooltip","Legend","ResponsiveContainer","Cell","jsxDEV","_jsxDEV","COLORS","sampleErrorCodeData","errorCode","count","samplePredictedFailures","name","value","sampleMachineRuntime","machineId","avgRuntime","Visualization","_s","errorCodeData","setErrorCodeData","predictedFailuresData","setPredictedFailuresData","machineRuntimeData","setMachineRuntimeData","loading","setLoading","loadAllData","Promise","all","fetchErrorCodeData","fetchPredictedFailuresData","fetchMachineRuntimeData","response","fetch","method","headers","body","JSON","stringify","keyword","ok","Error","result","json","data","length","errorCodeCounts","slice","forEach","row","Data","VarCharValue","processed","Object","entries","map","sort","a","b","err","console","error","success","Array","isArray","item","machine_id","parseFloat","avg_predicted_errors","log","runtimeSum","entry","_row$","_row$2","runtimeStr","runtime","parseInt","isNaN","keys","Math","round","warn","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","width","height","strokeDasharray","dataKey","fill","nameKey","cx","cy","outerRadius","label","index","_c","$RefreshReg$"],"sources":["/Users/seshasayeebalaji/Desktop/aws_proj/src/components/Visualization.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport {\n  BarChart, Bar, PieChart, Pie,\n  XAxis, YAxis, CartesianGrid, Tooltip, Legend,\n  ResponsiveContainer, Cell\n} from 'recharts';\n\n// Custom colors for charts\nconst COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#8884d8', '#82ca9d'];\n\n// Sample fallback data\nconst sampleErrorCodeData = [\n  { errorCode: \"E123\", count: 42 },\n  { errorCode: \"E045\", count: 38 },\n  { errorCode: \"E211\", count: 27 },\n  { errorCode: \"E078\", count: 19 },\n  { errorCode: \"E156\", count: 15 }\n];\n\nconst samplePredictedFailures = [\n  { name: \"MRI_001\", value: 12 },\n  { name: \"MRI_002\", value: 8 },\n  { name: \"MRI_003\", value: 5 },\n  { name: \"MRI_004\", value: 3 }\n];\n\nconst sampleMachineRuntime = [\n  { machineId: \"MRI_001\", avgRuntime: 452 },\n  { machineId: \"MRI_002\", avgRuntime: 387 },\n  { machineId: \"MRI_003\", avgRuntime: 521 },\n  { machineId: \"MRI_004\", avgRuntime: 312 }\n];\n\nexport default function Visualization() {\n  const [errorCodeData, setErrorCodeData] = useState([]);\n  const [predictedFailuresData, setPredictedFailuresData] = useState([]);\n  const [machineRuntimeData, setMachineRuntimeData] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    loadAllData();\n  }, []);\n\n  const loadAllData = async () => {\n    setLoading(true);\n    await Promise.all([\n      fetchErrorCodeData(),\n      fetchPredictedFailuresData(),\n      fetchMachineRuntimeData()\n    ]);\n    setLoading(false);\n  };\n\n  const fetchErrorCodeData = async () => {\n    try {\n      const response = await fetch('/api/search-athena', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ keyword: 'Error' })\n      });\n\n      if (!response.ok) throw new Error('Failed to fetch error codes');\n      const result = await response.json();\n\n      if (result.data && result.data.length > 1) {\n        const errorCodeCounts = {};\n        result.data.slice(1).forEach(row => {\n          if (row.Data && row.Data[2] && row.Data[2].VarCharValue) {\n            const errorCode = row.Data[2].VarCharValue;\n            errorCodeCounts[errorCode] = (errorCodeCounts[errorCode] || 0) + 1;\n          }\n        });\n\n        const processed = Object.entries(errorCodeCounts)\n          .map(([errorCode, count]) => ({ errorCode, count }))\n          .sort((a, b) => b.count - a.count)\n          .slice(0, 10);\n\n        setErrorCodeData(processed.length > 0 ? processed : sampleErrorCodeData);\n      } else {\n        setErrorCodeData(sampleErrorCodeData);\n      }\n    } catch (err) {\n      console.error('Error loading error code data:', err);\n      setErrorCodeData(sampleErrorCodeData);\n    }\n  };\n\n  const fetchPredictedFailuresData = async () => {\n    try {\n      const response = await fetch(\"http://localhost:3001/api/latest-predictions\");\n      const result = await response.json();\n  \n      if (result.success && Array.isArray(result.data)) {\n        const processed = result.data.map(item => ({\n          name: item.machine_id,\n          value: parseFloat(item.avg_predicted_errors)\n        }));\n        setPredictedFailuresData(processed);\n      } else {\n        setPredictedFailuresData(samplePredictedFailures);\n      }\n    } catch (error) {\n      console.error(\"Error fetching predicted failures data:\", error);\n      setPredictedFailuresData(samplePredictedFailures);\n    }\n  };\n  const fetchMachineRuntimeData = async () => {\n    try {\n      const response = await fetch('/api/search-athena');\n      if (!response.ok) throw new Error('Failed to fetch runtime data');\n  \n      const result = await response.json();\n      console.log('Athena raw runtime data:', result.data);\n  \n      if (result.data && Array.isArray(result.data) && result.data.length > 1) {\n        const runtimeSum = {};\n        const count = {};\n  \n        // Skip the header row (usually first)\n        result.data.slice(1).forEach(entry => {\n          const row = entry.Data;\n          if (!row || row.length < 7) return;\n  \n          const machineId = row[1]?.VarCharValue;\n          const runtimeStr = row[6]?.VarCharValue;\n  \n          const runtime = parseInt(runtimeStr, 10);\n          if (machineId && !isNaN(runtime)) {\n            runtimeSum[machineId] = (runtimeSum[machineId] || 0) + runtime;\n            count[machineId] = (count[machineId] || 0) + 1;\n          }\n        });\n  \n        const processed = Object.keys(runtimeSum).map(machineId => ({\n          machineId,\n          avgRuntime: Math.round(runtimeSum[machineId] / count[machineId])\n        }));\n  \n        console.log('Processed runtime chart data:', processed);\n        setMachineRuntimeData(processed);\n      } else {\n        console.warn('No runtime data received');\n        setMachineRuntimeData(sampleMachineRuntime); // fallback\n      }\n    } catch (err) {\n      console.error('Error fetching runtime data:', err);\n      setMachineRuntimeData(sampleMachineRuntime);\n    }\n  };\n  \n  return (\n    <div className=\"p-4 bg-gray-100 min-h-screen\">\n      <h1 className=\"text-3xl font-bold mb-4 text-center text-gray-800\">Machine Monitoring Dashboard</h1>\n\n      <div className=\"flex justify-center mb-6\">\n        <button\n          onClick={loadAllData}\n          className=\"bg-violet-600 hover:bg-violet-700 text-white font-semibold py-2 px-4 rounded shadow\"\n        >\n          Refresh Data\n        </button>\n      </div>\n\n      {loading && (\n        <div className=\"text-center text-gray-600 mb-4\">Loading charts, please wait...</div>\n      )}\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n        {/* Error Code Bar Chart */}\n        <div className=\"bg-white p-4 rounded-lg shadow-md\">\n          <h2 className=\"text-xl font-semibold mb-2 text-gray-700\">Top Error Codes</h2>\n          <ResponsiveContainer width=\"100%\" height={300}>\n            <BarChart data={errorCodeData}>\n              <CartesianGrid strokeDasharray=\"3 3\" />\n              <XAxis dataKey=\"errorCode\" />\n              <YAxis />\n              <Tooltip />\n              <Legend />\n              <Bar dataKey=\"count\" fill=\"#8884d8\" />\n            </BarChart>\n          </ResponsiveContainer>\n        </div>\n\n        {/* Predicted Failures Pie Chart */}\n        <div className=\"bg-white p-4 rounded-lg shadow-md\">\n          <h2 className=\"text-xl font-semibold mb-2 text-gray-700\">Predicted Machine Failures</h2>\n          <ResponsiveContainer width=\"100%\" height={300}>\n            <PieChart>\n              <Pie\n                data={predictedFailuresData}\n                dataKey=\"value\"\n                nameKey=\"name\"\n                cx=\"50%\"\n                cy=\"50%\"\n                outerRadius={100}\n                label\n              >\n                {predictedFailuresData.map((entry, index) => (\n                  <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\n                ))}\n              </Pie>\n              <Tooltip />\n              <Legend />\n            </PieChart>\n          </ResponsiveContainer>\n        </div>\n\n        {/* Machine Runtime Bar Chart */}\n        <div className=\"bg-white p-4 rounded-lg shadow-md md:col-span-2\">\n          <h2 className=\"text-xl font-semibold mb-2 text-gray-700\">Average Machine Runtime (mins)</h2>\n          <ResponsiveContainer width=\"100%\" height={300}>\n            <BarChart data={machineRuntimeData}>\n              <CartesianGrid strokeDasharray=\"3 3\" />\n              <XAxis dataKey=\"machineId\" />\n              <YAxis />\n              <Tooltip />\n              <Legend />\n              <Bar dataKey=\"avgRuntime\" fill=\"#82ca9d\" />\n            </BarChart>\n          </ResponsiveContainer>\n        </div>\n      </div>\n    </div>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}