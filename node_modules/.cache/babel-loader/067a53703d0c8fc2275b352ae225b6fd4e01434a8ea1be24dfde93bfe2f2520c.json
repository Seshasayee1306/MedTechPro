{"ast":null,"code":"var _jsxFileName = \"/Users/seshasayeebalaji/Desktop/aws_proj/src/components/Visualization.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { BarChart, Bar, PieChart, Pie, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, Cell } from 'recharts';\n\n// Custom colors for charts\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#8884d8', '#82ca9d'];\n\n// Sample data - this will be displayed immediately and ensures charts render\nconst SAMPLE_ERROR_CODE_DATA = [{\n  errorCode: \"E123\",\n  count: 42\n}, {\n  errorCode: \"E045\",\n  count: 38\n}, {\n  errorCode: \"E211\",\n  count: 27\n}, {\n  errorCode: \"E078\",\n  count: 19\n}, {\n  errorCode: \"E156\",\n  count: 15\n}];\nconst SAMPLE_PREDICTED_FAILURES = [{\n  name: \"MRI_001\",\n  value: 12\n}, {\n  name: \"MRI_002\",\n  value: 8\n}, {\n  name: \"MRI_003\",\n  value: 5\n}, {\n  name: \"MRI_004\",\n  value: 3\n}];\nconst SAMPLE_MACHINE_RUNTIME = [{\n  machineId: \"MRI_001\",\n  avgRuntime: 452\n}, {\n  machineId: \"MRI_002\",\n  avgRuntime: 387\n}, {\n  machineId: \"MRI_003\",\n  avgRuntime: 521\n}, {\n  machineId: \"MRI_004\",\n  avgRuntime: 312\n}];\nexport default function Visualization() {\n  _s();\n  // Initialize with sample data to ensure immediate rendering\n  const [errorCodeData, setErrorCodeData] = useState(SAMPLE_ERROR_CODE_DATA);\n  const [predictedFailuresData, setPredictedFailuresData] = useState(SAMPLE_PREDICTED_FAILURES);\n  const [machineRuntimeData, setMachineRuntimeData] = useState(SAMPLE_MACHINE_RUNTIME);\n  const [loading, setLoading] = useState(false);\n  const [dataStatus, setDataStatus] = useState({\n    errorCodes: 'fallback',\n    predictions: 'fallback',\n    runtime: 'fallback'\n  });\n\n  // This component matches the MedTechPro styling seen in the screenshot\n  const TopNavBar = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"bg-blue-600 text-white p-2 flex justify-between items-center\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex items-center\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-white p-1 rounded mr-2\",\n        children: /*#__PURE__*/_jsxDEV(\"svg\", {\n          xmlns: \"http://www.w3.org/2000/svg\",\n          className: \"h-6 w-6 text-blue-600\",\n          fill: \"none\",\n          viewBox: \"0 0 24 24\",\n          stroke: \"currentColor\",\n          children: /*#__PURE__*/_jsxDEV(\"path\", {\n            strokeLinecap: \"round\",\n            strokeLinejoin: \"round\",\n            strokeWidth: 2,\n            d: \"M12 6v6m0 0v6m0-6h6m-6 0H6\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"text-xl font-bold\",\n        children: \"MedTechPro\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex space-x-6\",\n      children: [/*#__PURE__*/_jsxDEV(\"a\", {\n        href: \"#\",\n        className: \"hover:underline\",\n        children: \"Dashboard\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n        href: \"#\",\n        className: \"hover:underline\",\n        children: \"Inventory\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n        href: \"#\",\n        className: \"hover:underline\",\n        children: \"Maintenance\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n        href: \"#\",\n        className: \"hover:underline\",\n        children: \"Search Records\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n        href: \"#\",\n        className: \"hover:underline\",\n        children: \"Alerts\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n        href: \"#\",\n        className: \"font-bold underline\",\n        children: \"Real-Time Graphs\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n\n  // Function to fetch error code data\n  const fetchErrorCodeData = async () => {\n    try {\n      setDataStatus(prev => ({\n        ...prev,\n        errorCodes: 'loading'\n      }));\n      const response = await fetch('/api/search-athena', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          keyword: 'Error'\n        })\n      });\n      if (!response.ok) throw new Error('Failed to fetch error codes');\n      const result = await response.json();\n      if (result.data && result.data.length > 1) {\n        const errorCodeCounts = {};\n        result.data.slice(1).forEach(row => {\n          if (row.Data && row.Data[2] && row.Data[2].VarCharValue) {\n            const errorCode = row.Data[2].VarCharValue;\n            errorCodeCounts[errorCode] = (errorCodeCounts[errorCode] || 0) + 1;\n          }\n        });\n        const processedData = Object.entries(errorCodeCounts).map(([code, count]) => ({\n          errorCode: code,\n          count\n        })).sort((a, b) => b.count - a.count).slice(0, 10);\n        if (processedData.length > 0) {\n          setErrorCodeData(processedData);\n          setDataStatus(prev => ({\n            ...prev,\n            errorCodes: 'loaded'\n          }));\n        } else {\n          setDataStatus(prev => ({\n            ...prev,\n            errorCodes: 'fallback'\n          }));\n        }\n      } else {\n        setDataStatus(prev => ({\n          ...prev,\n          errorCodes: 'fallback'\n        }));\n      }\n    } catch (error) {\n      console.error(\"Error fetching error codes:\", error);\n      setDataStatus(prev => ({\n        ...prev,\n        errorCodes: 'fallback'\n      }));\n    }\n  };\n\n  // Function to fetch predicted failures data\n  const fetchPredictedFailuresData = async () => {\n    try {\n      setDataStatus(prev => ({\n        ...prev,\n        predictions: 'loading'\n      }));\n      const response = await fetch('/api/latest-predictions');\n      if (!response.ok) throw new Error('Failed to fetch predictions');\n      const result = await response.json();\n      if (result.data && result.data.length > 0) {\n        const machineFailureCounts = {};\n        result.data.forEach(item => {\n          const machineId = item.machine_id;\n          if (machineId) {\n            machineFailureCounts[machineId] = (machineFailureCounts[machineId] || 0) + 1;\n          }\n        });\n        const processedData = Object.entries(machineFailureCounts).map(([machine, value]) => ({\n          name: machine,\n          value\n        }));\n        if (processedData.length > 0) {\n          setPredictedFailuresData(processedData);\n          setDataStatus(prev => ({\n            ...prev,\n            predictions: 'loaded'\n          }));\n        } else {\n          setDataStatus(prev => ({\n            ...prev,\n            predictions: 'fallback'\n          }));\n        }\n      } else {\n        setDataStatus(prev => ({\n          ...prev,\n          predictions: 'fallback'\n        }));\n      }\n    } catch (error) {\n      console.error(\"Error fetching predictions:\", error);\n      setDataStatus(prev => ({\n        ...prev,\n        predictions: 'fallback'\n      }));\n    }\n  };\n\n  // Function to fetch machine runtime data\n  const fetchMachineRuntimeData = async () => {\n    try {\n      setDataStatus(prev => ({\n        ...prev,\n        runtime: 'loading'\n      }));\n      const response = await fetch('/api/latest-s3-log');\n      if (!response.ok) throw new Error('Failed to fetch runtime data');\n      const result = await response.json();\n      if (result.data && result.data.length > 0) {\n        const machineRuntimes = {};\n        const runtimeCounts = {};\n        result.data.forEach(item => {\n          if (item.machine_id && item.machine_runtime) {\n            const machineId = item.machine_id;\n            const runtime = parseInt(item.machine_runtime, 10);\n            if (!isNaN(runtime)) {\n              if (!machineRuntimes[machineId]) {\n                machineRuntimes[machineId] = 0;\n                runtimeCounts[machineId] = 0;\n              }\n              machineRuntimes[machineId] += runtime;\n              runtimeCounts[machineId]++;\n            }\n          }\n        });\n        const processedData = Object.entries(machineRuntimes).map(([machine, totalRuntime]) => ({\n          machineId: machine,\n          avgRuntime: Math.round(totalRuntime / (runtimeCounts[machine] || 1))\n        }));\n        if (processedData.length > 0) {\n          setMachineRuntimeData(processedData);\n          setDataStatus(prev => ({\n            ...prev,\n            runtime: 'loaded'\n          }));\n        } else {\n          setDataStatus(prev => ({\n            ...prev,\n            runtime: 'fallback'\n          }));\n        }\n      } else {\n        setDataStatus(prev => ({\n          ...prev,\n          runtime: 'fallback'\n        }));\n      }\n    } catch (error) {\n      console.error(\"Error fetching runtime data:\", error);\n      setDataStatus(prev => ({\n        ...prev,\n        runtime: 'fallback'\n      }));\n    }\n  };\n\n  // Load data when component mounts\n  useEffect(() => {\n    const fetchAllData = async () => {\n      setLoading(true);\n      try {\n        await Promise.all([fetchErrorCodeData(), fetchPredictedFailuresData(), fetchMachineRuntimeData()]);\n      } catch (error) {\n        console.error(\"Error fetching data:\", error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchAllData();\n\n    // Optional: Set up polling for real-time updates\n    // const interval = setInterval(fetchAllData, 60000); // Update every minute\n    // return () => clearInterval(interval);\n  }, []);\n\n  // Handler for refreshing data\n  const refreshData = () => {\n    setLoading(true);\n    Promise.all([fetchErrorCodeData(), fetchPredictedFailuresData(), fetchMachineRuntimeData()]).finally(() => {\n      setLoading(false);\n    });\n  };\n\n  // Handler for running prediction job\n  const runPredictionJob = async () => {\n    try {\n      const response = await fetch('/api/run-databricks-job', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      if (!response.ok) throw new Error('Failed to trigger job');\n      const result = await response.json();\n      alert('Prediction job triggered successfully!');\n    } catch (error) {\n      console.error(\"Error triggering prediction job:\", error);\n      alert('Failed to trigger prediction job: ' + error.message);\n    }\n  };\n\n  // Handler for sending maintenance alert\n  const sendMaintenanceAlert = async () => {\n    const email = prompt('Enter email address for maintenance alert:');\n    if (!email) return;\n    try {\n      const response = await fetch('/api/send-maintenance-alert', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          toEmail: email\n        })\n      });\n      if (!response.ok) throw new Error('Failed to send email');\n      const result = await response.json();\n      alert('Maintenance alert sent successfully!');\n    } catch (error) {\n      console.error(\"Error sending email:\", error);\n      alert('Failed to send email: ' + error.message);\n    }\n  };\n\n  // Error Code Chart Component\n  const ErrorCodeChart = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"bg-white p-6 rounded-lg shadow-md mb-6\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-xl font-semibold mb-4\",\n      children: \"Most Frequent Error Codes\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 281,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"h-64\",\n      children: /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n        width: \"100%\",\n        height: \"100%\",\n        children: /*#__PURE__*/_jsxDEV(BarChart, {\n          data: errorCodeData,\n          margin: {\n            top: 5,\n            right: 30,\n            left: 20,\n            bottom: 5\n          },\n          children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n            strokeDasharray: \"3 3\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 285,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n            dataKey: \"errorCode\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 286,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 287,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n            formatter: value => [`${value}`, 'Occurrence Count'],\n            labelFormatter: value => `Error Code: ${value}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 288,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 292,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Bar, {\n            dataKey: \"count\",\n            fill: \"#8884d8\",\n            name: \"Frequency\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 293,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 284,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 283,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 282,\n      columnNumber: 7\n    }, this), dataStatus.errorCodes === 'fallback' && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-sm text-gray-500 mt-2\",\n      children: \"Using sample data - API data unavailable\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 298,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 280,\n    columnNumber: 5\n  }, this);\n\n  // Predicted Failures Chart Component\n  const PredictedFailuresChart = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"bg-white p-6 rounded-lg shadow-md mb-6\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-xl font-semibold mb-4\",\n      children: \"Predicted Failures by Machine\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 306,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"h-64\",\n      children: /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n        width: \"100%\",\n        height: \"100%\",\n        children: /*#__PURE__*/_jsxDEV(PieChart, {\n          children: [/*#__PURE__*/_jsxDEV(Pie, {\n            data: predictedFailuresData,\n            cx: \"50%\",\n            cy: \"50%\",\n            labelLine: true,\n            outerRadius: 80,\n            fill: \"#8884d8\",\n            dataKey: \"value\",\n            nameKey: \"name\",\n            label: ({\n              name,\n              percent\n            }) => `${name}: ${(percent * 100).toFixed(0)}%`,\n            children: predictedFailuresData.map((entry, index) => /*#__PURE__*/_jsxDEV(Cell, {\n              fill: COLORS[index % COLORS.length]\n            }, `cell-${index}`, false, {\n              fileName: _jsxFileName,\n              lineNumber: 322,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 310,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n            formatter: (value, name, props) => [`${value} predicted failures`, props.payload.name]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 325,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 326,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 309,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 308,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 307,\n      columnNumber: 7\n    }, this), dataStatus.predictions === 'fallback' && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-sm text-gray-500 mt-2\",\n      children: \"Using sample data - API data unavailable\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 331,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 305,\n    columnNumber: 5\n  }, this);\n\n  // Machine Runtime Chart Component\n  const RuntimeChart = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"bg-white p-6 rounded-lg shadow-md mb-6\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-xl font-semibold mb-4\",\n      children: \"Average Runtime of Machines\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 339,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"h-64\",\n      children: /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n        width: \"100%\",\n        height: \"100%\",\n        children: /*#__PURE__*/_jsxDEV(BarChart, {\n          data: machineRuntimeData,\n          margin: {\n            top: 5,\n            right: 30,\n            left: 20,\n            bottom: 5\n          },\n          children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n            strokeDasharray: \"3 3\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 343,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n            dataKey: \"machineId\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 344,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n            label: {\n              value: 'Runtime (seconds)',\n              angle: -90,\n              position: 'insideLeft'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 345,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n            formatter: value => [`${value.toFixed(1)} seconds`, 'Avg Runtime']\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 346,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 347,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Bar, {\n            dataKey: \"avgRuntime\",\n            fill: \"#82ca9d\",\n            name: \"Average Runtime (seconds)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 348,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 342,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 341,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 340,\n      columnNumber: 7\n    }, this), dataStatus.runtime === 'fallback' && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-sm text-gray-500 mt-2\",\n      children: \"Using sample data - API data unavailable\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 353,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 338,\n    columnNumber: 5\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"bg-gray-100 min-h-screen\",\n    children: [/*#__PURE__*/_jsxDEV(TopNavBar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 360,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"p-6 max-w-6xl mx-auto\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"text-3xl font-bold mb-8\",\n        children: \"MRI Machine Analytics Dashboard\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 363,\n        columnNumber: 9\n      }, this), loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-center py-8\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-lg\",\n          children: \"Loading dashboard data...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 367,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mt-4 h-2 w-64 bg-gray-200 rounded-full mx-auto\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"h-full bg-blue-500 rounded-full animate-pulse w-1/2\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 369,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 368,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 366,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(ErrorCodeChart, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 374,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(PredictedFailuresChart, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 375,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(RuntimeChart, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 376,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bg-white p-6 rounded-lg shadow-md\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"text-xl font-semibold mb-4\",\n            children: \"Dashboard Controls\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 379,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex flex-wrap gap-4\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"bg-black hover:bg-gray-800 text-white py-2 px-4 rounded-md transition duration-300\",\n              onClick: refreshData,\n              disabled: loading,\n              children: \"Refresh Data\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 381,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"bg-black hover:bg-gray-800 text-white py-2 px-4 rounded-md transition duration-300\",\n              onClick: runPredictionJob,\n              disabled: loading,\n              children: \"Run Prediction Job\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 388,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"bg-black hover:bg-gray-800 text-white py-2 px-4 rounded-md transition duration-300\",\n              onClick: sendMaintenanceAlert,\n              disabled: loading,\n              children: \"Send Maintenance Alert\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 395,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 380,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 378,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 362,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 359,\n    columnNumber: 5\n  }, this);\n}\n_s(Visualization, \"7qGI5WKBOVcmGkXX5Lc9QahaKJg=\");\n_c = Visualization;\nvar _c;\n$RefreshReg$(_c, \"Visualization\");","map":{"version":3,"names":["React","useState","useEffect","BarChart","Bar","PieChart","Pie","XAxis","YAxis","CartesianGrid","Tooltip","Legend","ResponsiveContainer","Cell","jsxDEV","_jsxDEV","Fragment","_Fragment","COLORS","SAMPLE_ERROR_CODE_DATA","errorCode","count","SAMPLE_PREDICTED_FAILURES","name","value","SAMPLE_MACHINE_RUNTIME","machineId","avgRuntime","Visualization","_s","errorCodeData","setErrorCodeData","predictedFailuresData","setPredictedFailuresData","machineRuntimeData","setMachineRuntimeData","loading","setLoading","dataStatus","setDataStatus","errorCodes","predictions","runtime","TopNavBar","className","children","xmlns","fill","viewBox","stroke","strokeLinecap","strokeLinejoin","strokeWidth","d","fileName","_jsxFileName","lineNumber","columnNumber","href","fetchErrorCodeData","prev","response","fetch","method","headers","body","JSON","stringify","keyword","ok","Error","result","json","data","length","errorCodeCounts","slice","forEach","row","Data","VarCharValue","processedData","Object","entries","map","code","sort","a","b","error","console","fetchPredictedFailuresData","machineFailureCounts","item","machine_id","machine","fetchMachineRuntimeData","machineRuntimes","runtimeCounts","machine_runtime","parseInt","isNaN","totalRuntime","Math","round","fetchAllData","Promise","all","refreshData","finally","runPredictionJob","alert","message","sendMaintenanceAlert","email","prompt","toEmail","ErrorCodeChart","width","height","margin","top","right","left","bottom","strokeDasharray","dataKey","formatter","labelFormatter","PredictedFailuresChart","cx","cy","labelLine","outerRadius","nameKey","label","percent","toFixed","entry","index","props","payload","RuntimeChart","angle","position","onClick","disabled","_c","$RefreshReg$"],"sources":["/Users/seshasayeebalaji/Desktop/aws_proj/src/components/Visualization.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { \n  BarChart, Bar, PieChart, Pie, \n  XAxis, YAxis, CartesianGrid, Tooltip, Legend, \n  ResponsiveContainer, Cell\n} from 'recharts';\n\n// Custom colors for charts\nconst COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#8884d8', '#82ca9d'];\n\n// Sample data - this will be displayed immediately and ensures charts render\nconst SAMPLE_ERROR_CODE_DATA = [\n  { errorCode: \"E123\", count: 42 },\n  { errorCode: \"E045\", count: 38 },\n  { errorCode: \"E211\", count: 27 },\n  { errorCode: \"E078\", count: 19 },\n  { errorCode: \"E156\", count: 15 }\n];\n\nconst SAMPLE_PREDICTED_FAILURES = [\n  { name: \"MRI_001\", value: 12 },\n  { name: \"MRI_002\", value: 8 },\n  { name: \"MRI_003\", value: 5 },\n  { name: \"MRI_004\", value: 3 }\n];\n\nconst SAMPLE_MACHINE_RUNTIME = [\n  { machineId: \"MRI_001\", avgRuntime: 452 },\n  { machineId: \"MRI_002\", avgRuntime: 387 },\n  { machineId: \"MRI_003\", avgRuntime: 521 },\n  { machineId: \"MRI_004\", avgRuntime: 312 }\n];\n\nexport default function Visualization() {\n  // Initialize with sample data to ensure immediate rendering\n  const [errorCodeData, setErrorCodeData] = useState(SAMPLE_ERROR_CODE_DATA);\n  const [predictedFailuresData, setPredictedFailuresData] = useState(SAMPLE_PREDICTED_FAILURES);\n  const [machineRuntimeData, setMachineRuntimeData] = useState(SAMPLE_MACHINE_RUNTIME);\n  const [loading, setLoading] = useState(false);\n  const [dataStatus, setDataStatus] = useState({\n    errorCodes: 'fallback',\n    predictions: 'fallback',\n    runtime: 'fallback'\n  });\n\n  // This component matches the MedTechPro styling seen in the screenshot\n  const TopNavBar = () => (\n    <div className=\"bg-blue-600 text-white p-2 flex justify-between items-center\">\n      <div className=\"flex items-center\">\n        <div className=\"bg-white p-1 rounded mr-2\">\n          <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-6 w-6 text-blue-600\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 6v6m0 0v6m0-6h6m-6 0H6\" />\n          </svg>\n        </div>\n        <span className=\"text-xl font-bold\">MedTechPro</span>\n      </div>\n      <div className=\"flex space-x-6\">\n        <a href=\"#\" className=\"hover:underline\">Dashboard</a>\n        <a href=\"#\" className=\"hover:underline\">Inventory</a>\n        <a href=\"#\" className=\"hover:underline\">Maintenance</a>\n        <a href=\"#\" className=\"hover:underline\">Search Records</a>\n        <a href=\"#\" className=\"hover:underline\">Alerts</a>\n        <a href=\"#\" className=\"font-bold underline\">Real-Time Graphs</a>\n      </div>\n    </div>\n  );\n\n  // Function to fetch error code data\n  const fetchErrorCodeData = async () => {\n    try {\n      setDataStatus(prev => ({ ...prev, errorCodes: 'loading' }));\n      const response = await fetch('/api/search-athena', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ keyword: 'Error' })\n      });\n      \n      if (!response.ok) throw new Error('Failed to fetch error codes');\n      \n      const result = await response.json();\n      \n      if (result.data && result.data.length > 1) {\n        const errorCodeCounts = {};\n        \n        result.data.slice(1).forEach(row => {\n          if (row.Data && row.Data[2] && row.Data[2].VarCharValue) {\n            const errorCode = row.Data[2].VarCharValue;\n            errorCodeCounts[errorCode] = (errorCodeCounts[errorCode] || 0) + 1;\n          }\n        });\n        \n        const processedData = Object.entries(errorCodeCounts)\n          .map(([code, count]) => ({ errorCode: code, count }))\n          .sort((a, b) => b.count - a.count)\n          .slice(0, 10);\n        \n        if (processedData.length > 0) {\n          setErrorCodeData(processedData);\n          setDataStatus(prev => ({ ...prev, errorCodes: 'loaded' }));\n        } else {\n          setDataStatus(prev => ({ ...prev, errorCodes: 'fallback' }));\n        }\n      } else {\n        setDataStatus(prev => ({ ...prev, errorCodes: 'fallback' }));\n      }\n    } catch (error) {\n      console.error(\"Error fetching error codes:\", error);\n      setDataStatus(prev => ({ ...prev, errorCodes: 'fallback' }));\n    }\n  };\n\n  // Function to fetch predicted failures data\n  const fetchPredictedFailuresData = async () => {\n    try {\n      setDataStatus(prev => ({ ...prev, predictions: 'loading' }));\n      const response = await fetch('/api/latest-predictions');\n      \n      if (!response.ok) throw new Error('Failed to fetch predictions');\n      \n      const result = await response.json();\n      \n      if (result.data && result.data.length > 0) {\n        const machineFailureCounts = {};\n        \n        result.data.forEach(item => {\n          const machineId = item.machine_id;\n          if (machineId) {\n            machineFailureCounts[machineId] = (machineFailureCounts[machineId] || 0) + 1;\n          }\n        });\n        \n        const processedData = Object.entries(machineFailureCounts)\n          .map(([machine, value]) => ({ name: machine, value }));\n        \n        if (processedData.length > 0) {\n          setPredictedFailuresData(processedData);\n          setDataStatus(prev => ({ ...prev, predictions: 'loaded' }));\n        } else {\n          setDataStatus(prev => ({ ...prev, predictions: 'fallback' }));\n        }\n      } else {\n        setDataStatus(prev => ({ ...prev, predictions: 'fallback' }));\n      }\n    } catch (error) {\n      console.error(\"Error fetching predictions:\", error);\n      setDataStatus(prev => ({ ...prev, predictions: 'fallback' }));\n    }\n  };\n\n  // Function to fetch machine runtime data\n  const fetchMachineRuntimeData = async () => {\n    try {\n      setDataStatus(prev => ({ ...prev, runtime: 'loading' }));\n      const response = await fetch('/api/latest-s3-log');\n      \n      if (!response.ok) throw new Error('Failed to fetch runtime data');\n      \n      const result = await response.json();\n      \n      if (result.data && result.data.length > 0) {\n        const machineRuntimes = {};\n        const runtimeCounts = {};\n        \n        result.data.forEach(item => {\n          if (item.machine_id && item.machine_runtime) {\n            const machineId = item.machine_id;\n            const runtime = parseInt(item.machine_runtime, 10);\n            \n            if (!isNaN(runtime)) {\n              if (!machineRuntimes[machineId]) {\n                machineRuntimes[machineId] = 0;\n                runtimeCounts[machineId] = 0;\n              }\n              machineRuntimes[machineId] += runtime;\n              runtimeCounts[machineId]++;\n            }\n          }\n        });\n        \n        const processedData = Object.entries(machineRuntimes)\n          .map(([machine, totalRuntime]) => ({\n            machineId: machine,\n            avgRuntime: Math.round(totalRuntime / (runtimeCounts[machine] || 1))\n          }));\n        \n        if (processedData.length > 0) {\n          setMachineRuntimeData(processedData);\n          setDataStatus(prev => ({ ...prev, runtime: 'loaded' }));\n        } else {\n          setDataStatus(prev => ({ ...prev, runtime: 'fallback' }));\n        }\n      } else {\n        setDataStatus(prev => ({ ...prev, runtime: 'fallback' }));\n      }\n    } catch (error) {\n      console.error(\"Error fetching runtime data:\", error);\n      setDataStatus(prev => ({ ...prev, runtime: 'fallback' }));\n    }\n  };\n\n  // Load data when component mounts\n  useEffect(() => {\n    const fetchAllData = async () => {\n      setLoading(true);\n      try {\n        await Promise.all([\n          fetchErrorCodeData(),\n          fetchPredictedFailuresData(),\n          fetchMachineRuntimeData()\n        ]);\n      } catch (error) {\n        console.error(\"Error fetching data:\", error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchAllData();\n    \n    // Optional: Set up polling for real-time updates\n    // const interval = setInterval(fetchAllData, 60000); // Update every minute\n    // return () => clearInterval(interval);\n  }, []);\n\n  // Handler for refreshing data\n  const refreshData = () => {\n    setLoading(true);\n    Promise.all([\n      fetchErrorCodeData(),\n      fetchPredictedFailuresData(),\n      fetchMachineRuntimeData()\n    ]).finally(() => {\n      setLoading(false);\n    });\n  };\n\n  // Handler for running prediction job\n  const runPredictionJob = async () => {\n    try {\n      const response = await fetch('/api/run-databricks-job', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' }\n      });\n      \n      if (!response.ok) throw new Error('Failed to trigger job');\n      \n      const result = await response.json();\n      alert('Prediction job triggered successfully!');\n    } catch (error) {\n      console.error(\"Error triggering prediction job:\", error);\n      alert('Failed to trigger prediction job: ' + error.message);\n    }\n  };\n\n  // Handler for sending maintenance alert\n  const sendMaintenanceAlert = async () => {\n    const email = prompt('Enter email address for maintenance alert:');\n    \n    if (!email) return;\n    \n    try {\n      const response = await fetch('/api/send-maintenance-alert', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ toEmail: email })\n      });\n      \n      if (!response.ok) throw new Error('Failed to send email');\n      \n      const result = await response.json();\n      alert('Maintenance alert sent successfully!');\n    } catch (error) {\n      console.error(\"Error sending email:\", error);\n      alert('Failed to send email: ' + error.message);\n    }\n  };\n\n  // Error Code Chart Component\n  const ErrorCodeChart = () => (\n    <div className=\"bg-white p-6 rounded-lg shadow-md mb-6\">\n      <h2 className=\"text-xl font-semibold mb-4\">Most Frequent Error Codes</h2>\n      <div className=\"h-64\">\n        <ResponsiveContainer width=\"100%\" height=\"100%\">\n          <BarChart data={errorCodeData} margin={{ top: 5, right: 30, left: 20, bottom: 5 }}>\n            <CartesianGrid strokeDasharray=\"3 3\" />\n            <XAxis dataKey=\"errorCode\" />\n            <YAxis />\n            <Tooltip \n              formatter={(value) => [`${value}`, 'Occurrence Count']}\n              labelFormatter={(value) => `Error Code: ${value}`}\n            />\n            <Legend />\n            <Bar dataKey=\"count\" fill=\"#8884d8\" name=\"Frequency\" />\n          </BarChart>\n        </ResponsiveContainer>\n      </div>\n      {dataStatus.errorCodes === 'fallback' && (\n        <p className=\"text-sm text-gray-500 mt-2\">Using sample data - API data unavailable</p>\n      )}\n    </div>\n  );\n\n  // Predicted Failures Chart Component\n  const PredictedFailuresChart = () => (\n    <div className=\"bg-white p-6 rounded-lg shadow-md mb-6\">\n      <h2 className=\"text-xl font-semibold mb-4\">Predicted Failures by Machine</h2>\n      <div className=\"h-64\">\n        <ResponsiveContainer width=\"100%\" height=\"100%\">\n          <PieChart>\n            <Pie\n              data={predictedFailuresData}\n              cx=\"50%\"\n              cy=\"50%\"\n              labelLine={true}\n              outerRadius={80}\n              fill=\"#8884d8\"\n              dataKey=\"value\"\n              nameKey=\"name\"\n              label={({ name, percent }) => `${name}: ${(percent * 100).toFixed(0)}%`}\n            >\n              {predictedFailuresData.map((entry, index) => (\n                <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\n              ))}\n            </Pie>\n            <Tooltip formatter={(value, name, props) => [`${value} predicted failures`, props.payload.name]} />\n            <Legend />\n          </PieChart>\n        </ResponsiveContainer>\n      </div>\n      {dataStatus.predictions === 'fallback' && (\n        <p className=\"text-sm text-gray-500 mt-2\">Using sample data - API data unavailable</p>\n      )}\n    </div>\n  );\n\n  // Machine Runtime Chart Component\n  const RuntimeChart = () => (\n    <div className=\"bg-white p-6 rounded-lg shadow-md mb-6\">\n      <h2 className=\"text-xl font-semibold mb-4\">Average Runtime of Machines</h2>\n      <div className=\"h-64\">\n        <ResponsiveContainer width=\"100%\" height=\"100%\">\n          <BarChart data={machineRuntimeData} margin={{ top: 5, right: 30, left: 20, bottom: 5 }}>\n            <CartesianGrid strokeDasharray=\"3 3\" />\n            <XAxis dataKey=\"machineId\" />\n            <YAxis label={{ value: 'Runtime (seconds)', angle: -90, position: 'insideLeft' }} />\n            <Tooltip formatter={(value) => [`${value.toFixed(1)} seconds`, 'Avg Runtime']} />\n            <Legend />\n            <Bar dataKey=\"avgRuntime\" fill=\"#82ca9d\" name=\"Average Runtime (seconds)\" />\n          </BarChart>\n        </ResponsiveContainer>\n      </div>\n      {dataStatus.runtime === 'fallback' && (\n        <p className=\"text-sm text-gray-500 mt-2\">Using sample data - API data unavailable</p>\n      )}\n    </div>\n  );\n\n  return (\n    <div className=\"bg-gray-100 min-h-screen\">\n      <TopNavBar />\n      \n      <div className=\"p-6 max-w-6xl mx-auto\">\n        <h1 className=\"text-3xl font-bold mb-8\">MRI Machine Analytics Dashboard</h1>\n        \n        {loading ? (\n          <div className=\"text-center py-8\">\n            <p className=\"text-lg\">Loading dashboard data...</p>\n            <div className=\"mt-4 h-2 w-64 bg-gray-200 rounded-full mx-auto\">\n              <div className=\"h-full bg-blue-500 rounded-full animate-pulse w-1/2\"></div>\n            </div>\n          </div>\n        ) : (\n          <>\n            <ErrorCodeChart />\n            <PredictedFailuresChart />\n            <RuntimeChart />\n            \n            <div className=\"bg-white p-6 rounded-lg shadow-md\">\n              <h2 className=\"text-xl font-semibold mb-4\">Dashboard Controls</h2>\n              <div className=\"flex flex-wrap gap-4\">\n                <button \n                  className=\"bg-black hover:bg-gray-800 text-white py-2 px-4 rounded-md transition duration-300\"\n                  onClick={refreshData}\n                  disabled={loading}\n                >\n                  Refresh Data\n                </button>\n                <button \n                  className=\"bg-black hover:bg-gray-800 text-white py-2 px-4 rounded-md transition duration-300\"\n                  onClick={runPredictionJob}\n                  disabled={loading}\n                >\n                  Run Prediction Job\n                </button>\n                <button \n                  className=\"bg-black hover:bg-gray-800 text-white py-2 px-4 rounded-md transition duration-300\"\n                  onClick={sendMaintenanceAlert}\n                  disabled={loading}\n                >\n                  Send Maintenance Alert\n                </button>\n              </div>\n            </div>\n          </>\n        )}\n      </div>\n    </div>\n  );\n}"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SACEC,QAAQ,EAAEC,GAAG,EAAEC,QAAQ,EAAEC,GAAG,EAC5BC,KAAK,EAAEC,KAAK,EAAEC,aAAa,EAAEC,OAAO,EAAEC,MAAM,EAC5CC,mBAAmB,EAAEC,IAAI,QACpB,UAAU;;AAEjB;AAAA,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AACA,MAAMC,MAAM,GAAG,CAAC,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,CAAC;;AAEjF;AACA,MAAMC,sBAAsB,GAAG,CAC7B;EAAEC,SAAS,EAAE,MAAM;EAAEC,KAAK,EAAE;AAAG,CAAC,EAChC;EAAED,SAAS,EAAE,MAAM;EAAEC,KAAK,EAAE;AAAG,CAAC,EAChC;EAAED,SAAS,EAAE,MAAM;EAAEC,KAAK,EAAE;AAAG,CAAC,EAChC;EAAED,SAAS,EAAE,MAAM;EAAEC,KAAK,EAAE;AAAG,CAAC,EAChC;EAAED,SAAS,EAAE,MAAM;EAAEC,KAAK,EAAE;AAAG,CAAC,CACjC;AAED,MAAMC,yBAAyB,GAAG,CAChC;EAAEC,IAAI,EAAE,SAAS;EAAEC,KAAK,EAAE;AAAG,CAAC,EAC9B;EAAED,IAAI,EAAE,SAAS;EAAEC,KAAK,EAAE;AAAE,CAAC,EAC7B;EAAED,IAAI,EAAE,SAAS;EAAEC,KAAK,EAAE;AAAE,CAAC,EAC7B;EAAED,IAAI,EAAE,SAAS;EAAEC,KAAK,EAAE;AAAE,CAAC,CAC9B;AAED,MAAMC,sBAAsB,GAAG,CAC7B;EAAEC,SAAS,EAAE,SAAS;EAAEC,UAAU,EAAE;AAAI,CAAC,EACzC;EAAED,SAAS,EAAE,SAAS;EAAEC,UAAU,EAAE;AAAI,CAAC,EACzC;EAAED,SAAS,EAAE,SAAS;EAAEC,UAAU,EAAE;AAAI,CAAC,EACzC;EAAED,SAAS,EAAE,SAAS;EAAEC,UAAU,EAAE;AAAI,CAAC,CAC1C;AAED,eAAe,SAASC,aAAaA,CAAA,EAAG;EAAAC,EAAA;EACtC;EACA,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAG9B,QAAQ,CAACkB,sBAAsB,CAAC;EAC1E,MAAM,CAACa,qBAAqB,EAAEC,wBAAwB,CAAC,GAAGhC,QAAQ,CAACqB,yBAAyB,CAAC;EAC7F,MAAM,CAACY,kBAAkB,EAAEC,qBAAqB,CAAC,GAAGlC,QAAQ,CAACwB,sBAAsB,CAAC;EACpF,MAAM,CAACW,OAAO,EAAEC,UAAU,CAAC,GAAGpC,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAACqC,UAAU,EAAEC,aAAa,CAAC,GAAGtC,QAAQ,CAAC;IAC3CuC,UAAU,EAAE,UAAU;IACtBC,WAAW,EAAE,UAAU;IACvBC,OAAO,EAAE;EACX,CAAC,CAAC;;EAEF;EACA,MAAMC,SAAS,GAAGA,CAAA,kBAChB5B,OAAA;IAAK6B,SAAS,EAAC,8DAA8D;IAAAC,QAAA,gBAC3E9B,OAAA;MAAK6B,SAAS,EAAC,mBAAmB;MAAAC,QAAA,gBAChC9B,OAAA;QAAK6B,SAAS,EAAC,2BAA2B;QAAAC,QAAA,eACxC9B,OAAA;UAAK+B,KAAK,EAAC,4BAA4B;UAACF,SAAS,EAAC,uBAAuB;UAACG,IAAI,EAAC,MAAM;UAACC,OAAO,EAAC,WAAW;UAACC,MAAM,EAAC,cAAc;UAAAJ,QAAA,eAC7H9B,OAAA;YAAMmC,aAAa,EAAC,OAAO;YAACC,cAAc,EAAC,OAAO;YAACC,WAAW,EAAE,CAAE;YAACC,CAAC,EAAC;UAA4B;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACjG;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CAAC,eACN1C,OAAA;QAAM6B,SAAS,EAAC,mBAAmB;QAAAC,QAAA,EAAC;MAAU;QAAAS,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAClD,CAAC,eACN1C,OAAA;MAAK6B,SAAS,EAAC,gBAAgB;MAAAC,QAAA,gBAC7B9B,OAAA;QAAG2C,IAAI,EAAC,GAAG;QAACd,SAAS,EAAC,iBAAiB;QAAAC,QAAA,EAAC;MAAS;QAAAS,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,eACrD1C,OAAA;QAAG2C,IAAI,EAAC,GAAG;QAACd,SAAS,EAAC,iBAAiB;QAAAC,QAAA,EAAC;MAAS;QAAAS,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,eACrD1C,OAAA;QAAG2C,IAAI,EAAC,GAAG;QAACd,SAAS,EAAC,iBAAiB;QAAAC,QAAA,EAAC;MAAW;QAAAS,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,eACvD1C,OAAA;QAAG2C,IAAI,EAAC,GAAG;QAACd,SAAS,EAAC,iBAAiB;QAAAC,QAAA,EAAC;MAAc;QAAAS,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,eAC1D1C,OAAA;QAAG2C,IAAI,EAAC,GAAG;QAACd,SAAS,EAAC,iBAAiB;QAAAC,QAAA,EAAC;MAAM;QAAAS,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,eAClD1C,OAAA;QAAG2C,IAAI,EAAC,GAAG;QAACd,SAAS,EAAC,qBAAqB;QAAAC,QAAA,EAAC;MAAgB;QAAAS,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC7D,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CACN;;EAED;EACA,MAAME,kBAAkB,GAAG,MAAAA,CAAA,KAAY;IACrC,IAAI;MACFpB,aAAa,CAACqB,IAAI,KAAK;QAAE,GAAGA,IAAI;QAAEpB,UAAU,EAAE;MAAU,CAAC,CAAC,CAAC;MAC3D,MAAMqB,QAAQ,GAAG,MAAMC,KAAK,CAAC,oBAAoB,EAAE;QACjDC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UAAE,cAAc,EAAE;QAAmB,CAAC;QAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAEC,OAAO,EAAE;QAAQ,CAAC;MAC3C,CAAC,CAAC;MAEF,IAAI,CAACP,QAAQ,CAACQ,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;MAEhE,MAAMC,MAAM,GAAG,MAAMV,QAAQ,CAACW,IAAI,CAAC,CAAC;MAEpC,IAAID,MAAM,CAACE,IAAI,IAAIF,MAAM,CAACE,IAAI,CAACC,MAAM,GAAG,CAAC,EAAE;QACzC,MAAMC,eAAe,GAAG,CAAC,CAAC;QAE1BJ,MAAM,CAACE,IAAI,CAACG,KAAK,CAAC,CAAC,CAAC,CAACC,OAAO,CAACC,GAAG,IAAI;UAClC,IAAIA,GAAG,CAACC,IAAI,IAAID,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC,IAAID,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC,CAACC,YAAY,EAAE;YACvD,MAAM5D,SAAS,GAAG0D,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC,CAACC,YAAY;YAC1CL,eAAe,CAACvD,SAAS,CAAC,GAAG,CAACuD,eAAe,CAACvD,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC;UACpE;QACF,CAAC,CAAC;QAEF,MAAM6D,aAAa,GAAGC,MAAM,CAACC,OAAO,CAACR,eAAe,CAAC,CAClDS,GAAG,CAAC,CAAC,CAACC,IAAI,EAAEhE,KAAK,CAAC,MAAM;UAAED,SAAS,EAAEiE,IAAI;UAAEhE;QAAM,CAAC,CAAC,CAAC,CACpDiE,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKA,CAAC,CAACnE,KAAK,GAAGkE,CAAC,CAAClE,KAAK,CAAC,CACjCuD,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC;QAEf,IAAIK,aAAa,CAACP,MAAM,GAAG,CAAC,EAAE;UAC5B3C,gBAAgB,CAACkD,aAAa,CAAC;UAC/B1C,aAAa,CAACqB,IAAI,KAAK;YAAE,GAAGA,IAAI;YAAEpB,UAAU,EAAE;UAAS,CAAC,CAAC,CAAC;QAC5D,CAAC,MAAM;UACLD,aAAa,CAACqB,IAAI,KAAK;YAAE,GAAGA,IAAI;YAAEpB,UAAU,EAAE;UAAW,CAAC,CAAC,CAAC;QAC9D;MACF,CAAC,MAAM;QACLD,aAAa,CAACqB,IAAI,KAAK;UAAE,GAAGA,IAAI;UAAEpB,UAAU,EAAE;QAAW,CAAC,CAAC,CAAC;MAC9D;IACF,CAAC,CAAC,OAAOiD,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;MACnDlD,aAAa,CAACqB,IAAI,KAAK;QAAE,GAAGA,IAAI;QAAEpB,UAAU,EAAE;MAAW,CAAC,CAAC,CAAC;IAC9D;EACF,CAAC;;EAED;EACA,MAAMmD,0BAA0B,GAAG,MAAAA,CAAA,KAAY;IAC7C,IAAI;MACFpD,aAAa,CAACqB,IAAI,KAAK;QAAE,GAAGA,IAAI;QAAEnB,WAAW,EAAE;MAAU,CAAC,CAAC,CAAC;MAC5D,MAAMoB,QAAQ,GAAG,MAAMC,KAAK,CAAC,yBAAyB,CAAC;MAEvD,IAAI,CAACD,QAAQ,CAACQ,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;MAEhE,MAAMC,MAAM,GAAG,MAAMV,QAAQ,CAACW,IAAI,CAAC,CAAC;MAEpC,IAAID,MAAM,CAACE,IAAI,IAAIF,MAAM,CAACE,IAAI,CAACC,MAAM,GAAG,CAAC,EAAE;QACzC,MAAMkB,oBAAoB,GAAG,CAAC,CAAC;QAE/BrB,MAAM,CAACE,IAAI,CAACI,OAAO,CAACgB,IAAI,IAAI;UAC1B,MAAMnE,SAAS,GAAGmE,IAAI,CAACC,UAAU;UACjC,IAAIpE,SAAS,EAAE;YACbkE,oBAAoB,CAAClE,SAAS,CAAC,GAAG,CAACkE,oBAAoB,CAAClE,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC;UAC9E;QACF,CAAC,CAAC;QAEF,MAAMuD,aAAa,GAAGC,MAAM,CAACC,OAAO,CAACS,oBAAoB,CAAC,CACvDR,GAAG,CAAC,CAAC,CAACW,OAAO,EAAEvE,KAAK,CAAC,MAAM;UAAED,IAAI,EAAEwE,OAAO;UAAEvE;QAAM,CAAC,CAAC,CAAC;QAExD,IAAIyD,aAAa,CAACP,MAAM,GAAG,CAAC,EAAE;UAC5BzC,wBAAwB,CAACgD,aAAa,CAAC;UACvC1C,aAAa,CAACqB,IAAI,KAAK;YAAE,GAAGA,IAAI;YAAEnB,WAAW,EAAE;UAAS,CAAC,CAAC,CAAC;QAC7D,CAAC,MAAM;UACLF,aAAa,CAACqB,IAAI,KAAK;YAAE,GAAGA,IAAI;YAAEnB,WAAW,EAAE;UAAW,CAAC,CAAC,CAAC;QAC/D;MACF,CAAC,MAAM;QACLF,aAAa,CAACqB,IAAI,KAAK;UAAE,GAAGA,IAAI;UAAEnB,WAAW,EAAE;QAAW,CAAC,CAAC,CAAC;MAC/D;IACF,CAAC,CAAC,OAAOgD,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;MACnDlD,aAAa,CAACqB,IAAI,KAAK;QAAE,GAAGA,IAAI;QAAEnB,WAAW,EAAE;MAAW,CAAC,CAAC,CAAC;IAC/D;EACF,CAAC;;EAED;EACA,MAAMuD,uBAAuB,GAAG,MAAAA,CAAA,KAAY;IAC1C,IAAI;MACFzD,aAAa,CAACqB,IAAI,KAAK;QAAE,GAAGA,IAAI;QAAElB,OAAO,EAAE;MAAU,CAAC,CAAC,CAAC;MACxD,MAAMmB,QAAQ,GAAG,MAAMC,KAAK,CAAC,oBAAoB,CAAC;MAElD,IAAI,CAACD,QAAQ,CAACQ,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,8BAA8B,CAAC;MAEjE,MAAMC,MAAM,GAAG,MAAMV,QAAQ,CAACW,IAAI,CAAC,CAAC;MAEpC,IAAID,MAAM,CAACE,IAAI,IAAIF,MAAM,CAACE,IAAI,CAACC,MAAM,GAAG,CAAC,EAAE;QACzC,MAAMuB,eAAe,GAAG,CAAC,CAAC;QAC1B,MAAMC,aAAa,GAAG,CAAC,CAAC;QAExB3B,MAAM,CAACE,IAAI,CAACI,OAAO,CAACgB,IAAI,IAAI;UAC1B,IAAIA,IAAI,CAACC,UAAU,IAAID,IAAI,CAACM,eAAe,EAAE;YAC3C,MAAMzE,SAAS,GAAGmE,IAAI,CAACC,UAAU;YACjC,MAAMpD,OAAO,GAAG0D,QAAQ,CAACP,IAAI,CAACM,eAAe,EAAE,EAAE,CAAC;YAElD,IAAI,CAACE,KAAK,CAAC3D,OAAO,CAAC,EAAE;cACnB,IAAI,CAACuD,eAAe,CAACvE,SAAS,CAAC,EAAE;gBAC/BuE,eAAe,CAACvE,SAAS,CAAC,GAAG,CAAC;gBAC9BwE,aAAa,CAACxE,SAAS,CAAC,GAAG,CAAC;cAC9B;cACAuE,eAAe,CAACvE,SAAS,CAAC,IAAIgB,OAAO;cACrCwD,aAAa,CAACxE,SAAS,CAAC,EAAE;YAC5B;UACF;QACF,CAAC,CAAC;QAEF,MAAMuD,aAAa,GAAGC,MAAM,CAACC,OAAO,CAACc,eAAe,CAAC,CAClDb,GAAG,CAAC,CAAC,CAACW,OAAO,EAAEO,YAAY,CAAC,MAAM;UACjC5E,SAAS,EAAEqE,OAAO;UAClBpE,UAAU,EAAE4E,IAAI,CAACC,KAAK,CAACF,YAAY,IAAIJ,aAAa,CAACH,OAAO,CAAC,IAAI,CAAC,CAAC;QACrE,CAAC,CAAC,CAAC;QAEL,IAAId,aAAa,CAACP,MAAM,GAAG,CAAC,EAAE;UAC5BvC,qBAAqB,CAAC8C,aAAa,CAAC;UACpC1C,aAAa,CAACqB,IAAI,KAAK;YAAE,GAAGA,IAAI;YAAElB,OAAO,EAAE;UAAS,CAAC,CAAC,CAAC;QACzD,CAAC,MAAM;UACLH,aAAa,CAACqB,IAAI,KAAK;YAAE,GAAGA,IAAI;YAAElB,OAAO,EAAE;UAAW,CAAC,CAAC,CAAC;QAC3D;MACF,CAAC,MAAM;QACLH,aAAa,CAACqB,IAAI,KAAK;UAAE,GAAGA,IAAI;UAAElB,OAAO,EAAE;QAAW,CAAC,CAAC,CAAC;MAC3D;IACF,CAAC,CAAC,OAAO+C,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;MACpDlD,aAAa,CAACqB,IAAI,KAAK;QAAE,GAAGA,IAAI;QAAElB,OAAO,EAAE;MAAW,CAAC,CAAC,CAAC;IAC3D;EACF,CAAC;;EAED;EACAxC,SAAS,CAAC,MAAM;IACd,MAAMuG,YAAY,GAAG,MAAAA,CAAA,KAAY;MAC/BpE,UAAU,CAAC,IAAI,CAAC;MAChB,IAAI;QACF,MAAMqE,OAAO,CAACC,GAAG,CAAC,CAChBhD,kBAAkB,CAAC,CAAC,EACpBgC,0BAA0B,CAAC,CAAC,EAC5BK,uBAAuB,CAAC,CAAC,CAC1B,CAAC;MACJ,CAAC,CAAC,OAAOP,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC9C,CAAC,SAAS;QACRpD,UAAU,CAAC,KAAK,CAAC;MACnB;IACF,CAAC;IAEDoE,YAAY,CAAC,CAAC;;IAEd;IACA;IACA;EACF,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMG,WAAW,GAAGA,CAAA,KAAM;IACxBvE,UAAU,CAAC,IAAI,CAAC;IAChBqE,OAAO,CAACC,GAAG,CAAC,CACVhD,kBAAkB,CAAC,CAAC,EACpBgC,0BAA0B,CAAC,CAAC,EAC5BK,uBAAuB,CAAC,CAAC,CAC1B,CAAC,CAACa,OAAO,CAAC,MAAM;MACfxE,UAAU,CAAC,KAAK,CAAC;IACnB,CAAC,CAAC;EACJ,CAAC;;EAED;EACA,MAAMyE,gBAAgB,GAAG,MAAAA,CAAA,KAAY;IACnC,IAAI;MACF,MAAMjD,QAAQ,GAAG,MAAMC,KAAK,CAAC,yBAAyB,EAAE;QACtDC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UAAE,cAAc,EAAE;QAAmB;MAChD,CAAC,CAAC;MAEF,IAAI,CAACH,QAAQ,CAACQ,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,uBAAuB,CAAC;MAE1D,MAAMC,MAAM,GAAG,MAAMV,QAAQ,CAACW,IAAI,CAAC,CAAC;MACpCuC,KAAK,CAAC,wCAAwC,CAAC;IACjD,CAAC,CAAC,OAAOtB,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;MACxDsB,KAAK,CAAC,oCAAoC,GAAGtB,KAAK,CAACuB,OAAO,CAAC;IAC7D;EACF,CAAC;;EAED;EACA,MAAMC,oBAAoB,GAAG,MAAAA,CAAA,KAAY;IACvC,MAAMC,KAAK,GAAGC,MAAM,CAAC,4CAA4C,CAAC;IAElE,IAAI,CAACD,KAAK,EAAE;IAEZ,IAAI;MACF,MAAMrD,QAAQ,GAAG,MAAMC,KAAK,CAAC,6BAA6B,EAAE;QAC1DC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UAAE,cAAc,EAAE;QAAmB,CAAC;QAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAEiD,OAAO,EAAEF;QAAM,CAAC;MACzC,CAAC,CAAC;MAEF,IAAI,CAACrD,QAAQ,CAACQ,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,sBAAsB,CAAC;MAEzD,MAAMC,MAAM,GAAG,MAAMV,QAAQ,CAACW,IAAI,CAAC,CAAC;MACpCuC,KAAK,CAAC,sCAAsC,CAAC;IAC/C,CAAC,CAAC,OAAOtB,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC5CsB,KAAK,CAAC,wBAAwB,GAAGtB,KAAK,CAACuB,OAAO,CAAC;IACjD;EACF,CAAC;;EAED;EACA,MAAMK,cAAc,GAAGA,CAAA,kBACrBtG,OAAA;IAAK6B,SAAS,EAAC,wCAAwC;IAAAC,QAAA,gBACrD9B,OAAA;MAAI6B,SAAS,EAAC,4BAA4B;MAAAC,QAAA,EAAC;IAAyB;MAAAS,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACzE1C,OAAA;MAAK6B,SAAS,EAAC,MAAM;MAAAC,QAAA,eACnB9B,OAAA,CAACH,mBAAmB;QAAC0G,KAAK,EAAC,MAAM;QAACC,MAAM,EAAC,MAAM;QAAA1E,QAAA,eAC7C9B,OAAA,CAACZ,QAAQ;UAACsE,IAAI,EAAE3C,aAAc;UAAC0F,MAAM,EAAE;YAAEC,GAAG,EAAE,CAAC;YAAEC,KAAK,EAAE,EAAE;YAAEC,IAAI,EAAE,EAAE;YAAEC,MAAM,EAAE;UAAE,CAAE;UAAA/E,QAAA,gBAChF9B,OAAA,CAACN,aAAa;YAACoH,eAAe,EAAC;UAAK;YAAAvE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,eACvC1C,OAAA,CAACR,KAAK;YAACuH,OAAO,EAAC;UAAW;YAAAxE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,eAC7B1C,OAAA,CAACP,KAAK;YAAA8C,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,eACT1C,OAAA,CAACL,OAAO;YACNqH,SAAS,EAAGvG,KAAK,IAAK,CAAC,GAAGA,KAAK,EAAE,EAAE,kBAAkB,CAAE;YACvDwG,cAAc,EAAGxG,KAAK,IAAK,eAAeA,KAAK;UAAG;YAAA8B,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACnD,CAAC,eACF1C,OAAA,CAACJ,MAAM;YAAA2C,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,eACV1C,OAAA,CAACX,GAAG;YAAC0H,OAAO,EAAC,OAAO;YAAC/E,IAAI,EAAC,SAAS;YAACxB,IAAI,EAAC;UAAW;YAAA+B,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC/C;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACQ;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACnB,CAAC,EACLnB,UAAU,CAACE,UAAU,KAAK,UAAU,iBACnCzB,OAAA;MAAG6B,SAAS,EAAC,4BAA4B;MAAAC,QAAA,EAAC;IAAwC;MAAAS,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CACtF;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CACN;;EAED;EACA,MAAMwE,sBAAsB,GAAGA,CAAA,kBAC7BlH,OAAA;IAAK6B,SAAS,EAAC,wCAAwC;IAAAC,QAAA,gBACrD9B,OAAA;MAAI6B,SAAS,EAAC,4BAA4B;MAAAC,QAAA,EAAC;IAA6B;MAAAS,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC7E1C,OAAA;MAAK6B,SAAS,EAAC,MAAM;MAAAC,QAAA,eACnB9B,OAAA,CAACH,mBAAmB;QAAC0G,KAAK,EAAC,MAAM;QAACC,MAAM,EAAC,MAAM;QAAA1E,QAAA,eAC7C9B,OAAA,CAACV,QAAQ;UAAAwC,QAAA,gBACP9B,OAAA,CAACT,GAAG;YACFmE,IAAI,EAAEzC,qBAAsB;YAC5BkG,EAAE,EAAC,KAAK;YACRC,EAAE,EAAC,KAAK;YACRC,SAAS,EAAE,IAAK;YAChBC,WAAW,EAAE,EAAG;YAChBtF,IAAI,EAAC,SAAS;YACd+E,OAAO,EAAC,OAAO;YACfQ,OAAO,EAAC,MAAM;YACdC,KAAK,EAAEA,CAAC;cAAEhH,IAAI;cAAEiH;YAAQ,CAAC,KAAK,GAAGjH,IAAI,KAAK,CAACiH,OAAO,GAAG,GAAG,EAAEC,OAAO,CAAC,CAAC,CAAC,GAAI;YAAA5F,QAAA,EAEvEb,qBAAqB,CAACoD,GAAG,CAAC,CAACsD,KAAK,EAAEC,KAAK,kBACtC5H,OAAA,CAACF,IAAI;cAAuBkC,IAAI,EAAE7B,MAAM,CAACyH,KAAK,GAAGzH,MAAM,CAACwD,MAAM;YAAE,GAArD,QAAQiE,KAAK,EAAE;cAAArF,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAwC,CACnE;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACC,CAAC,eACN1C,OAAA,CAACL,OAAO;YAACqH,SAAS,EAAEA,CAACvG,KAAK,EAAED,IAAI,EAAEqH,KAAK,KAAK,CAAC,GAAGpH,KAAK,qBAAqB,EAAEoH,KAAK,CAACC,OAAO,CAACtH,IAAI;UAAE;YAAA+B,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,eACnG1C,OAAA,CAACJ,MAAM;YAAA2C,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACF;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACQ;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACnB,CAAC,EACLnB,UAAU,CAACG,WAAW,KAAK,UAAU,iBACpC1B,OAAA;MAAG6B,SAAS,EAAC,4BAA4B;MAAAC,QAAA,EAAC;IAAwC;MAAAS,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CACtF;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CACN;;EAED;EACA,MAAMqF,YAAY,GAAGA,CAAA,kBACnB/H,OAAA;IAAK6B,SAAS,EAAC,wCAAwC;IAAAC,QAAA,gBACrD9B,OAAA;MAAI6B,SAAS,EAAC,4BAA4B;MAAAC,QAAA,EAAC;IAA2B;MAAAS,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC3E1C,OAAA;MAAK6B,SAAS,EAAC,MAAM;MAAAC,QAAA,eACnB9B,OAAA,CAACH,mBAAmB;QAAC0G,KAAK,EAAC,MAAM;QAACC,MAAM,EAAC,MAAM;QAAA1E,QAAA,eAC7C9B,OAAA,CAACZ,QAAQ;UAACsE,IAAI,EAAEvC,kBAAmB;UAACsF,MAAM,EAAE;YAAEC,GAAG,EAAE,CAAC;YAAEC,KAAK,EAAE,EAAE;YAAEC,IAAI,EAAE,EAAE;YAAEC,MAAM,EAAE;UAAE,CAAE;UAAA/E,QAAA,gBACrF9B,OAAA,CAACN,aAAa;YAACoH,eAAe,EAAC;UAAK;YAAAvE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,eACvC1C,OAAA,CAACR,KAAK;YAACuH,OAAO,EAAC;UAAW;YAAAxE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,eAC7B1C,OAAA,CAACP,KAAK;YAAC+H,KAAK,EAAE;cAAE/G,KAAK,EAAE,mBAAmB;cAAEuH,KAAK,EAAE,CAAC,EAAE;cAAEC,QAAQ,EAAE;YAAa;UAAE;YAAA1F,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,eACpF1C,OAAA,CAACL,OAAO;YAACqH,SAAS,EAAGvG,KAAK,IAAK,CAAC,GAAGA,KAAK,CAACiH,OAAO,CAAC,CAAC,CAAC,UAAU,EAAE,aAAa;UAAE;YAAAnF,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,eACjF1C,OAAA,CAACJ,MAAM;YAAA2C,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,eACV1C,OAAA,CAACX,GAAG;YAAC0H,OAAO,EAAC,YAAY;YAAC/E,IAAI,EAAC,SAAS;YAACxB,IAAI,EAAC;UAA2B;YAAA+B,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACpE;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACQ;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACnB,CAAC,EACLnB,UAAU,CAACI,OAAO,KAAK,UAAU,iBAChC3B,OAAA;MAAG6B,SAAS,EAAC,4BAA4B;MAAAC,QAAA,EAAC;IAAwC;MAAAS,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CACtF;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CACN;EAED,oBACE1C,OAAA;IAAK6B,SAAS,EAAC,0BAA0B;IAAAC,QAAA,gBACvC9B,OAAA,CAAC4B,SAAS;MAAAW,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAEb1C,OAAA;MAAK6B,SAAS,EAAC,uBAAuB;MAAAC,QAAA,gBACpC9B,OAAA;QAAI6B,SAAS,EAAC,yBAAyB;QAAAC,QAAA,EAAC;MAA+B;QAAAS,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,EAE3ErB,OAAO,gBACNrB,OAAA;QAAK6B,SAAS,EAAC,kBAAkB;QAAAC,QAAA,gBAC/B9B,OAAA;UAAG6B,SAAS,EAAC,SAAS;UAAAC,QAAA,EAAC;QAAyB;UAAAS,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG,CAAC,eACpD1C,OAAA;UAAK6B,SAAS,EAAC,gDAAgD;UAAAC,QAAA,eAC7D9B,OAAA;YAAK6B,SAAS,EAAC;UAAqD;YAAAU,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAM;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACxE,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CAAC,gBAEN1C,OAAA,CAAAE,SAAA;QAAA4B,QAAA,gBACE9B,OAAA,CAACsG,cAAc;UAAA/D,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,eAClB1C,OAAA,CAACkH,sBAAsB;UAAA3E,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,eAC1B1C,OAAA,CAAC+H,YAAY;UAAAxF,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,eAEhB1C,OAAA;UAAK6B,SAAS,EAAC,mCAAmC;UAAAC,QAAA,gBAChD9B,OAAA;YAAI6B,SAAS,EAAC,4BAA4B;YAAAC,QAAA,EAAC;UAAkB;YAAAS,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eAClE1C,OAAA;YAAK6B,SAAS,EAAC,sBAAsB;YAAAC,QAAA,gBACnC9B,OAAA;cACE6B,SAAS,EAAC,oFAAoF;cAC9FqG,OAAO,EAAErC,WAAY;cACrBsC,QAAQ,EAAE9G,OAAQ;cAAAS,QAAA,EACnB;YAED;cAAAS,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC,eACT1C,OAAA;cACE6B,SAAS,EAAC,oFAAoF;cAC9FqG,OAAO,EAAEnC,gBAAiB;cAC1BoC,QAAQ,EAAE9G,OAAQ;cAAAS,QAAA,EACnB;YAED;cAAAS,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC,eACT1C,OAAA;cACE6B,SAAS,EAAC,oFAAoF;cAC9FqG,OAAO,EAAEhC,oBAAqB;cAC9BiC,QAAQ,EAAE9G,OAAQ;cAAAS,QAAA,EACnB;YAED;cAAAS,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACN,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACH,CAAC;MAAA,eACN,CACH;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV;AAAC5B,EAAA,CAvXuBD,aAAa;AAAAuH,EAAA,GAAbvH,aAAa;AAAA,IAAAuH,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}