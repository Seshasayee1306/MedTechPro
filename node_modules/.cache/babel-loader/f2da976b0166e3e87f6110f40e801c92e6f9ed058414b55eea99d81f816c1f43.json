{"ast":null,"code":"var _jsxFileName = \"/Users/seshasayeebalaji/Desktop/aws_proj/src/components/Visualization.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { BarChart, Bar, PieChart, Pie, LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, Cell } from 'recharts';\n\n// Custom colors for charts\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#8884d8', '#82ca9d', '#ffc658', '#ff7300'];\nexport default function MRIVisualizationDashboard() {\n  _s();\n  // State for storing data\n  const [errorCodeData, setErrorCodeData] = useState([]);\n  const [predictedFailuresData, setPredictedFailuresData] = useState([]);\n  const [machineRuntimeData, setMachineRuntimeData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Fetch data from backend\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        setLoading(true);\n\n        // Fetch error code data from Athena\n        const errorCodeResponse = await fetch('/api/search-athena', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            keyword: 'Error'\n          })\n        });\n        if (!errorCodeResponse.ok) throw new Error('Failed to fetch error codes');\n        const errorCodeResult = await errorCodeResponse.json();\n\n        // Process error code data for the bar chart\n        const errorCodeCounts = {};\n        errorCodeResult.data.slice(1).forEach(row => {\n          if (row.Data && row.Data[2] && row.Data[2].VarCharValue) {\n            const errorCode = row.Data[2].VarCharValue;\n            errorCodeCounts[errorCode] = (errorCodeCounts[errorCode] || 0) + 1;\n          }\n        });\n        const processedErrorCodeData = Object.keys(errorCodeCounts).map(code => ({\n          errorCode: code,\n          count: errorCodeCounts[code]\n        })).sort((a, b) => b.count - a.count).slice(0, 10); // Get top 10\n\n        setErrorCodeData(processedErrorCodeData);\n\n        // Fetch predicted failures from Azure Blob\n        const predictionsResponse = await fetch('/api/latest-predictions');\n        if (!predictionsResponse.ok) throw new Error('Failed to fetch predictions');\n        const predictionsResult = await predictionsResponse.json();\n\n        // Process predictions data for pie chart\n        const machineFailureCounts = {};\n        predictionsResult.data.forEach(item => {\n          const machineId = item.machine_id;\n          machineFailureCounts[machineId] = (machineFailureCounts[machineId] || 0) + 1;\n        });\n        const processedPredictionsData = Object.keys(machineFailureCounts).map(machine => ({\n          name: machine,\n          value: machineFailureCounts[machine]\n        }));\n        setPredictedFailuresData(processedPredictionsData);\n\n        // Fetch runtime data from S3\n        const runtimeResponse = await fetch('/api/latest-s3-log');\n        if (!runtimeResponse.ok) throw new Error('Failed to fetch runtime data');\n        const runtimeResult = await runtimeResponse.json();\n\n        // Process runtime data for bar chart\n        const machineRuntimes = {};\n        let runtimeCounts = {};\n        runtimeResult.data.forEach(item => {\n          if (item.machine_id && item.machine_runtime) {\n            const machineId = item.machine_id;\n            const runtime = parseInt(item.machine_runtime, 10);\n            if (!isNaN(runtime)) {\n              if (!machineRuntimes[machineId]) {\n                machineRuntimes[machineId] = 0;\n                runtimeCounts[machineId] = 0;\n              }\n              machineRuntimes[machineId] += runtime;\n              runtimeCounts[machineId]++;\n            }\n          }\n        });\n        const processedRuntimeData = Object.keys(machineRuntimes).map(machine => ({\n          machineId: machine,\n          avgRuntime: machineRuntimes[machine] / (runtimeCounts[machine] || 1)\n        }));\n        setMachineRuntimeData(processedRuntimeData);\n      } catch (err) {\n        console.error('Error fetching visualization data:', err);\n        setError(err.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchData();\n  }, []);\n\n  // Custom tooltip for pie chart\n  const CustomTooltip = ({\n    active,\n    payload\n  }) => {\n    if (active && payload && payload.length) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-white p-2 border border-gray-200 shadow-md rounded-md\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"font-bold\",\n          children: `${payload[0].name}: ${payload[0].value}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: `${(payload[0].percent * 100).toFixed(2)}% of predictions`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this);\n    }\n    return null;\n  };\n  if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex items-center justify-center h-96\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-lg font-medium text-gray-600\",\n      children: \"Loading visualization data...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 127,\n    columnNumber: 5\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"bg-red-50 p-4 rounded-lg border border-red-200 text-red-700\",\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"font-bold\",\n      children: \"Error loading visualizations:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 133,\n    columnNumber: 5\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"p-6 max-w-6xl mx-auto\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"text-2xl font-bold mb-6 text-center\",\n      children: \"MRI Machine Analytics Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid grid-cols-1 md:grid-cols-2 gap-8\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-white p-4 rounded-lg shadow-md\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"text-xl font-semibold mb-4\",\n          children: \"Most Frequent Error Codes\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"h-64\",\n          children: /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n            width: \"100%\",\n            height: \"100%\",\n            children: /*#__PURE__*/_jsxDEV(BarChart, {\n              data: errorCodeData,\n              margin: {\n                top: 5,\n                right: 30,\n                left: 20,\n                bottom: 5\n              },\n              children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n                strokeDasharray: \"3 3\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 150,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n                dataKey: \"errorCode\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 151,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 152,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 153,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 154,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Bar, {\n                dataKey: \"count\",\n                fill: \"#8884d8\",\n                name: \"Frequency\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 155,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 149,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 148,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-white p-4 rounded-lg shadow-md\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"text-xl font-semibold mb-4\",\n          children: \"Predicted Failures by Machine\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"h-64\",\n          children: /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n            width: \"100%\",\n            height: \"100%\",\n            children: /*#__PURE__*/_jsxDEV(PieChart, {\n              children: [/*#__PURE__*/_jsxDEV(Pie, {\n                data: predictedFailuresData,\n                cx: \"50%\",\n                cy: \"50%\",\n                labelLine: false,\n                outerRadius: 80,\n                fill: \"#8884d8\",\n                dataKey: \"value\",\n                nameKey: \"name\",\n                label: ({\n                  name,\n                  percent\n                }) => `${name}: ${(percent * 100).toFixed(0)}%`,\n                children: predictedFailuresData.map((entry, index) => /*#__PURE__*/_jsxDEV(Cell, {\n                  fill: COLORS[index % COLORS.length]\n                }, `cell-${index}`, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 179,\n                  columnNumber: 21\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 167,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n                content: /*#__PURE__*/_jsxDEV(CustomTooltip, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 182,\n                  columnNumber: 35\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 182,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 183,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 166,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 165,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-white p-4 rounded-lg shadow-md md:col-span-2\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"text-xl font-semibold mb-4\",\n          children: \"Average Runtime of Machines\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"h-64\",\n          children: /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n            width: \"100%\",\n            height: \"100%\",\n            children: /*#__PURE__*/_jsxDEV(BarChart, {\n              data: machineRuntimeData,\n              margin: {\n                top: 5,\n                right: 30,\n                left: 20,\n                bottom: 5\n              },\n              children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n                strokeDasharray: \"3 3\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 195,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n                dataKey: \"machineId\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 196,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n                label: {\n                  value: 'Runtime (seconds)',\n                  angle: -90,\n                  position: 'insideLeft'\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 197,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n                formatter: value => [`${value.toFixed(1)} seconds`, 'Avg Runtime']\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 198,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 199,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Bar, {\n                dataKey: \"avgRuntime\",\n                fill: \"#82ca9d\",\n                name: \"Average Runtime (seconds)\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 200,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 194,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 193,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mt-8 bg-white p-4 rounded-lg shadow-md\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-xl font-semibold mb-4\",\n        children: \"Dashboard Controls\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex flex-wrap gap-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"bg-blue-600 hover:bg-blue-700 text-white py-2 px-4 rounded-md\",\n          onClick: () => window.location.reload(),\n          children: \"Refresh Data\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"bg-green-600 hover:bg-green-700 text-white py-2 px-4 rounded-md\",\n          onClick: async () => {\n            try {\n              await fetch('/api/run-databricks-job', {\n                method: 'POST',\n                headers: {\n                  'Content-Type': 'application/json'\n                }\n              });\n              alert('Databricks job triggered successfully!');\n            } catch (err) {\n              alert('Failed to trigger Databricks job: ' + err.message);\n            }\n          },\n          children: \"Run Prediction Job\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"bg-purple-600 hover:bg-purple-700 text-white py-2 px-4 rounded-md\",\n          onClick: async () => {\n            try {\n              const email = prompt('Enter email address for maintenance alert:');\n              if (email) {\n                await fetch('/api/send-maintenance-email', {\n                  method: 'POST',\n                  headers: {\n                    'Content-Type': 'application/json'\n                  },\n                  body: JSON.stringify({\n                    toEmail: email\n                  })\n                });\n                alert('Maintenance email sent successfully!');\n              }\n            } catch (err) {\n              alert('Failed to send email: ' + err.message);\n            }\n          },\n          children: \"Send Maintenance Alert\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 140,\n    columnNumber: 5\n  }, this);\n}\n_s(MRIVisualizationDashboard, \"qCHfq9RGr5ecs9yTJg/2hR8Goc4=\");\n_c = MRIVisualizationDashboard;\nvar _c;\n$RefreshReg$(_c, \"MRIVisualizationDashboard\");","map":{"version":3,"names":["React","useState","useEffect","BarChart","Bar","PieChart","Pie","LineChart","Line","XAxis","YAxis","CartesianGrid","Tooltip","Legend","ResponsiveContainer","Cell","jsxDEV","_jsxDEV","COLORS","MRIVisualizationDashboard","_s","errorCodeData","setErrorCodeData","predictedFailuresData","setPredictedFailuresData","machineRuntimeData","setMachineRuntimeData","loading","setLoading","error","setError","fetchData","errorCodeResponse","fetch","method","headers","body","JSON","stringify","keyword","ok","Error","errorCodeResult","json","errorCodeCounts","data","slice","forEach","row","Data","VarCharValue","errorCode","processedErrorCodeData","Object","keys","map","code","count","sort","a","b","predictionsResponse","predictionsResult","machineFailureCounts","item","machineId","machine_id","processedPredictionsData","machine","name","value","runtimeResponse","runtimeResult","machineRuntimes","runtimeCounts","machine_runtime","runtime","parseInt","isNaN","processedRuntimeData","avgRuntime","err","console","message","CustomTooltip","active","payload","length","className","children","fileName","_jsxFileName","lineNumber","columnNumber","percent","toFixed","width","height","margin","top","right","left","bottom","strokeDasharray","dataKey","fill","cx","cy","labelLine","outerRadius","nameKey","label","entry","index","content","angle","position","formatter","onClick","window","location","reload","alert","email","prompt","toEmail","_c","$RefreshReg$"],"sources":["/Users/seshasayeebalaji/Desktop/aws_proj/src/components/Visualization.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { \n  BarChart, Bar, PieChart, Pie, LineChart, Line, \n  XAxis, YAxis, CartesianGrid, Tooltip, Legend, \n  ResponsiveContainer, Cell\n} from 'recharts';\n\n// Custom colors for charts\nconst COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#8884d8', '#82ca9d', '#ffc658', '#ff7300'];\n\nexport default function MRIVisualizationDashboard() {\n  // State for storing data\n  const [errorCodeData, setErrorCodeData] = useState([]);\n  const [predictedFailuresData, setPredictedFailuresData] = useState([]);\n  const [machineRuntimeData, setMachineRuntimeData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Fetch data from backend\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        setLoading(true);\n        \n        // Fetch error code data from Athena\n        const errorCodeResponse = await fetch('/api/search-athena', {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({ keyword: 'Error' })\n        });\n        \n        if (!errorCodeResponse.ok) throw new Error('Failed to fetch error codes');\n        const errorCodeResult = await errorCodeResponse.json();\n        \n        // Process error code data for the bar chart\n        const errorCodeCounts = {};\n        errorCodeResult.data.slice(1).forEach(row => {\n          if (row.Data && row.Data[2] && row.Data[2].VarCharValue) {\n            const errorCode = row.Data[2].VarCharValue;\n            errorCodeCounts[errorCode] = (errorCodeCounts[errorCode] || 0) + 1;\n          }\n        });\n        \n        const processedErrorCodeData = Object.keys(errorCodeCounts).map(code => ({\n          errorCode: code,\n          count: errorCodeCounts[code]\n        })).sort((a, b) => b.count - a.count).slice(0, 10); // Get top 10\n        \n        setErrorCodeData(processedErrorCodeData);\n\n        // Fetch predicted failures from Azure Blob\n        const predictionsResponse = await fetch('/api/latest-predictions');\n        if (!predictionsResponse.ok) throw new Error('Failed to fetch predictions');\n        const predictionsResult = await predictionsResponse.json();\n        \n        // Process predictions data for pie chart\n        const machineFailureCounts = {};\n        predictionsResult.data.forEach(item => {\n          const machineId = item.machine_id;\n          machineFailureCounts[machineId] = (machineFailureCounts[machineId] || 0) + 1;\n        });\n        \n        const processedPredictionsData = Object.keys(machineFailureCounts).map(machine => ({\n          name: machine,\n          value: machineFailureCounts[machine]\n        }));\n        \n        setPredictedFailuresData(processedPredictionsData);\n\n        // Fetch runtime data from S3\n        const runtimeResponse = await fetch('/api/latest-s3-log');\n        if (!runtimeResponse.ok) throw new Error('Failed to fetch runtime data');\n        const runtimeResult = await runtimeResponse.json();\n        \n        // Process runtime data for bar chart\n        const machineRuntimes = {};\n        let runtimeCounts = {};\n        \n        runtimeResult.data.forEach(item => {\n          if (item.machine_id && item.machine_runtime) {\n            const machineId = item.machine_id;\n            const runtime = parseInt(item.machine_runtime, 10);\n            \n            if (!isNaN(runtime)) {\n              if (!machineRuntimes[machineId]) {\n                machineRuntimes[machineId] = 0;\n                runtimeCounts[machineId] = 0;\n              }\n              machineRuntimes[machineId] += runtime;\n              runtimeCounts[machineId]++;\n            }\n          }\n        });\n        \n        const processedRuntimeData = Object.keys(machineRuntimes).map(machine => ({\n          machineId: machine,\n          avgRuntime: machineRuntimes[machine] / (runtimeCounts[machine] || 1)\n        }));\n        \n        setMachineRuntimeData(processedRuntimeData);\n        \n      } catch (err) {\n        console.error('Error fetching visualization data:', err);\n        setError(err.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchData();\n  }, []);\n\n  // Custom tooltip for pie chart\n  const CustomTooltip = ({ active, payload }) => {\n    if (active && payload && payload.length) {\n      return (\n        <div className=\"bg-white p-2 border border-gray-200 shadow-md rounded-md\">\n          <p className=\"font-bold\">{`${payload[0].name}: ${payload[0].value}`}</p>\n          <p>{`${(payload[0].percent * 100).toFixed(2)}% of predictions`}</p>\n        </div>\n      );\n    }\n    return null;\n  };\n\n  if (loading) return (\n    <div className=\"flex items-center justify-center h-96\">\n      <div className=\"text-lg font-medium text-gray-600\">Loading visualization data...</div>\n    </div>\n  );\n\n  if (error) return (\n    <div className=\"bg-red-50 p-4 rounded-lg border border-red-200 text-red-700\">\n      <p className=\"font-bold\">Error loading visualizations:</p>\n      <p>{error}</p>\n    </div>\n  );\n\n  return (\n    <div className=\"p-6 max-w-6xl mx-auto\">\n      <h1 className=\"text-2xl font-bold mb-6 text-center\">MRI Machine Analytics Dashboard</h1>\n      \n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8\">\n        {/* Error Codes Bar Chart */}\n        <div className=\"bg-white p-4 rounded-lg shadow-md\">\n          <h2 className=\"text-xl font-semibold mb-4\">Most Frequent Error Codes</h2>\n          <div className=\"h-64\">\n            <ResponsiveContainer width=\"100%\" height=\"100%\">\n              <BarChart data={errorCodeData} margin={{ top: 5, right: 30, left: 20, bottom: 5 }}>\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis dataKey=\"errorCode\" />\n                <YAxis />\n                <Tooltip />\n                <Legend />\n                <Bar dataKey=\"count\" fill=\"#8884d8\" name=\"Frequency\" />\n              </BarChart>\n            </ResponsiveContainer>\n          </div>\n        </div>\n        \n        {/* Predicted Failures Pie Chart */}\n        <div className=\"bg-white p-4 rounded-lg shadow-md\">\n          <h2 className=\"text-xl font-semibold mb-4\">Predicted Failures by Machine</h2>\n          <div className=\"h-64\">\n            <ResponsiveContainer width=\"100%\" height=\"100%\">\n              <PieChart>\n                <Pie\n                  data={predictedFailuresData}\n                  cx=\"50%\"\n                  cy=\"50%\"\n                  labelLine={false}\n                  outerRadius={80}\n                  fill=\"#8884d8\"\n                  dataKey=\"value\"\n                  nameKey=\"name\"\n                  label={({ name, percent }) => `${name}: ${(percent * 100).toFixed(0)}%`}\n                >\n                  {predictedFailuresData.map((entry, index) => (\n                    <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\n                  ))}\n                </Pie>\n                <Tooltip content={<CustomTooltip />} />\n                <Legend />\n              </PieChart>\n            </ResponsiveContainer>\n          </div>\n        </div>\n        \n        {/* Machine Runtime Bar Chart */}\n        <div className=\"bg-white p-4 rounded-lg shadow-md md:col-span-2\">\n          <h2 className=\"text-xl font-semibold mb-4\">Average Runtime of Machines</h2>\n          <div className=\"h-64\">\n            <ResponsiveContainer width=\"100%\" height=\"100%\">\n              <BarChart data={machineRuntimeData} margin={{ top: 5, right: 30, left: 20, bottom: 5 }}>\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis dataKey=\"machineId\" />\n                <YAxis label={{ value: 'Runtime (seconds)', angle: -90, position: 'insideLeft' }} />\n                <Tooltip formatter={(value) => [`${value.toFixed(1)} seconds`, 'Avg Runtime']} />\n                <Legend />\n                <Bar dataKey=\"avgRuntime\" fill=\"#82ca9d\" name=\"Average Runtime (seconds)\" />\n              </BarChart>\n            </ResponsiveContainer>\n          </div>\n        </div>\n      </div>\n      \n      {/* Dashboard Controls */}\n      <div className=\"mt-8 bg-white p-4 rounded-lg shadow-md\">\n        <h2 className=\"text-xl font-semibold mb-4\">Dashboard Controls</h2>\n        <div className=\"flex flex-wrap gap-4\">\n          <button \n            className=\"bg-blue-600 hover:bg-blue-700 text-white py-2 px-4 rounded-md\"\n            onClick={() => window.location.reload()}\n          >\n            Refresh Data\n          </button>\n          <button \n            className=\"bg-green-600 hover:bg-green-700 text-white py-2 px-4 rounded-md\"\n            onClick={async () => {\n              try {\n                await fetch('/api/run-databricks-job', {\n                  method: 'POST',\n                  headers: { 'Content-Type': 'application/json' }\n                });\n                alert('Databricks job triggered successfully!');\n              } catch (err) {\n                alert('Failed to trigger Databricks job: ' + err.message);\n              }\n            }}\n          >\n            Run Prediction Job\n          </button>\n          <button \n            className=\"bg-purple-600 hover:bg-purple-700 text-white py-2 px-4 rounded-md\"\n            onClick={async () => {\n              try {\n                const email = prompt('Enter email address for maintenance alert:');\n                if (email) {\n                  await fetch('/api/send-maintenance-email', {\n                    method: 'POST',\n                    headers: { 'Content-Type': 'application/json' },\n                    body: JSON.stringify({ toEmail: email })\n                  });\n                  alert('Maintenance email sent successfully!');\n                }\n              } catch (err) {\n                alert('Failed to send email: ' + err.message);\n              }\n            }}\n          >\n            Send Maintenance Alert\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}