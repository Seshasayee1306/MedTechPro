{"ast":null,"code":"var _jsxFileName = \"/Users/seshasayeebalaji/Desktop/aws_proj/src/components/AthenaQuery.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction AthenaQuery() {\n  _s();\n  const [predictions, setPredictions] = useState([]);\n  const [filteredResults, setFilteredResults] = useState([]);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const API_URL = 'http://localhost:3001';\n  useEffect(() => {\n    fetchPredictions();\n  }, []);\n  const fetchPredictions = async () => {\n    try {\n      const response = await fetch(`${API_URL}/api/latest-predictions`);\n      const result = await response.json();\n      if (response.ok && Array.isArray(result.data)) {\n        setPredictions(result.data);\n        setFilteredResults(result.data); // Initially show all\n      } else {\n        throw new Error(result.error || 'Failed to load predictions');\n      }\n    } catch (err) {\n      console.error('Error:', err);\n      setError(err.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const handleSearch = e => {\n    const term = e.target.value.toLowerCase();\n    setSearchTerm(term);\n    const filtered = predictions.filter(entry => Object.values(entry).some(value => String(value).toLowerCase().includes(term)));\n    setFilteredResults(filtered);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"page-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Search Predictions\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: 'red'\n      },\n      children: [\"Error: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 17\n    }, this), loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading predictions...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Search by machine_id, error_code, status, etc.\",\n        value: searchTerm,\n        onChange: handleSearch,\n        style: {\n          padding: '8px',\n          width: '400px',\n          marginBottom: '20px'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 11\n      }, this), filteredResults.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No matching records found.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(\"table\", {\n        border: \"1\",\n        cellPadding: \"8\",\n        style: {\n          borderCollapse: 'collapse',\n          width: '100%'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: Object.keys(filteredResults[0]).map(key => /*#__PURE__*/_jsxDEV(\"th\", {\n              children: key.toUpperCase()\n            }, key, false, {\n              fileName: _jsxFileName,\n              lineNumber: 70,\n              columnNumber: 21\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: filteredResults.map((row, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: Object.values(row).map((val, i) => /*#__PURE__*/_jsxDEV(\"td\", {\n              children: val\n            }, i, false, {\n              fileName: _jsxFileName,\n              lineNumber: 78,\n              columnNumber: 23\n            }, this))\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 19\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n}\n_s(AthenaQuery, \"7V2GfoZeDibE76Pj626zjtc9zEo=\");\n_c = AthenaQuery;\nexport default AthenaQuery;\nvar _c;\n$RefreshReg$(_c, \"AthenaQuery\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","Fragment","_Fragment","AthenaQuery","_s","predictions","setPredictions","filteredResults","setFilteredResults","searchTerm","setSearchTerm","loading","setLoading","error","setError","API_URL","fetchPredictions","response","fetch","result","json","ok","Array","isArray","data","Error","err","console","message","handleSearch","e","term","target","value","toLowerCase","filtered","filter","entry","Object","values","some","String","includes","className","children","fileName","_jsxFileName","lineNumber","columnNumber","style","color","type","placeholder","onChange","padding","width","marginBottom","length","border","cellPadding","borderCollapse","keys","map","key","toUpperCase","row","index","val","i","_c","$RefreshReg$"],"sources":["/Users/seshasayeebalaji/Desktop/aws_proj/src/components/AthenaQuery.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\n\nfunction AthenaQuery() {\n  const [predictions, setPredictions] = useState([]);\n  const [filteredResults, setFilteredResults] = useState([]);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  const API_URL = 'http://localhost:3001';\n\n  useEffect(() => {\n    fetchPredictions();\n  }, []);\n\n  const fetchPredictions = async () => {\n    try {\n      const response = await fetch(`${API_URL}/api/latest-predictions`);\n      const result = await response.json();\n      if (response.ok && Array.isArray(result.data)) {\n        setPredictions(result.data);\n        setFilteredResults(result.data); // Initially show all\n      } else {\n        throw new Error(result.error || 'Failed to load predictions');\n      }\n    } catch (err) {\n      console.error('Error:', err);\n      setError(err.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleSearch = (e) => {\n    const term = e.target.value.toLowerCase();\n    setSearchTerm(term);\n\n    const filtered = predictions.filter((entry) =>\n      Object.values(entry).some((value) =>\n        String(value).toLowerCase().includes(term)\n      )\n    );\n    setFilteredResults(filtered);\n  };\n\n  return (\n    <div className=\"page-container\">\n      <h1>Search Predictions</h1>\n\n      {error && <p style={{ color: 'red' }}>Error: {error}</p>}\n      {loading ? (\n        <p>Loading predictions...</p>\n      ) : (\n        <>\n          <input\n            type=\"text\"\n            placeholder=\"Search by machine_id, error_code, status, etc.\"\n            value={searchTerm}\n            onChange={handleSearch}\n            style={{ padding: '8px', width: '400px', marginBottom: '20px' }}\n          />\n\n          {filteredResults.length === 0 ? (\n            <p>No matching records found.</p>\n          ) : (\n            <table border=\"1\" cellPadding=\"8\" style={{ borderCollapse: 'collapse', width: '100%' }}>\n              <thead>\n                <tr>\n                  {Object.keys(filteredResults[0]).map((key) => (\n                    <th key={key}>{key.toUpperCase()}</th>\n                  ))}\n                </tr>\n              </thead>\n              <tbody>\n                {filteredResults.map((row, index) => (\n                  <tr key={index}>\n                    {Object.values(row).map((val, i) => (\n                      <td key={i}>{val}</td>\n                    ))}\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          )}\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default AthenaQuery;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}