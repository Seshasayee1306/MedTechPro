{"ast":null,"code":"var _jsxFileName = \"/Users/seshasayeebalaji/Desktop/aws_proj/src/components/Predictions.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Container, Typography, Button, Box, CircularProgress, Alert, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Paper } from '@mui/material';\nimport { Pie } from 'react-chartjs-2';\nimport { Chart as ChartJS, ArcElement, Tooltip, Legend } from 'chart.js';\nimport papa from 'papaparse';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(ArcElement, Tooltip, Legend);\nfunction Predictions() {\n  _s();\n  const [predictions, setPredictions] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [jobStatus, setJobStatus] = useState('');\n  const [predictedFailures, setPredictedFailures] = useState(0); // Add state for predicted failures\n  const [predictedFailuresData, setPredictedFailuresData] = useState([]); // Add state for pie chart data\n\n  const API_URL = 'http://localhost:3001'; // Ensure this matches your backend\n\n  useEffect(() => {\n    fetchPredictions();\n    fetchPredictedFailuresData();\n  }, []);\n  const fetchPredictions = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      const response = await fetch(`${API_URL}/api/latest-predictions`);\n      if (!response.ok) throw new Error('Failed to fetch predictions');\n      const result = await response.json();\n      console.log('Predictions from backend:', result);\n      setPredictions(Array.isArray(result.data) ? result.data : []);\n\n      // Assuming your result contains a field for predicted failures in the next 16 hours\n      const totalFailures = result.data.reduce((acc, prediction) => acc + (prediction.predictedFailure || 0), 0);\n      setPredictedFailures(totalFailures); // Set predicted failures\n    } catch (error) {\n      console.error('Error:', error);\n      setError(error.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const fetchPredictedFailuresData = async () => {\n    try {\n      const response = await fetch('https://mristorage1234.blob.core.windows.net/mri-logs/predicted_errors.csv/part-00000-tid-322964752325347736-d966b189-1320-4925-8ac7-6e33f3fb29a6-2360-1-c000.csv?sp=r&st=2025-04-19T12:54:31Z&se=2025-04-19T20:54:31Z&spr=https&sv=2024-11-04&sr=b&sig=QuVn35siITPC5pC099aQrhGCqxdx8SOV%2BZl0rx4sYBU%3D');\n      if (!response.ok) throw new Error('Failed to fetch CSV from Blob Storage');\n      const csvText = await response.text();\n      Papa.parse(csvText, {\n        header: true,\n        skipEmptyLines: true,\n        complete: result => {\n          const data = result.data;\n          const machineFailureCounts = {};\n          const normalizeHeaders = row => {\n            const normalized = {};\n            for (let key in row) {\n              normalized[key.trim()] = row[key];\n            }\n            return normalized;\n          };\n          data.forEach(raw => {\n            var _item$machine_id;\n            const item = normalizeHeaders(raw);\n            const machineId = (_item$machine_id = item.machine_id) === null || _item$machine_id === void 0 ? void 0 : _item$machine_id.trim();\n            if (machineId) {\n              machineFailureCounts[machineId] = (machineFailureCounts[machineId] || 0) + 1;\n            }\n          });\n          const processedData = Object.entries(machineFailureCounts).map(([machine, value]) => ({\n            name: machine,\n            value\n          }));\n          if (processedData.length > 0) {\n            setPredictedFailuresData(processedData);\n          } else {\n            setPredictedFailuresData([]);\n          }\n        },\n        error: error => {\n          console.error(\"Error parsing CSV:\", error);\n        }\n      });\n    } catch (error) {\n      console.error(\"Error fetching predictions:\", error);\n    }\n  };\n  const triggerDatabricksJob = async () => {\n    try {\n      setJobStatus('Triggering Databricks job...');\n      const response = await fetch(`${API_URL}/api/run-databricks-job`, {\n        method: 'POST'\n      });\n      const result = await response.json();\n      if (result.success) {\n        setJobStatus(`✅ Job started with Run ID: ${result.run_id}`);\n      } else {\n        setJobStatus(`❌ Failed to trigger job`);\n      }\n    } catch (error) {\n      console.error('Trigger Error:', error);\n      setJobStatus(`❌ ${error.message}`);\n    }\n  };\n  const handleRefresh = () => {\n    setPredictions([]);\n    setPredictedFailures(0);\n    setJobStatus('');\n    fetchPredictions(); // Fetch predictions again\n  };\n  const pieChartData = {\n    labels: predictedFailuresData.map(item => item.name),\n    datasets: [{\n      data: predictedFailuresData.map(item => item.value),\n      backgroundColor: ['#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0', '#FF9F40']\n    }]\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    maxWidth: \"md\",\n    sx: {\n      textAlign: 'center',\n      mt: 6\n    },\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h4\",\n      gutterBottom: true,\n      children: \"Databricks Predictions\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"contained\",\n      color: \"primary\",\n      onClick: triggerDatabricksJob,\n      sx: {\n        mb: 2,\n        padding: '10px 20px',\n        fontSize: '16px'\n      },\n      children: \"\\u25B6\\uFE0F Run Prediction Model\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"outlined\",\n      color: \"secondary\",\n      onClick: handleRefresh,\n      sx: {\n        mb: 2,\n        padding: '10px 20px',\n        fontSize: '16px',\n        ml: 2\n      },\n      children: \"\\uD83D\\uDD04 Refresh Predictions\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 7\n    }, this), jobStatus && /*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"body1\",\n      sx: {\n        mb: 2\n      },\n      children: jobStatus\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 9\n    }, this), error && /*#__PURE__*/_jsxDEV(Alert, {\n      severity: \"error\",\n      sx: {\n        mb: 2\n      },\n      children: [\"Error: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h6\",\n      sx: {\n        mt: 2\n      },\n      children: \"Predicted number of machine failures in the upcoming 16 hours:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 7\n    }, this), loading ? /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        display: 'flex',\n        justifyContent: 'center'\n      },\n      children: /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 9\n    }, this) : predictions.length === 0 ? /*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"body1\",\n      color: \"text.secondary\",\n      sx: {\n        mt: 2\n      },\n      children: \"No prediction data available\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(TableContainer, {\n      component: Paper,\n      sx: {\n        mt: 4\n      },\n      children: /*#__PURE__*/_jsxDEV(Table, {\n        children: [/*#__PURE__*/_jsxDEV(TableHead, {\n          children: /*#__PURE__*/_jsxDEV(TableRow, {\n            children: Object.keys(predictions[0]).map(key => /*#__PURE__*/_jsxDEV(TableCell, {\n              align: \"center\",\n              children: /*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"h6\",\n                color: \"textPrimary\",\n                children: key.toUpperCase()\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 183,\n                columnNumber: 21\n              }, this)\n            }, key, false, {\n              fileName: _jsxFileName,\n              lineNumber: 182,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 180,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n          children: predictions.map((row, index) => /*#__PURE__*/_jsxDEV(TableRow, {\n            children: Object.values(row).map((value, i) => /*#__PURE__*/_jsxDEV(TableCell, {\n              align: \"center\",\n              children: value\n            }, i, false, {\n              fileName: _jsxFileName,\n              lineNumber: 194,\n              columnNumber: 21\n            }, this))\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 192,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 9\n    }, this), predictedFailuresData.length > 0 && /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        mt: 4\n      },\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h6\",\n        sx: {\n          mb: 2\n        },\n        children: \"Predicted Machine Failures (Pie Chart):\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Pie, {\n        data: pieChartData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 128,\n    columnNumber: 5\n  }, this);\n}\n_s(Predictions, \"HZAT0rBr+Z7XdByZfZdXSI/gUXc=\");\n_c = Predictions;\nexport default Predictions;\nvar _c;\n$RefreshReg$(_c, \"Predictions\");","map":{"version":3,"names":["React","useState","useEffect","Container","Typography","Button","Box","CircularProgress","Alert","Table","TableBody","TableCell","TableContainer","TableHead","TableRow","Paper","Pie","Chart","ChartJS","ArcElement","Tooltip","Legend","papa","jsxDEV","_jsxDEV","register","Predictions","_s","predictions","setPredictions","loading","setLoading","error","setError","jobStatus","setJobStatus","predictedFailures","setPredictedFailures","predictedFailuresData","setPredictedFailuresData","API_URL","fetchPredictions","fetchPredictedFailuresData","response","fetch","ok","Error","result","json","console","log","Array","isArray","data","totalFailures","reduce","acc","prediction","predictedFailure","message","csvText","text","Papa","parse","header","skipEmptyLines","complete","machineFailureCounts","normalizeHeaders","row","normalized","key","trim","forEach","raw","_item$machine_id","item","machineId","machine_id","processedData","Object","entries","map","machine","value","name","length","triggerDatabricksJob","method","success","run_id","handleRefresh","pieChartData","labels","datasets","backgroundColor","maxWidth","sx","textAlign","mt","children","variant","gutterBottom","fileName","_jsxFileName","lineNumber","columnNumber","color","onClick","mb","padding","fontSize","ml","severity","display","justifyContent","component","keys","align","toUpperCase","index","values","i","_c","$RefreshReg$"],"sources":["/Users/seshasayeebalaji/Desktop/aws_proj/src/components/Predictions.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Container, Typography, Button, Box, CircularProgress, Alert, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Paper } from '@mui/material';\nimport { Pie } from 'react-chartjs-2';\nimport { Chart as ChartJS, ArcElement, Tooltip, Legend } from 'chart.js';\nimport papa from 'papaparse';\n\n\nChartJS.register(ArcElement, Tooltip, Legend);\n\nfunction Predictions() {\n  const [predictions, setPredictions] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [jobStatus, setJobStatus] = useState('');\n  const [predictedFailures, setPredictedFailures] = useState(0); // Add state for predicted failures\n  const [predictedFailuresData, setPredictedFailuresData] = useState([]); // Add state for pie chart data\n\n  const API_URL = 'http://localhost:3001'; // Ensure this matches your backend\n\n  useEffect(() => {\n    fetchPredictions();\n    fetchPredictedFailuresData();\n  }, []);\n\n  const fetchPredictions = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      const response = await fetch(`${API_URL}/api/latest-predictions`);\n      if (!response.ok) throw new Error('Failed to fetch predictions');\n      const result = await response.json();\n      console.log('Predictions from backend:', result);\n      setPredictions(Array.isArray(result.data) ? result.data : []);\n\n      // Assuming your result contains a field for predicted failures in the next 16 hours\n      const totalFailures = result.data.reduce((acc, prediction) => acc + (prediction.predictedFailure || 0), 0);\n      setPredictedFailures(totalFailures); // Set predicted failures\n    } catch (error) {\n      console.error('Error:', error);\n      setError(error.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const fetchPredictedFailuresData = async () => {\n    try {\n      const response = await fetch('https://mristorage1234.blob.core.windows.net/mri-logs/predicted_errors.csv/part-00000-tid-322964752325347736-d966b189-1320-4925-8ac7-6e33f3fb29a6-2360-1-c000.csv?sp=r&st=2025-04-19T12:54:31Z&se=2025-04-19T20:54:31Z&spr=https&sv=2024-11-04&sr=b&sig=QuVn35siITPC5pC099aQrhGCqxdx8SOV%2BZl0rx4sYBU%3D');\n      if (!response.ok) throw new Error('Failed to fetch CSV from Blob Storage');\n  \n      const csvText = await response.text();\n  \n      Papa.parse(csvText, {\n        header: true,\n        skipEmptyLines: true,\n        complete: (result) => {\n          const data = result.data;\n          const machineFailureCounts = {};\n  \n          const normalizeHeaders = (row) => {\n            const normalized = {};\n            for (let key in row) {\n              normalized[key.trim()] = row[key];\n            }\n            return normalized;\n          };\n  \n          data.forEach(raw => {\n            const item = normalizeHeaders(raw);\n            const machineId = item.machine_id?.trim();\n            if (machineId) {\n              machineFailureCounts[machineId] = (machineFailureCounts[machineId] || 0) + 1;\n            }\n          });\n  \n          const processedData = Object.entries(machineFailureCounts)\n            .map(([machine, value]) => ({ name: machine, value }));\n  \n          if (processedData.length > 0) {\n            setPredictedFailuresData(processedData);\n          } else {\n            setPredictedFailuresData([]);\n          }\n        },\n        error: (error) => {\n          console.error(\"Error parsing CSV:\", error);\n        }\n      });\n    } catch (error) {\n      console.error(\"Error fetching predictions:\", error);\n    }\n  };\n\n  const triggerDatabricksJob = async () => {\n    try {\n      setJobStatus('Triggering Databricks job...');\n      const response = await fetch(`${API_URL}/api/run-databricks-job`, {\n        method: 'POST',\n      });\n      const result = await response.json();\n      if (result.success) {\n        setJobStatus(`✅ Job started with Run ID: ${result.run_id}`);\n      } else {\n        setJobStatus(`❌ Failed to trigger job`);\n      }\n    } catch (error) {\n      console.error('Trigger Error:', error);\n      setJobStatus(`❌ ${error.message}`);\n    }\n  };\n\n  const handleRefresh = () => {\n    setPredictions([]);\n    setPredictedFailures(0);\n    setJobStatus('');\n    fetchPredictions(); // Fetch predictions again\n  };\n\n  const pieChartData = {\n    labels: predictedFailuresData.map(item => item.name),\n    datasets: [{\n      data: predictedFailuresData.map(item => item.value),\n      backgroundColor: ['#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0', '#FF9F40'],\n    }]\n  };\n\n  return (\n    <Container maxWidth=\"md\" sx={{ textAlign: 'center', mt: 6 }}>\n      <Typography variant=\"h4\" gutterBottom>\n        Databricks Predictions\n      </Typography>\n\n      <Button\n        variant=\"contained\"\n        color=\"primary\"\n        onClick={triggerDatabricksJob}\n        sx={{ mb: 2, padding: '10px 20px', fontSize: '16px' }}\n      >\n        ▶️ Run Prediction Model\n      </Button>\n\n      <Button\n        variant=\"outlined\"\n        color=\"secondary\"\n        onClick={handleRefresh}\n        sx={{ mb: 2, padding: '10px 20px', fontSize: '16px', ml: 2 }}\n      >\n        🔄 Refresh Predictions\n      </Button>\n\n      {jobStatus && (\n        <Typography variant=\"body1\" sx={{ mb: 2 }}>\n          {jobStatus}\n        </Typography>\n      )}\n\n      {error && (\n        <Alert severity=\"error\" sx={{ mb: 2 }}>\n          Error: {error}\n        </Alert>\n      )}\n\n      {/* Display predicted number of failures */}\n      <Typography variant=\"h6\" sx={{ mt: 2 }}>\n        Predicted number of machine failures in the upcoming 16 hours: \n      </Typography>\n\n      {loading ? (\n        <Box sx={{ display: 'flex', justifyContent: 'center' }}>\n          <CircularProgress />\n        </Box>\n      ) : predictions.length === 0 ? (\n        <Typography variant=\"body1\" color=\"text.secondary\" sx={{ mt: 2 }}>\n          No prediction data available\n        </Typography>\n      ) : (\n        <TableContainer component={Paper} sx={{ mt: 4 }}>\n          <Table>\n            <TableHead>\n              <TableRow>\n                {Object.keys(predictions[0]).map((key) => (\n                  <TableCell key={key} align=\"center\">\n                    <Typography variant=\"h6\" color=\"textPrimary\">\n                      {key.toUpperCase()}\n                    </Typography>\n                  </TableCell>\n                ))}\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {predictions.map((row, index) => (\n                <TableRow key={index}>\n                  {Object.values(row).map((value, i) => (\n                    <TableCell key={i} align=\"center\">\n                      {value}\n                    </TableCell>\n                  ))}\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </TableContainer>\n      )}\n\n      {/* Pie Chart */}\n      {predictedFailuresData.length > 0 && (\n        <Box sx={{ mt: 4 }}>\n          <Typography variant=\"h6\" sx={{ mb: 2 }}>\n            Predicted Machine Failures (Pie Chart):\n          </Typography>\n          <Pie data={pieChartData} />\n        </Box>\n      )}\n    </Container>\n  );\n}\n\nexport default Predictions;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}