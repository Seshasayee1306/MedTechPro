{"ast":null,"code":"var _jsxFileName = \"/Users/seshasayeebalaji/Desktop/aws_proj/src/components/Predictions.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Container, Typography, Button, Box, CircularProgress, Alert, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Paper } from '@mui/material';\nimport Papa from 'papaparse'; // Add this import\nimport { Pie } from 'react-chartjs-2'; // Ensure the correct import for Pie chart\nimport { Chart as ChartJS, Title, Tooltip, Legend, ArcElement, CategoryScale } from 'chart.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(Title, Tooltip, Legend, ArcElement, CategoryScale); // Register necessary chart.js components\n\nfunction Predictions() {\n  _s();\n  const [predictions, setPredictions] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [jobStatus, setJobStatus] = useState('');\n  const [predictedFailuresData, setPredictedFailuresData] = useState([]); // For chart data\n\n  const API_URL = 'http://localhost:3001'; // Ensure this matches your backend\n\n  useEffect(() => {\n    fetchPredictions();\n    fetchPredictedFailuresData(); // Fetch predicted failure data for chart\n  }, []);\n  const fetchPredictions = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      const response = await fetch(`${API_URL}/api/latest-predictions`);\n      if (!response.ok) throw new Error('Failed to fetch predictions');\n      const result = await response.json();\n      setPredictions(Array.isArray(result.data) ? result.data : []);\n    } catch (error) {\n      console.error('Error:', error);\n      setError(error.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const fetchPredictedFailuresData = async () => {\n    try {\n      const response = await fetch('https://mristorage1234.blob.core.windows.net/mri-logs/predicted_errors.csv/part-00000-tid-322964752325347736-d966b189-1320-4925-8ac7-6e33f3fb29a6-2360-1-c000.csv?sp=r&st=2025-04-19T12:54:31Z&se=2025-04-19T20:54:31Z&spr=https&sv=2024-11-04&sr=b&sig=QuVn35siITPC5pC099aQrhGCqxdx8SOV%2BZl0rx4sYBU%3D');\n      if (!response.ok) throw new Error('Failed to fetch CSV from Blob Storage');\n      const csvText = await response.text();\n      Papa.parse(csvText, {\n        header: true,\n        skipEmptyLines: true,\n        complete: result => {\n          const data = result.data;\n          const machineFailureCounts = {};\n          const normalizeHeaders = row => {\n            const normalized = {};\n            for (let key in row) {\n              normalized[key.trim()] = row[key];\n            }\n            return normalized;\n          };\n          data.forEach(raw => {\n            var _item$machine_id;\n            const item = normalizeHeaders(raw);\n            const machineId = (_item$machine_id = item.machine_id) === null || _item$machine_id === void 0 ? void 0 : _item$machine_id.trim();\n            if (machineId) {\n              machineFailureCounts[machineId] = (machineFailureCounts[machineId] || 0) + 1;\n            }\n          });\n          const processedData = Object.entries(machineFailureCounts).map(([machine, value]) => ({\n            name: machine,\n            value\n          }));\n          setPredictedFailuresData(processedData); // Set data for the chart\n        },\n        error: error => {\n          console.error(\"Error parsing CSV:\", error);\n        }\n      });\n    } catch (error) {\n      console.error(\"Error fetching predictions:\", error);\n    }\n  };\n  const triggerDatabricksJob = async () => {\n    try {\n      setJobStatus('Triggering Databricks job...');\n      const response = await fetch(`${API_URL}/api/run-databricks-job`, {\n        method: 'POST'\n      });\n      const result = await response.json();\n      if (result.success) {\n        setJobStatus(`✅ Job started with Run ID: ${result.run_id}`);\n      } else {\n        setJobStatus(`❌ Failed to trigger job`);\n      }\n    } catch (error) {\n      console.error('Trigger Error:', error);\n      setJobStatus(`❌ ${error.message}`);\n    }\n  };\n\n  // Function to refresh predictions and reset states\n  const handleRefresh = () => {\n    setPredictions([]);\n    fetchPredictions(); // Fetch predictions again\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    maxWidth: \"md\",\n    sx: {\n      textAlign: 'center',\n      mt: 6\n    },\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h4\",\n      gutterBottom: true,\n      children: \"Databricks Predictions\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"contained\",\n      color: \"primary\",\n      onClick: triggerDatabricksJob,\n      sx: {\n        mb: 2,\n        padding: '10px 20px',\n        fontSize: '16px'\n      },\n      children: \"\\u25B6\\uFE0F Run Prediction Model\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"outlined\",\n      color: \"secondary\",\n      onClick: handleRefresh,\n      sx: {\n        mb: 2,\n        padding: '10px 20px',\n        fontSize: '16px',\n        ml: 2\n      },\n      children: \"\\uD83D\\uDD04 Refresh Predictions\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }, this), jobStatus && /*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"body1\",\n      sx: {\n        mb: 2\n      },\n      children: jobStatus\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 9\n    }, this), error && /*#__PURE__*/_jsxDEV(Alert, {\n      severity: \"error\",\n      sx: {\n        mb: 2\n      },\n      children: [\"Error: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h6\",\n      sx: {\n        mt: 2\n      },\n      children: \"Predicted number of machine failures in the upcoming 16 hours:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 7\n    }, this), loading ? /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        display: 'flex',\n        justifyContent: 'center'\n      },\n      children: /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 9\n    }, this) : predictions.length === 0 ? /*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"body1\",\n      color: \"text.secondary\",\n      sx: {\n        mt: 2\n      },\n      children: \"No prediction data available\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(TableContainer, {\n      component: Paper,\n      sx: {\n        mt: 4\n      },\n      children: /*#__PURE__*/_jsxDEV(Table, {\n        children: [/*#__PURE__*/_jsxDEV(TableHead, {\n          children: /*#__PURE__*/_jsxDEV(TableRow, {\n            children: Object.keys(predictions[0]).map(key => /*#__PURE__*/_jsxDEV(TableCell, {\n              align: \"center\",\n              children: /*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"h6\",\n                color: \"textPrimary\",\n                children: key.toUpperCase()\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 163,\n                columnNumber: 21\n              }, this)\n            }, key, false, {\n              fileName: _jsxFileName,\n              lineNumber: 162,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 160,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n          children: predictions.map((row, index) => /*#__PURE__*/_jsxDEV(TableRow, {\n            children: Object.values(row).map((value, i) => /*#__PURE__*/_jsxDEV(TableCell, {\n              align: \"center\",\n              children: value\n            }, i, false, {\n              fileName: _jsxFileName,\n              lineNumber: 174,\n              columnNumber: 21\n            }, this))\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 172,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 9\n    }, this), predictedFailuresData.length > 0 ? /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        mt: 4\n      },\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h6\",\n        children: \"Predicted Machine Failures\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Pie, {\n        data: {\n          labels: predictedFailuresData.map(item => item.name),\n          datasets: [{\n            data: predictedFailuresData.map(item => item.value),\n            backgroundColor: ['#ff6384', '#36a2eb', '#cc65fe', '#ffce56'],\n            hoverBackgroundColor: ['#ff4d6d', '#3399ff', '#aa33ff', '#ffb84d']\n          }]\n        },\n        options: {\n          responsive: true,\n          plugins: {\n            legend: {\n              position: 'top'\n            }\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"body1\",\n      color: \"text.secondary\",\n      sx: {\n        mt: 2\n      },\n      children: \"No data available for predicted machine failures.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 108,\n    columnNumber: 5\n  }, this);\n}\n_s(Predictions, \"ySQLvazkHcdBYVBbVgqPs6Nh368=\");\n_c = Predictions;\nexport default Predictions;\nvar _c;\n$RefreshReg$(_c, \"Predictions\");","map":{"version":3,"names":["React","useState","useEffect","Container","Typography","Button","Box","CircularProgress","Alert","Table","TableBody","TableCell","TableContainer","TableHead","TableRow","Paper","Papa","Pie","Chart","ChartJS","Title","Tooltip","Legend","ArcElement","CategoryScale","jsxDEV","_jsxDEV","register","Predictions","_s","predictions","setPredictions","loading","setLoading","error","setError","jobStatus","setJobStatus","predictedFailuresData","setPredictedFailuresData","API_URL","fetchPredictions","fetchPredictedFailuresData","response","fetch","ok","Error","result","json","Array","isArray","data","console","message","csvText","text","parse","header","skipEmptyLines","complete","machineFailureCounts","normalizeHeaders","row","normalized","key","trim","forEach","raw","_item$machine_id","item","machineId","machine_id","processedData","Object","entries","map","machine","value","name","triggerDatabricksJob","method","success","run_id","handleRefresh","maxWidth","sx","textAlign","mt","children","variant","gutterBottom","fileName","_jsxFileName","lineNumber","columnNumber","color","onClick","mb","padding","fontSize","ml","severity","display","justifyContent","length","component","keys","align","toUpperCase","index","values","i","labels","datasets","backgroundColor","hoverBackgroundColor","options","responsive","plugins","legend","position","_c","$RefreshReg$"],"sources":["/Users/seshasayeebalaji/Desktop/aws_proj/src/components/Predictions.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Container, Typography, Button, Box, CircularProgress, Alert, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Paper } from '@mui/material';\nimport Papa from 'papaparse'; // Add this import\nimport { Pie } from 'react-chartjs-2'; // Ensure the correct import for Pie chart\nimport { Chart as ChartJS, Title, Tooltip, Legend, ArcElement, CategoryScale } from 'chart.js';\n\nChartJS.register(Title, Tooltip, Legend, ArcElement, CategoryScale); // Register necessary chart.js components\n\nfunction Predictions() {\n  const [predictions, setPredictions] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [jobStatus, setJobStatus] = useState('');\n  const [predictedFailuresData, setPredictedFailuresData] = useState([]); // For chart data\n\n  const API_URL = 'http://localhost:3001'; // Ensure this matches your backend\n\n  useEffect(() => {\n    fetchPredictions();\n    fetchPredictedFailuresData(); // Fetch predicted failure data for chart\n  }, []);\n\n  const fetchPredictions = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      const response = await fetch(`${API_URL}/api/latest-predictions`);\n      if (!response.ok) throw new Error('Failed to fetch predictions');\n      const result = await response.json();\n      setPredictions(Array.isArray(result.data) ? result.data : []);\n    } catch (error) {\n      console.error('Error:', error);\n      setError(error.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const fetchPredictedFailuresData = async () => {\n    try {\n      const response = await fetch('https://mristorage1234.blob.core.windows.net/mri-logs/predicted_errors.csv/part-00000-tid-322964752325347736-d966b189-1320-4925-8ac7-6e33f3fb29a6-2360-1-c000.csv?sp=r&st=2025-04-19T12:54:31Z&se=2025-04-19T20:54:31Z&spr=https&sv=2024-11-04&sr=b&sig=QuVn35siITPC5pC099aQrhGCqxdx8SOV%2BZl0rx4sYBU%3D');\n      if (!response.ok) throw new Error('Failed to fetch CSV from Blob Storage');\n  \n      const csvText = await response.text();\n  \n      Papa.parse(csvText, {\n        header: true,\n        skipEmptyLines: true,\n        complete: (result) => {\n          const data = result.data;\n          const machineFailureCounts = {};\n  \n          const normalizeHeaders = (row) => {\n            const normalized = {};\n            for (let key in row) {\n              normalized[key.trim()] = row[key];\n            }\n            return normalized;\n          };\n  \n          data.forEach(raw => {\n            const item = normalizeHeaders(raw);\n            const machineId = item.machine_id?.trim();\n            if (machineId) {\n              machineFailureCounts[machineId] = (machineFailureCounts[machineId] || 0) + 1;\n            }\n          });\n  \n          const processedData = Object.entries(machineFailureCounts)\n            .map(([machine, value]) => ({ name: machine, value }));\n  \n          setPredictedFailuresData(processedData); // Set data for the chart\n        },\n        error: (error) => {\n          console.error(\"Error parsing CSV:\", error);\n        }\n      });\n    } catch (error) {\n      console.error(\"Error fetching predictions:\", error);\n    }\n  };\n\n  const triggerDatabricksJob = async () => {\n    try {\n      setJobStatus('Triggering Databricks job...');\n      const response = await fetch(`${API_URL}/api/run-databricks-job`, {\n        method: 'POST',\n      });\n      const result = await response.json();\n      if (result.success) {\n        setJobStatus(`✅ Job started with Run ID: ${result.run_id}`);\n      } else {\n        setJobStatus(`❌ Failed to trigger job`);\n      }\n    } catch (error) {\n      console.error('Trigger Error:', error);\n      setJobStatus(`❌ ${error.message}`);\n    }\n  };\n\n  // Function to refresh predictions and reset states\n  const handleRefresh = () => {\n    setPredictions([]);\n    fetchPredictions(); // Fetch predictions again\n  };\n\n  return (\n    <Container maxWidth=\"md\" sx={{ textAlign: 'center', mt: 6 }}>\n      <Typography variant=\"h4\" gutterBottom>\n        Databricks Predictions\n      </Typography>\n\n      <Button\n        variant=\"contained\"\n        color=\"primary\"\n        onClick={triggerDatabricksJob}\n        sx={{ mb: 2, padding: '10px 20px', fontSize: '16px' }}\n      >\n        ▶️ Run Prediction Model\n      </Button>\n\n      <Button\n        variant=\"outlined\"\n        color=\"secondary\"\n        onClick={handleRefresh}\n        sx={{ mb: 2, padding: '10px 20px', fontSize: '16px', ml: 2 }}\n      >\n        🔄 Refresh Predictions\n      </Button>\n\n      {jobStatus && (\n        <Typography variant=\"body1\" sx={{ mb: 2 }}>\n          {jobStatus}\n        </Typography>\n      )}\n\n      {error && (\n        <Alert severity=\"error\" sx={{ mb: 2 }}>\n          Error: {error}\n        </Alert>\n      )}\n\n      {/* Display predicted number of failures */}\n      <Typography variant=\"h6\" sx={{ mt: 2 }}>\n        Predicted number of machine failures in the upcoming 16 hours: \n      </Typography>\n\n      {loading ? (\n        <Box sx={{ display: 'flex', justifyContent: 'center' }}>\n          <CircularProgress />\n        </Box>\n      ) : predictions.length === 0 ? (\n        <Typography variant=\"body1\" color=\"text.secondary\" sx={{ mt: 2 }}>\n          No prediction data available\n        </Typography>\n      ) : (\n        <TableContainer component={Paper} sx={{ mt: 4 }}>\n          <Table>\n            <TableHead>\n              <TableRow>\n                {Object.keys(predictions[0]).map((key) => (\n                  <TableCell key={key} align=\"center\">\n                    <Typography variant=\"h6\" color=\"textPrimary\">\n                      {key.toUpperCase()}\n                    </Typography>\n                  </TableCell>\n                ))}\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {predictions.map((row, index) => (\n                <TableRow key={index}>\n                  {Object.values(row).map((value, i) => (\n                    <TableCell key={i} align=\"center\">\n                      {value}\n                    </TableCell>\n                  ))}\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </TableContainer>\n      )}\n\n      {/* Pie Chart for predicted failures */}\n      {predictedFailuresData.length > 0 ? (\n        <Box sx={{ mt: 4 }}>\n          <Typography variant=\"h6\">Predicted Machine Failures</Typography>\n          <Pie\n            data={{\n              labels: predictedFailuresData.map(item => item.name),\n              datasets: [\n                {\n                  data: predictedFailuresData.map(item => item.value),\n                  backgroundColor: ['#ff6384', '#36a2eb', '#cc65fe', '#ffce56'],\n                  hoverBackgroundColor: ['#ff4d6d', '#3399ff', '#aa33ff', '#ffb84d'],\n                },\n              ],\n            }}\n            options={{\n              responsive: true,\n              plugins: {\n                legend: {\n                  position: 'top',\n                },\n              },\n            }}\n          />\n        </Box>\n      ) : (\n        <Typography variant=\"body1\" color=\"text.secondary\" sx={{ mt: 2 }}>\n          No data available for predicted machine failures.\n        </Typography>\n      )}\n    </Container>\n  );\n}\n\nexport default Predictions;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}