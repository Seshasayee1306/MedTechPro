{"ast":null,"code":"var _jsxFileName = \"/Users/seshasayeebalaji/Desktop/aws_proj/src/components/Visualization.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { BarChart, Bar, PieChart, Pie, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, Cell } from 'recharts';\n\n// Mock data for immediate display while real data loads\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst mockErrorCodeData = [{\n  errorCode: \"E123\",\n  count: 42\n}, {\n  errorCode: \"E045\",\n  count: 38\n}, {\n  errorCode: \"E211\",\n  count: 27\n}, {\n  errorCode: \"E078\",\n  count: 19\n}, {\n  errorCode: \"E156\",\n  count: 15\n}];\nconst mockPredictedFailuresData = [{\n  name: \"MRI_001\",\n  value: 12\n}, {\n  name: \"MRI_002\",\n  value: 8\n}, {\n  name: \"MRI_003\",\n  value: 5\n}, {\n  name: \"MRI_004\",\n  value: 3\n}];\nconst mockMachineRuntimeData = [{\n  machineId: \"MRI_001\",\n  avgRuntime: 452\n}, {\n  machineId: \"MRI_002\",\n  avgRuntime: 387\n}, {\n  machineId: \"MRI_003\",\n  avgRuntime: 521\n}, {\n  machineId: \"MRI_004\",\n  avgRuntime: 312\n}];\n\n// Custom colors for charts\nconst COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#8884d8', '#82ca9d', '#ffc658', '#ff7300'];\nexport default function MRIVisualizationDashboard() {\n  _s();\n  // State for storing data\n  const [errorCodeData, setErrorCodeData] = useState(mockErrorCodeData);\n  const [predictedFailuresData, setPredictedFailuresData] = useState(mockPredictedFailuresData);\n  const [machineRuntimeData, setMachineRuntimeData] = useState(mockMachineRuntimeData);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [dataSource, setDataSource] = useState('mock');\n\n  // Fetch data from backend or use mock data\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        setLoading(true);\n        setError(null); // Reset error on each fetch\n\n        // --- Fetch Error Code Data ---\n        try {\n          const errorCodeResponse = await fetch('/api/search-athena', {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n              keyword: 'Error'\n            })\n          });\n          if (errorCodeResponse.ok) {\n            const errorCodeResult = await errorCodeResponse.json();\n            if (errorCodeResult.data && errorCodeResult.data.slice(1)) {\n              const errorCodeCounts = {};\n              errorCodeResult.data.slice(1).forEach(row => {\n                if (row.Data && row.Data[2] && row.Data[2].VarCharValue) {\n                  const errorCode = row.Data[2].VarCharValue;\n                  errorCodeCounts[errorCode] = (errorCodeCounts[errorCode] || 0) + 1;\n                }\n              });\n              const processedErrorCodeData = Object.keys(errorCodeCounts).map(code => ({\n                errorCode: code,\n                count: errorCodeCounts[code]\n              })).sort((a, b) => b.count - a.count).slice(0, 10);\n              setErrorCodeData(processedErrorCodeData);\n              console.log(\"After fetching/processing errorCodeData:\", processedErrorCodeData);\n            } else {\n              console.warn(\"No or invalid error code data from API.\");\n            }\n          } else {\n            console.error(\"Failed to fetch error code data:\", errorCodeResponse.status);\n          }\n        } catch (err) {\n          console.error(\"Error fetching error codes:\", err);\n        }\n\n        // --- Fetch Predicted Failures Data ---\n        try {\n          const predictionsResponse = await fetch('/api/latest-predictions');\n          if (predictionsResponse.ok) {\n            const predictionsResult = await predictionsResponse.json();\n            if (predictionsResult.data && Array.isArray(predictionsResult.data)) {\n              const machineFailureCounts = {};\n              predictionsResult.data.forEach(item => {\n                const machineId = item.machine_id;\n                if (machineId) {\n                  machineFailureCounts[machineId] = (machineFailureCounts[machineId] || 0) + 1;\n                }\n              });\n              const processedPredictionsData = Object.keys(machineFailureCounts).map(machine => ({\n                name: machine,\n                value: machineFailureCounts[machine]\n              }));\n              setPredictedFailuresData(processedPredictionsData);\n              console.log(\"After fetching/processing predictedFailuresData:\", processedPredictionsData);\n            } else {\n              console.warn(\"No or invalid predictions data from API.\");\n            }\n          } else {\n            console.error(\"Failed to fetch predictions data:\", predictionsResponse.status);\n          }\n        } catch (err) {\n          console.error(\"Error fetching predictions:\", err);\n        }\n\n        // --- Fetch Machine Runtime Data ---\n        try {\n          const runtimeResponse = await fetch('/api/latest-s3-log');\n          if (runtimeResponse.ok) {\n            const runtimeResult = await runtimeResponse.json();\n            console.log(\"Raw runtimeResult:\", runtimeResult); // Log the raw result\n            if (runtimeResult.data && Array.isArray(runtimeResult.data)) {\n              const machineRuntimes = {};\n              const runtimeCounts = {};\n              runtimeResult.data.forEach(item => {\n                if (item.machine_id && item.machine_runtime) {\n                  const machineId = item.machine_id;\n                  const runtime = parseInt(item.machine_runtime, 10);\n                  if (!isNaN(runtime)) {\n                    machineRuntimes[machineId] = (machineRuntimes[machineId] || 0) + runtime;\n                    runtimeCounts[machineId] = (runtimeCounts[machineId] || 0) + 1;\n                  }\n                }\n              });\n              const processedRuntimeData = Object.keys(machineRuntimes).map(machine => ({\n                machineId: machine,\n                avgRuntime: runtimeCounts[machine] > 0 ? machineRuntimes[machine] / runtimeCounts[machine] : 0\n              }));\n              setMachineRuntimeData(processedRuntimeData);\n              console.log(\"After fetching/processing machineRuntimeData:\", processedRuntimeData);\n            } else {\n              console.warn(\"No or invalid runtime data from API.\");\n              setMachineRuntimeData([]); // Ensure state is updated even if data is bad\n            }\n          } else {\n            console.error(\"Failed to fetch runtime data:\", runtimeResponse.status);\n            setMachineRuntimeData([]); // Ensure state is updated on failure\n          }\n        } catch (err) {\n          console.error(\"Error fetching runtime data:\", err);\n          setMachineRuntimeData([]); // Ensure state is updated on error\n        }\n        setDataSource('api');\n      } catch (err) {\n        console.error('Error in fetchData:', err);\n        setError(err.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchData();\n  }, []);\n\n  // Custom tooltip for pie chart\n  const CustomTooltip = ({\n    active,\n    payload\n  }) => {\n    if (active && payload && payload.length) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-white p-2 border border-gray-200 shadow-md rounded-md\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"font-bold\",\n          children: `${payload[0].name}: ${payload[0].value}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: `${(payload[0].percent * 100).toFixed(2)}% of predictions`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 9\n      }, this);\n    }\n    return null;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"p-6 max-w-6xl mx-auto\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"text-3xl font-bold mb-8 text-center text-gray-800\",\n      children: \"MRI Machine Analytics Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bg-red-50 p-4 rounded-lg border border-red-200 text-red-700 mb-6\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"font-bold\",\n        children: \"Error loading visualizations:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 9\n    }, this), dataSource === 'mock' && !loading && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bg-blue-50 p-4 rounded-lg border border-blue-200 text-blue-700 mb-6\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"font-bold\",\n        children: \"Note: Using sample data for visualization\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Real API data could not be loaded. Displaying demo charts instead.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid grid-cols-1 md:grid-cols-2 gap-8 mb-8\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-white p-6 rounded-lg shadow-md\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"text-xl font-semibold mb-4 text-gray-700\",\n          children: \"Most Frequent Error Codes\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"h-64\",\n          children: /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n            width: \"100%\",\n            height: \"100%\",\n            children: /*#__PURE__*/_jsxDEV(BarChart, {\n              data: errorCodeData,\n              margin: {\n                top: 5,\n                right: 30,\n                left: 20,\n                bottom: 5\n              },\n              children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n                strokeDasharray: \"3 3\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 199,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n                dataKey: \"errorCode\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 200,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 201,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 202,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 203,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Bar, {\n                dataKey: \"count\",\n                fill: \"#8884d8\",\n                name: \"Frequency\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 204,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 198,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 197,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-white p-6 rounded-lg shadow-md\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"text-xl font-semibold mb-4 text-gray-700\",\n          children: \"Predicted Failures by Machine\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"h-64\",\n          children: /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n            width: \"100%\",\n            height: \"100%\",\n            children: /*#__PURE__*/_jsxDEV(PieChart, {\n              children: [/*#__PURE__*/_jsxDEV(Pie, {\n                data: predictedFailuresData,\n                cx: \"50%\",\n                cy: \"50%\",\n                labelLine: false,\n                outerRadius: 80,\n                fill: \"#8884d8\",\n                dataKey: \"value\",\n                nameKey: \"name\",\n                label: ({\n                  name,\n                  percent\n                }) => `${name}: ${(percent * 100).toFixed(0)}%`,\n                children: predictedFailuresData.map((entry, index) => /*#__PURE__*/_jsxDEV(Cell, {\n                  fill: COLORS[index % COLORS.length]\n                }, `cell-${index}`, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 228,\n                  columnNumber: 21\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 216,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n                content: /*#__PURE__*/_jsxDEV(CustomTooltip, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 231,\n                  columnNumber: 35\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 231,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 232,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 215,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 214,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bg-white p-6 rounded-lg shadow-md mb-8\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-xl font-semibold mb-4 text-gray-700\",\n        children: \"Average Runtime of Machines\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"h-64\",\n        children: /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n          width: \"100%\",\n          height: \"100%\",\n          children: /*#__PURE__*/_jsxDEV(BarChart, {\n            data: machineRuntimeData,\n            margin: {\n              top: 5,\n              right: 30,\n              left: 20,\n              bottom: 5\n            },\n            children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n              strokeDasharray: \"3 3\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 245,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n              dataKey: \"machineId\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 246,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n              label: {\n                value: 'Runtime (seconds)',\n                angle: -90,\n                position: 'insideLeft'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 247,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n              formatter: value => [`${value.toFixed(1)} seconds`, 'Avg Runtime']\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 248,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 249,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Bar, {\n              dataKey: \"avgRuntime\",\n              fill: \"#82ca9d\",\n              name: \"Average Runtime (seconds)\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 250,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 244,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 243,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bg-white p-6 rounded-lg shadow-md\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-xl font-semibold mb-4 text-gray-700\",\n        children: \"Dashboard Controls\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex flex-wrap gap-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"bg-black hover:bg-gray-800 text-white py-2 px-4 rounded-md\",\n          onClick: () => window.location.reload(),\n          children: \"Refresh Data\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 260,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"bg-black hover:bg-gray-800 text-white py-2 px-4 rounded-md\",\n          onClick: async () => {\n            try {\n              await fetch('/api/run-databricks-job', {\n                method: 'POST',\n                headers: {\n                  'Content-Type': 'application/json'\n                }\n              });\n              alert('Databricks job triggered successfully!');\n            } catch (err) {\n              alert('Failed to trigger Databricks job: ' + err.message);\n            }\n          },\n          children: \"Run Prediction Job\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 266,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"bg-black hover:bg-gray-800 text-white py-2 px-4 rounded-md\",\n          onClick: async () => {\n            try {\n              const email = prompt('Enter email address for maintenance alert:');\n              if (email) {\n                await fetch('/api/send-maintenance-email', {\n                  method: 'POST',\n                  headers: {\n                    'Content-Type': 'application/json'\n                  },\n                  body: JSON.stringify({\n                    toEmail: email\n                  })\n                });\n                alert('Maintenance email sent successfully!');\n              }\n            } catch (err) {\n              alert('Failed to send email: ' + err.message);\n            }\n          },\n          children: \"Send Maintenance Alert\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 282,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 175,\n    columnNumber: 5\n  }, this);\n}\n_s(MRIVisualizationDashboard, \"U8ioh2uctlwC39+J5MB0MxZ9JuQ=\");\n_c = MRIVisualizationDashboard;\nvar _c;\n$RefreshReg$(_c, \"MRIVisualizationDashboard\");","map":{"version":3,"names":["React","useState","useEffect","BarChart","Bar","PieChart","Pie","XAxis","YAxis","CartesianGrid","Tooltip","Legend","ResponsiveContainer","Cell","jsxDEV","_jsxDEV","mockErrorCodeData","errorCode","count","mockPredictedFailuresData","name","value","mockMachineRuntimeData","machineId","avgRuntime","COLORS","MRIVisualizationDashboard","_s","errorCodeData","setErrorCodeData","predictedFailuresData","setPredictedFailuresData","machineRuntimeData","setMachineRuntimeData","loading","setLoading","error","setError","dataSource","setDataSource","fetchData","errorCodeResponse","fetch","method","headers","body","JSON","stringify","keyword","ok","errorCodeResult","json","data","slice","errorCodeCounts","forEach","row","Data","VarCharValue","processedErrorCodeData","Object","keys","map","code","sort","a","b","console","log","warn","status","err","predictionsResponse","predictionsResult","Array","isArray","machineFailureCounts","item","machine_id","processedPredictionsData","machine","runtimeResponse","runtimeResult","machineRuntimes","runtimeCounts","machine_runtime","runtime","parseInt","isNaN","processedRuntimeData","message","CustomTooltip","active","payload","length","className","children","fileName","_jsxFileName","lineNumber","columnNumber","percent","toFixed","width","height","margin","top","right","left","bottom","strokeDasharray","dataKey","fill","cx","cy","labelLine","outerRadius","nameKey","label","entry","index","content","angle","position","formatter","onClick","window","location","reload","alert","email","prompt","toEmail","_c","$RefreshReg$"],"sources":["/Users/seshasayeebalaji/Desktop/aws_proj/src/components/Visualization.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport {\n  BarChart, Bar, PieChart, Pie,\n  XAxis, YAxis, CartesianGrid, Tooltip, Legend,\n  ResponsiveContainer, Cell\n} from 'recharts';\n\n// Mock data for immediate display while real data loads\nconst mockErrorCodeData = [\n  { errorCode: \"E123\", count: 42 },\n  { errorCode: \"E045\", count: 38 },\n  { errorCode: \"E211\", count: 27 },\n  { errorCode: \"E078\", count: 19 },\n  { errorCode: \"E156\", count: 15 },\n];\n\nconst mockPredictedFailuresData = [\n  { name: \"MRI_001\", value: 12 },\n  { name: \"MRI_002\", value: 8 },\n  { name: \"MRI_003\", value: 5 },\n  { name: \"MRI_004\", value: 3 },\n];\n\nconst mockMachineRuntimeData = [\n  { machineId: \"MRI_001\", avgRuntime: 452 },\n  { machineId: \"MRI_002\", avgRuntime: 387 },\n  { machineId: \"MRI_003\", avgRuntime: 521 },\n  { machineId: \"MRI_004\", avgRuntime: 312 },\n];\n\n// Custom colors for charts\nconst COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#8884d8', '#82ca9d', '#ffc658', '#ff7300'];\n\nexport default function MRIVisualizationDashboard() {\n  // State for storing data\n  const [errorCodeData, setErrorCodeData] = useState(mockErrorCodeData);\n  const [predictedFailuresData, setPredictedFailuresData] = useState(mockPredictedFailuresData);\n  const [machineRuntimeData, setMachineRuntimeData] = useState(mockMachineRuntimeData);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [dataSource, setDataSource] = useState('mock');\n\n  // Fetch data from backend or use mock data\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        setLoading(true);\n        setError(null); // Reset error on each fetch\n\n        // --- Fetch Error Code Data ---\n        try {\n          const errorCodeResponse = await fetch('/api/search-athena', {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({ keyword: 'Error' })\n          });\n          if (errorCodeResponse.ok) {\n            const errorCodeResult = await errorCodeResponse.json();\n            if (errorCodeResult.data && errorCodeResult.data.slice(1)) {\n              const errorCodeCounts = {};\n              errorCodeResult.data.slice(1).forEach(row => {\n                if (row.Data && row.Data[2] && row.Data[2].VarCharValue) {\n                  const errorCode = row.Data[2].VarCharValue;\n                  errorCodeCounts[errorCode] = (errorCodeCounts[errorCode] || 0) + 1;\n                }\n              });\n              const processedErrorCodeData = Object.keys(errorCodeCounts)\n                .map(code => ({ errorCode: code, count: errorCodeCounts[code] }))\n                .sort((a, b) => b.count - a.count)\n                .slice(0, 10);\n              setErrorCodeData(processedErrorCodeData);\n              console.log(\"After fetching/processing errorCodeData:\", processedErrorCodeData);\n            } else {\n              console.warn(\"No or invalid error code data from API.\");\n            }\n          } else {\n            console.error(\"Failed to fetch error code data:\", errorCodeResponse.status);\n          }\n        } catch (err) {\n          console.error(\"Error fetching error codes:\", err);\n        }\n\n        // --- Fetch Predicted Failures Data ---\n        try {\n          const predictionsResponse = await fetch('/api/latest-predictions');\n          if (predictionsResponse.ok) {\n            const predictionsResult = await predictionsResponse.json();\n            if (predictionsResult.data && Array.isArray(predictionsResult.data)) {\n              const machineFailureCounts = {};\n              predictionsResult.data.forEach(item => {\n                const machineId = item.machine_id;\n                if (machineId) {\n                  machineFailureCounts[machineId] = (machineFailureCounts[machineId] || 0) + 1;\n                }\n              });\n              const processedPredictionsData = Object.keys(machineFailureCounts)\n                .map(machine => ({ name: machine, value: machineFailureCounts[machine] }));\n              setPredictedFailuresData(processedPredictionsData);\n              console.log(\"After fetching/processing predictedFailuresData:\", processedPredictionsData);\n            } else {\n              console.warn(\"No or invalid predictions data from API.\");\n            }\n          } else {\n            console.error(\"Failed to fetch predictions data:\", predictionsResponse.status);\n          }\n        } catch (err) {\n          console.error(\"Error fetching predictions:\", err);\n        }\n\n        // --- Fetch Machine Runtime Data ---\n        try {\n          const runtimeResponse = await fetch('/api/latest-s3-log');\n          if (runtimeResponse.ok) {\n            const runtimeResult = await runtimeResponse.json();\n            console.log(\"Raw runtimeResult:\", runtimeResult); // Log the raw result\n            if (runtimeResult.data && Array.isArray(runtimeResult.data)) {\n              const machineRuntimes = {};\n              const runtimeCounts = {};\n              runtimeResult.data.forEach(item => {\n                if (item.machine_id && item.machine_runtime) {\n                  const machineId = item.machine_id;\n                  const runtime = parseInt(item.machine_runtime, 10);\n                  if (!isNaN(runtime)) {\n                    machineRuntimes[machineId] = (machineRuntimes[machineId] || 0) + runtime;\n                    runtimeCounts[machineId] = (runtimeCounts[machineId] || 0) + 1;\n                  }\n                }\n              });\n              const processedRuntimeData = Object.keys(machineRuntimes)\n                .map(machine => ({\n                  machineId: machine,\n                  avgRuntime: runtimeCounts[machine] > 0 ? machineRuntimes[machine] / runtimeCounts[machine] : 0,\n                }));\n              setMachineRuntimeData(processedRuntimeData);\n              console.log(\"After fetching/processing machineRuntimeData:\", processedRuntimeData);\n            } else {\n              console.warn(\"No or invalid runtime data from API.\");\n              setMachineRuntimeData([]); // Ensure state is updated even if data is bad\n            }\n          } else {\n            console.error(\"Failed to fetch runtime data:\", runtimeResponse.status);\n            setMachineRuntimeData([]); // Ensure state is updated on failure\n          }\n        } catch (err) {\n          console.error(\"Error fetching runtime data:\", err);\n          setMachineRuntimeData([]); // Ensure state is updated on error\n        }\n\n        setDataSource('api');\n      } catch (err) {\n        console.error('Error in fetchData:', err);\n        setError(err.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchData();\n  }, []);\n\n  // Custom tooltip for pie chart\n  const CustomTooltip = ({ active, payload }) => {\n    if (active && payload && payload.length) {\n      return (\n        <div className=\"bg-white p-2 border border-gray-200 shadow-md rounded-md\">\n          <p className=\"font-bold\">{`${payload[0].name}: ${payload[0].value}`}</p>\n          <p>{`${(payload[0].percent * 100).toFixed(2)}% of predictions`}</p>\n        </div>\n      );\n    }\n    return null;\n  };\n\n  return (\n    <div className=\"p-6 max-w-6xl mx-auto\">\n      <h1 className=\"text-3xl font-bold mb-8 text-center text-gray-800\">MRI Machine Analytics Dashboard</h1>\n\n      {error && (\n        <div className=\"bg-red-50 p-4 rounded-lg border border-red-200 text-red-700 mb-6\">\n          <p className=\"font-bold\">Error loading visualizations:</p>\n          <p>{error}</p>\n        </div>\n      )}\n\n      {dataSource === 'mock' && !loading && (\n        <div className=\"bg-blue-50 p-4 rounded-lg border border-blue-200 text-blue-700 mb-6\">\n          <p className=\"font-bold\">Note: Using sample data for visualization</p>\n          <p>Real API data could not be loaded. Displaying demo charts instead.</p>\n        </div>\n      )}\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8 mb-8\">\n        {/* Error Codes Bar Chart */}\n        <div className=\"bg-white p-6 rounded-lg shadow-md\">\n          <h2 className=\"text-xl font-semibold mb-4 text-gray-700\">Most Frequent Error Codes</h2>\n          <div className=\"h-64\">\n            <ResponsiveContainer width=\"100%\" height=\"100%\">\n              <BarChart data={errorCodeData} margin={{ top: 5, right: 30, left: 20, bottom: 5 }}>\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis dataKey=\"errorCode\" />\n                <YAxis />\n                <Tooltip />\n                <Legend />\n                <Bar dataKey=\"count\" fill=\"#8884d8\" name=\"Frequency\" />\n              </BarChart>\n            </ResponsiveContainer>\n          </div>\n        </div>\n\n        {/* Predicted Failures Pie Chart */}\n        <div className=\"bg-white p-6 rounded-lg shadow-md\">\n          <h2 className=\"text-xl font-semibold mb-4 text-gray-700\">Predicted Failures by Machine</h2>\n          <div className=\"h-64\">\n            <ResponsiveContainer width=\"100%\" height=\"100%\">\n              <PieChart>\n                <Pie\n                  data={predictedFailuresData}\n                  cx=\"50%\"\n                  cy=\"50%\"\n                  labelLine={false}\n                  outerRadius={80}\n                  fill=\"#8884d8\"\n                  dataKey=\"value\"\n                  nameKey=\"name\"\n                  label={({ name, percent }) => `${name}: ${(percent * 100).toFixed(0)}%`}\n                >\n                  {predictedFailuresData.map((entry, index) => (\n                    <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\n                  ))}\n                </Pie>\n                <Tooltip content={<CustomTooltip />} />\n                <Legend />\n              </PieChart>\n            </ResponsiveContainer>\n          </div>\n        </div>\n      </div>\n\n      {/* Machine Runtime Bar Chart */}\n      <div className=\"bg-white p-6 rounded-lg shadow-md mb-8\">\n        <h2 className=\"text-xl font-semibold mb-4 text-gray-700\">Average Runtime of Machines</h2>\n        <div className=\"h-64\">\n          <ResponsiveContainer width=\"100%\" height=\"100%\">\n            <BarChart data={machineRuntimeData} margin={{ top: 5, right: 30, left: 20, bottom: 5 }}>\n              <CartesianGrid strokeDasharray=\"3 3\" />\n              <XAxis dataKey=\"machineId\" />\n              <YAxis label={{ value: 'Runtime (seconds)', angle: -90, position: 'insideLeft' }} />\n              <Tooltip formatter={(value) => [`${value.toFixed(1)} seconds`, 'Avg Runtime']} />\n              <Legend />\n              <Bar dataKey=\"avgRuntime\" fill=\"#82ca9d\" name=\"Average Runtime (seconds)\" />\n            </BarChart>\n          </ResponsiveContainer>\n        </div>\n      </div>\n\n      {/* Dashboard Controls */}\n      <div className=\"bg-white p-6 rounded-lg shadow-md\">\n        <h2 className=\"text-xl font-semibold mb-4 text-gray-700\">Dashboard Controls</h2>\n        <div className=\"flex flex-wrap gap-4\">\n          <button\n            className=\"bg-black hover:bg-gray-800 text-white py-2 px-4 rounded-md\"\n            onClick={() => window.location.reload()}\n          >\n            Refresh Data\n          </button>\n          <button\n            className=\"bg-black hover:bg-gray-800 text-white py-2 px-4 rounded-md\"\n            onClick={async () => {\n              try {\n                await fetch('/api/run-databricks-job', {\n                  method: 'POST',\n                  headers: { 'Content-Type': 'application/json' }\n                });\n                alert('Databricks job triggered successfully!');\n              } catch (err) {\n                alert('Failed to trigger Databricks job: ' + err.message);\n              }\n            }}\n          >\n            Run Prediction Job\n          </button>\n          <button\n            className=\"bg-black hover:bg-gray-800 text-white py-2 px-4 rounded-md\"\n            onClick={async () => {\n              try {\n                const email = prompt('Enter email address for maintenance alert:');\n                if (email) {\n                  await fetch('/api/send-maintenance-email', {\n                    method: 'POST',\n                    headers: { 'Content-Type': 'application/json' },\n                    body: JSON.stringify({ toEmail: email })\n                  });\n                  alert('Maintenance email sent successfully!');\n                }\n              } catch (err) {\n                alert('Failed to send email: ' + err.message);\n              }\n            }}\n          >\n            Send Maintenance Alert\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}